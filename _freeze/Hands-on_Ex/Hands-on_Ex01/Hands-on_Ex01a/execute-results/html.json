{
  "hash": "521646121ccf5e411e127b0a77299d97",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1a: Geospatial Data Wrangling\"\ntitle-block-banner: true\ndate: \"03-Aug-24\"\ndate-modified: \"last-modified\"\ntoc: true\ntoc-depth: 4\neditor: visual\nexecute: \n  freeze: true #never re-render during project render\n  echo: true #if false, displays charts without codes\n  eval: true #if false, displays codes without charts\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: false\n---\n\n\n![](images/placeholder_1a.PNG){fig-align=\"center\"}\n\n# 1 Overview\n\nIn this hands-on exercise, we learn how to import, wrangle, integrate, and process geographically referenced data sets using appropriate R packages.\n\n# 2 Data Acquisition\n\n+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+\n| Type       | Details                                                                                                                                                                  | Screenshot                                       |\n+============+==========================================================================================================================================================================+==================================================+\n| Geospatial | [Master Plan 2014 Subzone Boundary Web](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9) | ![](images/MPSZ_SHP.PNG){width=\"600\"}            |\n|            |                                                                                                                                                                          |                                                  |\n|            | *Source: data.gov.sg\\                                                                                                                                                    |                                                  |\n|            | Format: SHP*                                                                                                                                                             |                                                  |\n+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+\n| Geospatial | [Pre-Schools Location](https://beta.data.gov.sg/datasets?query=Pre-Schools+Location&resultId=d_a72bcd23e208d995f3bd4eececeaca43)                                         | ![](images/Pre-Schools_Loc_KML.PNG){width=\"600\"} |\n|            |                                                                                                                                                                          |                                                  |\n|            | *Source: data.gov.sg\\                                                                                                                                                    |                                                  |\n|            | Format: KML*                                                                                                                                                             |                                                  |\n+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+\n| Geospatial | [Cycling Path](https://datamall.lta.gov.sg/content/datamall/en/static-data.html)                                                                                         | ![](images/CyclingPath.PNG){width=\"600\"}         |\n|            |                                                                                                                                                                          |                                                  |\n|            | *Source: LTA Data Mall\\                                                                                                                                                  |                                                  |\n|            | Format: SHP*                                                                                                                                                             |                                                  |\n+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+\n| Aspatial   | [Singapore AirBnB Listing](https://insideairbnb.com/get-the-data/)                                                                                                       | ![](images/AirBnB.PNG){width=\"600\"}              |\n|            |                                                                                                                                                                          |                                                  |\n|            | Source: Inside AirBnB\\                                                                                                                                                   |                                                  |\n|            | Format: CSV                                                                                                                                                              |                                                  |\n+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+\n\n: Data Sources {tbl-colwidths=\"\\[10,20,70\\]\"}\n\n# 3 Loading Packages\n\n+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Package                                 | Description                                                                                                                                                                                                                              |\n+=========================================+==========================================================================================================================================================================================================================================+\n| [tidyverse](https://www.tidyverse.org/) | A collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                                              |\n|                                         |                                                                                                                                                                                                                                          |\n|                                         | Within **tidyverse**, we will explore the use of **readr** for importing csv files, **readxl** for importing Excel worksheets, **tidyr** for manipulating data, **dplyr** for data transformation, and **ggplot2** for visualising data. |\n+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [sf](https://r-spatial.github.io/sf/)   | For importing, managing, and processing geospatial data.                                                                                                                                                                                 |\n+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[10,90\\]\"}\n\nUnzip these downloads and save them into *geospatial* and *aspatial* sub-folders of the *data* folder.\n\nThe code chunk below installs and loads **sf** and **tidyverse** packages into R environment using `p_load` from the **pacman** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n# 4 Importing Geospatial Data\n\n## 4.1 Import polygon feature data in shapefile format\n\nThe code chunk below uses `st_read()` function of sf package:\n\n-   read simple features form file/database, or retrieve layer names and their geometry types(s)\n-   imports `MP14_SUBZONE_WEB_PL` shapefile into R as [polygon]{.underline} feature data frame\n-   `dsn` = defines data path; `layer` = provide the shapefile name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation**\n\n-   Geometry type = [**multipolygon**]{.underline} features\n-   323 multipolygon features and 15 fields in *mpsz* simple feature data frame\n-   Projected CRS = ***svy21*** projected coordinates systems\n-   Bounding box provides x extend and y extend of the data\n:::\n\n## 4.2 Import polyline feature data in shapefile form\n\nThe code chunk below imports *CyclingPath* shapefile into R as [**line**]{.underline} feature data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation**\n\n-   3138 features and 2 fields in *cyclingpath* [linestring]{.underline} feature data\n-   Projected CRS = ***svy21*** projected coordinates system\n:::\n\n## 4.3 Import GIS data in kml format\n\n*PreSchoolsLocation* is in kml format. Below code chunk used to import kml into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation**\n\n-   **preschool** = [point]{.underline} feature data frame\n-   2290 features and 2 fields\n-   Geodetic CRS = ***WGS84*** coordinates system\n:::\n\n# 5 Checking the Content of a Simple Feature Data Frame\n\nIn this sub-section, we will learn different ways to retrieve information related to the content of a simple feature data frame.\n\n::: panel-tabset\n## st_geometry()\n\n-   Column in sf data.frame that contains geometries is a list, of class **sfc**\n-   Can be retrieved by `mpsz$geom` or `mpsz\\[[1]]`, else `st_geometry()` can also be used\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n\nThe code above prints out basic information of the feature class, eg type of geometry, geographic extent of feature and coordinate system of the data.\n\n## glimpse()\n\n-   `glimpse()` report shows data types of each field\n-   *FMEL-UPD_D* field = date; *X_ADDR*, *Y_ADDR*, *SHAPE_L*, *SHAPE_AREA* = double-precision values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\n## head()\n\n-   `head()` used to display complete information of a feature object\n-   `n = 5` shows the selected number of records to display\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n:::\n:::\n\n:::\n\n# 6 Plotting the Geospatial Data\n\n-   `plot()` visualises geospatial features but meant for taking a quick look. For high cartographic quality plots, packages such as **tmap** should be used.\n-   Default plot is a multi-plot of all attributes\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = '#E4D5C9')\n\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nTo plot only the geometry:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = '#E4D5C9')\n\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nTo plot the sf object by using specific attribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = '#E4D5C9')\n\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# 7 Working with Projection\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n**Projection Transformation** refers to projection of a simple feature data from one coordinate system to another coordinate system.\n\n::: {.notebox .note data-latex=\"note\"}\n**Singapore's SVY21**\n\nCoordinate systems allow for common locations to be integrated into geographic datasets. The most commonly used coordinate system today is the latitude, longitude and height system in which the Equator(which lies halfway between the poles) and the Prime Meridian(a line through Greenwich) are reference lines used to measure latitude and longitude.\n\nProjected coordinate systems and geodetic data are needed due to the Earth's imperfect ellipsoid. Localised datums (such as SVY21 in Singapore's case) can provide a more accurate representation of the area of than the global WGS 84 datum.\n\nThe coordinate systems map the Earth's spherical surface onto a two-dimensional Cartesian coordinate plane. Thus, projected coordinate systems are referred to as map projections.\n\n![](Images/SG_CRS.PNG){fig-align=\"center\"} [*EPSG*](https://epsg.io/3414)\n:::\n\n## 7.1 Assigning EPSG code to a simple feature data frame\n\nA common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nBelow example shows the coordinate system of *mpsz* simple feature data frame by using `st_crs()` of **sf** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation:**\n\nAlthough *mpsz* data frame is projected in svy21 but EPSG is indicated as 9001. Correct EPSG code should be 3414. To assign correct EPS code to mpsz data frame, `st_set_crs()` of **sf** package can be used.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_set_crs(mpsz, 3414)\n```\n:::\n\n\nCheck CSR again using the code chunk below. Notice that EPSG code is now 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\n## 7.2 Transforming the projection of preschool from wgs84 to svy21\n\nIn geospatial analytics, it is common to transform original data from geographic coordinate system to projected coordinate system, as geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurement\n\nLet us take *preschool* simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nIn this scenario, *st_set_crs()* is not appropriate and *st_transform()* of **sf** package should be used. This is because we need to reproject *preschool* from one coordinate system to another coordinate system mathematically.\n\nThe code chunk below performs the projection transformation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(preschool3414, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 24821.92 ymin: 31299.16 xmax: 28844.56 ymax: 46303.16\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S COVE PRESCHOOL PTE.LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9390</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>498CC9FE48CC94D4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n2                    <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S COVE PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT8675</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>22877550804213FD</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n3       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S VINEYARD PRESCHOOL PTE. LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9308</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>B2FE90E44AD494E3</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n4 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9122</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>1384CDC0D14B76A1</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n5                               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILTERN HOUSE</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT2070</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>FB24EAA6E73B2723</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n                       geometry\n1 POINT Z (25089.46 31299.16 0)\n2 POINT Z (27189.07 32792.54 0)\n3 POINT Z (28844.56 36773.76 0)\n4 POINT Z (24821.92 46303.16 0)\n5 POINT Z (28637.82 35038.49 0)\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation:**\n\nNotice that dataframe is in svy21 projected coordinate system now. In *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n:::\n\n# 8 Importing and Converting an Aspatial Data\n\nDatasets such as *listing* of Inside AirBnB is called aspatial data, because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. In this section, we will learn how to import an aspatial data into R environment, save it as a tibble data frame, and convert it into a simple feature data frame.\n\n## 8.1 Importing aspatial data\n\nSince *listings* data set is in csv file format, we will use `read_csv()` of **readr** package to import listing.csv as shown the code chunk below. The output R object is called *listings* and it is a tibble data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n```\n:::\n\n\nAfter importing the data file, we should examine if data file has been imported correctly. We can use `list()` instead of `glimpse()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation:**\n\n-   *listing* tibble data frame consists of 3,540 rows and 18 columns\n-   Includes latitude and longitude, note that these are in decimal degree format\n-   As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System\n:::\n\n## 8.2 Creating a simple feature data frame from an aspatial data frame\n\nCode chunk below converts *listing* data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nArguments:\n\n-   `coords`: requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n\n-   `crs`: requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).\n\n    -   `%\\>%`: nests *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,540\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count <dbl> 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               <dbl> 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n:::\n:::\n\n\n::: {.lightbox .light data-latex=\"light\"}\n**Interpretation:**\n\n-   Displays content of *listing_sf*\n-   `geometry`: new column added\n-   `longitude` and `latitude` columns dropped from data frame\n:::\n\n# 9 Geoprocessing with sf package\n\n**sf** package offers a wide range of geoprocessing (also known as GIS analysis) functions, other than providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data.\n\nIn this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.\n\n## 9.1 Buffering\n\n::: panel-tabset\n## Scenario\n\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n## Solution\n\n1.  st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths. `nQuadSegs` = number of line segments used to approximate a quarter circle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n```\n:::\n\n\n2.  Calculate the area of the buffers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n```\n:::\n\n\n3.  `sum()` of Base R will be used to drive the total land involved\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218855 [m^2]\n```\n:::\n:::\n\n:::\n\n### 9.1.1 Line Segments\n\n::: panel-tabset\n## nQuadSegs = 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling10 <- st_buffer(cyclingpath, dist=5, nQuadSegs=10)\nbuffer_cycling10$AREA <- st_area(buffer_cycling10)\nsum(buffer_cycling10$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2217890 [m^2]\n```\n:::\n:::\n\n\n## nQuadSegs = 20\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling20 <- st_buffer(cyclingpath, dist=5, nQuadSegs=20)\nbuffer_cycling20$AREA <- st_area(buffer_cycling20)\nsum(buffer_cycling20$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218704 [m^2]\n```\n:::\n:::\n\n\n## nQuadSegs = 30\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218855 [m^2]\n```\n:::\n:::\n\n\n## nQuadSegs = 50\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling50 <- st_buffer(cyclingpath, dist=5, nQuadSegs=50)\nbuffer_cycling50$AREA <- st_area(buffer_cycling50)\nsum(buffer_cycling50$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218933 [m^2]\n```\n:::\n:::\n\n\n## nQuadSegs = 500\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling500 <- st_buffer(cyclingpath, dist=5, nQuadSegs=500)\nbuffer_cycling500$AREA <- st_area(buffer_cycling500)\nsum(buffer_cycling500$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218976 [m^2]\n```\n:::\n:::\n\n:::\n\n### 9.1.2 Distance\n\n::: panel-tabset\n## Dist = 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling_d1 <- st_buffer(cyclingpath, dist=1, nQuadSegs=30)\nbuffer_cycling_d1$AREA <- st_area(buffer_cycling_d1)\nsum(buffer_cycling_d1$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n404524.8 [m^2]\n```\n:::\n:::\n\n\n## Dist = 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2218855 [m^2]\n```\n:::\n:::\n\n\n## Dist = 50\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling_d50 <- st_buffer(cyclingpath, dist=50, nQuadSegs=30)\nbuffer_cycling_d50$AREA <- st_area(buffer_cycling_d50)\nsum(buffer_cycling_d50$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n44312097 [m^2]\n```\n:::\n:::\n\n:::\n\n## 9.2 Point-in-polygon count\n\n::: panel-tabset\n## Scenario\n\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\n## Solution\n\n1.  The code chunk below performs two operations at one go.\n    1.  Firstly, identify pre-schools located inside each Planning Subzone by using [`st_intersects()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html).\n    2.  Next, [`length()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))\n```\n:::\n\n\n2.  Check summary statistics of the newly derived *PreSch Count* field by using `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz3414$`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n:::\n:::\n\n\n3.  To list the planning subzone with the most number of pre-school, the `top_n()` of **dplyr** package is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_n(mpsz3414, 1, `PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n:::\n:::\n\n:::\n\n## 9.3 Density\n\n::: panel-tabset\n## Scenario\n\nCalculate the density of pre-school by planning subzone.\n\n## Solution\n\n1.  Use `st_area()` of **sf** package to derive the area of each planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$Area <- mpsz3414 %>% \n  st_area()\n```\n:::\n\n\n2.  `mutate()` of**dplyr** package is used to compute the density\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nprint(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            6\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            5\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            3\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           13\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            5\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            1\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...           11\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n              Area    PreSch Density\n1  1630379.3 [m^2]  0.000000 [1/m^2]\n2   559816.2 [m^2] 10.717803 [1/m^2]\n3   160807.5 [m^2]  0.000000 [1/m^2]\n4   595428.9 [m^2]  8.397308 [1/m^2]\n5   387429.4 [m^2]  7.743345 [1/m^2]\n6  1030378.8 [m^2] 12.616719 [1/m^2]\n7   551732.0 [m^2]  9.062370 [1/m^2]\n8   290184.7 [m^2]  3.446082 [1/m^2]\n9  1084792.3 [m^2] 10.140190 [1/m^2]\n10  631644.3 [m^2]  1.583170 [1/m^2]\n```\n:::\n:::\n\n:::\n\n# 10 Exploratory Data Analysis (EDA)\n\nMany geospatial analytics start with Exploratory Data Analysis. In this section, we learn how to use **ggplot2** functions to create functional and truthful statistical graphs for EDA purposes.\n\n1.  Plot a histogram to reveal the distribution of *PreSch Density*. Conventionally, `hist()` of R Graphics will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = '#E4D5C9')\n\nhist(mpsz3414$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nAlthough syntax is easy, the output is far from meeting publication quality. Function also has limited room for further customization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  \n  geom_histogram(bins=20,\n                 color=\"grey60\",\n                 fill=\"#f5f5f5\") +\n  \n  labs(title= \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle = \"There are may planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools.\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\") +\n  \n  geom_vline(aes(xintercept=median(as.numeric(mpsz3414$`PreSch Density`), na.rm=T)),\n               color=\"#815b41\", linewidth=1, linetype=\"dashed\") + \n  annotate(\n      \"text\", \n      x = 1, \n      y = 120,\n      label = paste(\"Median =\", round(median(as.numeric(mpsz3414$`PreSch Density`), na.rm=T), 3)),\n      color = \"#815b41\",\n      size = 3.5\n    ) +\n  \n    geom_vline(aes(xintercept=mean(as.numeric(mpsz3414$`PreSch Density`), na.rm=T)),\n               colour=\"#A70D04\", linewidth=1, linetype=\"dashed\") + \n    annotate(\n      \"text\", \n      x = 10, \n      y = 120,\n      label = paste(\"Mean =\", round(mean(as.numeric(mpsz3414$`PreSch Density`), na.rm=T), 3)),\n      color = \"#A70D04\",\n      size = 3.5\n    ) +\n  \n  theme_minimal() +\n  theme(plot.background=element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nUsing **ggplot2** method, we can also plot a scatterplot showing the relationship between pre-school density and pre-school count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414,\n       aes(y = `PreSch Count`,\n           x=as.numeric(`PreSch Density`)))+\n  geom_point(color=\"grey60\",\n             fill='#f5f5f5',\n             alpha = 0.5, \n             size = 2) +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  \n  geom_vline(aes(xintercept = 20),\n             col = '#A70D04',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 20),\n             col = '#A70D04',\n             size = 0.8,\n             linetype = \"dashed\") + \n  \n  labs(title= \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\") +\n  \n  theme_minimal() +\n  theme(plot.background=element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex01a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}