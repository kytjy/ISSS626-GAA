[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-polygon-feature-data-in-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-polygon-feature-data-in-shapefile-format",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "4.1 Import polygon feature data in shapefile format",
    "text": "4.1 Import polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package:\n\nread simple features form file/database, or retrieve layer names and their geometry types(s)\nimports MP14_SUBZONE_WEB_PL shapefile into R as polygon feature data frame\ndsn = defines data path; layer = provide the shapefile name\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nInterpretation\n\nGeometry type = multipolygon features\n323 multipolygon features and 15 fields in mpsz simple feature data frame\nProjected CRS = svy21 projected coordinates systems\nBounding box provides x extend and y extend of the data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-polyline-feature-data-in-shapefile-form",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-polyline-feature-data-in-shapefile-form",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "4.2 Import polyline feature data in shapefile form",
    "text": "4.2 Import polyline feature data in shapefile form\nThe code chunk below imports CyclingPath shapefile into R as line feature data frame\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nInterpretation\n\n3138 features and 2 fields in cyclingpath linestring feature data\nProjected CRS = svy21 projected coordinates system"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-gis-data-in-kml-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#import-gis-data-in-kml-format",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "4.3 Import GIS data in kml format",
    "text": "4.3 Import GIS data in kml format\nPreSchoolsLocation is in kml format. Below code chunk used to import kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nInterpretation\n\npreschool = point feature data frame\n2290 features and 2 fields\nGeodetic CRS = WGS84 coordinates system"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "7.1 Assigning EPSG code to a simple feature data frame",
    "text": "7.1 Assigning EPSG code to a simple feature data frame\nA common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nBelow example shows the coordinate system of mpsz simple feature data frame by using st_crs() of sf package.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nInterpretation:\nAlthough mpsz data frame is projected in svy21 but EPSG is indicated as 9001. Correct EPSG code should be 3414. To assign correct EPS code to mpsz data frame, st_set_crs() of sf package can be used.\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nCheck CSR again using the code chunk below. Notice that EPSG code is now 3414.\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "7.2 Transforming the projection of preschool from wgs84 to svy21",
    "text": "7.2 Transforming the projection of preschool from wgs84 to svy21\nIn geospatial analytics, it is common to transform original data from geographic coordinate system to projected coordinate system, as geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurement\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nIn this scenario, st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically.\nThe code chunk below performs the projection transformation:\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nhead(preschool3414, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 24821.92 ymin: 31299.16 xmax: 28844.56 ymax: 46303.16\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                    &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (25089.46 31299.16 0)\n2 POINT Z (27189.07 32792.54 0)\n3 POINT Z (28844.56 36773.76 0)\n4 POINT Z (24821.92 46303.16 0)\n5 POINT Z (28637.82 35038.49 0)\n\n\n\nInterpretation:\nNotice that dataframe is in svy21 projected coordinate system now. In Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#importing-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#importing-aspatial-data",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "8.1 Importing aspatial data",
    "text": "8.1 Importing aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nAfter importing the data file, we should examine if data file has been imported correctly. We can use list() instead of glimpse().\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\n\nInterpretation:\n\nlisting tibble data frame consists of 3,540 rows and 18 columns\nIncludes latitude and longitude, note that these are in decimal degree format\nAs a best guess, we will assume that the data is in wgs84 Geographic Coordinate System"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "8.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "8.2 Creating a simple feature data frame from an aspatial data frame\nCode chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nArguments:\n\ncoords: requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs: requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n\n%\\&gt;%: nests st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\n\nInterpretation:\n\nDisplays content of listing_sf\ngeometry: new column added\nlongitude and latitude columns dropped from data frame"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#buffering",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "9.1 Buffering",
    "text": "9.1 Buffering\n\nScenarioSolution\n\n\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n\nst_buffer() of sf package is used to compute the 5-meter buffers around cycling paths. nQuadSegs = number of line segments used to approximate a quarter circle.\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n\n\nCalculate the area of the buffers\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nsum() of Base R will be used to drive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\n\n\n9.1.1 Line Segments\n\nnQuadSegs = 10nQuadSegs = 20nQuadSegs = 30nQuadSegs = 50nQuadSegs = 500\n\n\n\nbuffer_cycling10 &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=10)\nbuffer_cycling10$AREA &lt;- st_area(buffer_cycling10)\nsum(buffer_cycling10$AREA)\n\n2217890 [m^2]\n\n\n\n\n\nbuffer_cycling20 &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=20)\nbuffer_cycling20$AREA &lt;- st_area(buffer_cycling20)\nsum(buffer_cycling20$AREA)\n\n2218704 [m^2]\n\n\n\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\n\nbuffer_cycling50 &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=50)\nbuffer_cycling50$AREA &lt;- st_area(buffer_cycling50)\nsum(buffer_cycling50$AREA)\n\n2218933 [m^2]\n\n\n\n\n\nbuffer_cycling500 &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=500)\nbuffer_cycling500$AREA &lt;- st_area(buffer_cycling500)\nsum(buffer_cycling500$AREA)\n\n2218976 [m^2]\n\n\n\n\n\n\n\n9.1.2 Distance\n\nDist = 5Dist = 5Dist = 50\n\n\n\nbuffer_cycling_d1 &lt;- st_buffer(cyclingpath, dist=1, nQuadSegs=30)\nbuffer_cycling_d1$AREA &lt;- st_area(buffer_cycling_d1)\nsum(buffer_cycling_d1$AREA)\n\n404524.8 [m^2]\n\n\n\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\n\nbuffer_cycling_d50 &lt;- st_buffer(cyclingpath, dist=50, nQuadSegs=30)\nbuffer_cycling_d50$AREA &lt;- st_area(buffer_cycling_d50)\nsum(buffer_cycling_d50$AREA)\n\n44312097 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "9.2 Point-in-polygon count",
    "text": "9.2 Point-in-polygon count\n\nScenarioSolution\n\n\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\n\n\nThe code chunk below performs two operations at one go.\n\nFirstly, identify pre-schools located inside each Planning Subzone by using st_intersects().\nNext, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nCheck summary statistics of the newly derived PreSch Count field by using summary().\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used.\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01a.html#density",
    "title": "Hands-on Exercise 1a: Geospatial Data Wrangling",
    "section": "9.3 Density",
    "text": "9.3 Density\n\nScenarioSolution\n\n\nCalculate the density of pre-school by planning subzone.\n\n\n\nUse st_area() of sf package to derive the area of each planning subzone.\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;% \n  st_area()\n\n\nmutate() ofdplyr package is used to compute the density\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nprint(mpsz3414)\n\nSimple feature collection with 323 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            6\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            5\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            3\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           13\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            5\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            1\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...           11\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n              Area    PreSch Density\n1  1630379.3 [m^2]  0.000000 [1/m^2]\n2   559816.2 [m^2] 10.717803 [1/m^2]\n3   160807.5 [m^2]  0.000000 [1/m^2]\n4   595428.9 [m^2]  8.397308 [1/m^2]\n5   387429.4 [m^2]  7.743345 [1/m^2]\n6  1030378.8 [m^2] 12.616719 [1/m^2]\n7   551732.0 [m^2]  9.062370 [1/m^2]\n8   290184.7 [m^2]  3.446082 [1/m^2]\n9  1084792.3 [m^2] 10.140190 [1/m^2]\n10  631644.3 [m^2]  1.583170 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#data-wrangling",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "4.1 Data Wrangling",
    "text": "4.1 Data Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by(), and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;% \n  filter(Time==2020) %&gt;% \n  group_by(PA, SZ, AG) %&gt;% # Group by Planning Area, Subzone, Age Group\n  summarise(`POP`=sum(`Pop`)) %&gt;%  # Summarise by # of population \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\ncolnames(popdata2020)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_over\"\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;% \n  # Young: Aged 0 to 24\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24\n         +rowSums(.[14])) %&gt;% # Aged 5 - 9\n  \n  # Economic Active: Aged 25 to 64\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %&gt;%  # Aged 60 -64\n  \n  # Aged: &gt; 65\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;% \n  \n  # Total: all age groups\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;% \n  \n  # Proportion of inactive population per working population\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %&gt;% \n  \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)\n\n\nglimpse(popdata2020)\n\nRows: 332\nColumns: 7\n$ PA               &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio…\n$ SZ               &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Cheng San\", \"Chong Boon\", …\n$ YOUNG            &lt;dbl&gt; 1290, 5640, 5100, 4620, 1880, 3330, 1940, 4190, 0, 11…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2760, 16460, 15000, 13010, 3630, 9050, 4480, 11950, 0…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 0, 750…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.7427536, 0.7102066, 0.7713333, 0.7486549, 0.8787879…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "4.2 Joining the attribute data and geospatial data",
    "text": "4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020_upper &lt;- popdata2020 %&gt;%  \n  mutate_at(.vars=vars(PA, SZ),\n            .funs=funs(toupper)) %&gt;% \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nclass(popdata2020_upper)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nglimpse(popdata2020_upper)\n\nRows: 234\nColumns: 7\n$ PA               &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO…\n$ SZ               &lt;chr&gt; \"ANG MO KIO TOWN CENTRE\", \"CHENG SAN\", \"CHONG BOON\", …\n$ YOUNG            &lt;dbl&gt; 1290, 5640, 5100, 4620, 1880, 3330, 1940, 4190, 1110,…\n$ `ECONOMY ACTIVE` &lt;dbl&gt; 2760, 16460, 15000, 13010, 3630, 9050, 4480, 11950, 2…\n$ AGED             &lt;dbl&gt; 760, 6050, 6470, 5120, 1310, 3610, 1530, 5100, 750, 4…\n$ TOTAL            &lt;dbl&gt; 4810, 28150, 26570, 22750, 6820, 15990, 7950, 21240, …\n$ DEPENDENCY       &lt;dbl&gt; 0.7427536, 0.7102066, 0.7713333, 0.7486549, 0.8787879…\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020_upper, # left: geospatial, right: aspatial\n                  by = c(\"SUBZONE_N\" = \"SZ\"))\n\nclass(mpsz_pop2020)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\n\n\n\n\n\nwrite_rds() is used to save R object as RDS (R Data Serialization) format. RDS allows the preservation of the state of R objects between R sessions.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\nmpsz_pop2020 &lt;- read_rds(\"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#plotting-a-choropleth-map-quickly-by-using-qtm",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "5.1 Plotting a choropleth map quickly by using qtm()",
    "text": "5.1 Plotting a choropleth map quickly by using qtm()\nqtm():\n\nEasiest and quickest to draw a choropleth map using tmap\nConcise and provides a good default visualisation in many cases.\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\n\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\nNote\n\ntmap_mode() with plot option: used to produce a static map. For interactive mode, view option should be used.\nfill argument: is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#creating-a-choropleth-map-by-using-tmaps-elements",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "5.2 Creating a choropleth map by using tmap’s elements",
    "text": "5.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  \n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  \n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            bg.color = \"#E4D5C9\",\n            frame = F) +\n  \n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 1.5) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics (DOS)\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n5.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons() + # for borders of the polygon\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n5.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\nThings to learn from tm_polygons()\n\nThe default interval binning used to draw the choropleth map is called pretty.\nThe default colour scheme used is YlOrRd of ColorBrewer.\nBy default, missing value will be shaded in grey.\n\n\n\n\n5.2.3 Drawing a choropleth map using tm_fill() and tm_border()\n\ntm_polygons() is a wraper of tm_fill() and tm_border().\ntm_fill() shades the polygons by using the default colour scheme\ntm_borders() adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependency values. To add the boundary of the planning subzones, tm_borders() will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.8,  alpha = 0.3) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nLight-gray border lines have been added on the choropleth map.\n\nalpha argument: used to define transparency number between 0 (totally transparent) and 1 (not transparent). Default = 1.\ncol: border colour\nlwd: border line width. Default = 1.\nlty: border line type. Default = “solid”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#data-classification-methods-of-tmap",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "5.3 Data classification methods of tmap",
    "text": "5.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. To define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n5.3.1 Plotting choropleth maps with built-in classification methods\n\nQuantileJenks / Natural BreaksEqual IntervalStandard Deviation\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\n\n2 Classes5 Classes6 Classes10 Classes\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\n\n\n5.3.2 Plotting choropleth map with custom break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill().\nIt is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#colour-scheme",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "5.4 Colour Scheme",
    "text": "5.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\nGradientDivergingReverseManual\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Spectral\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green. To reverse the colour shading, add a - prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\nmine &lt;- c('#c2c4b6','#f7f0c6','#dadada','#abb6c8', '#5D7599')\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = mine) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#map-layouts",
    "title": "Hands-on Exercise 1b: Thematic Mapping and GeoVisualisation",
    "section": "5.5 Map Layouts",
    "text": "5.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios.\nColour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n5.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  \n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  \n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.42, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE,\n            bg.color = \"#E4D5C9\") +\n  \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n5.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style(). The code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = T)\n\n\n\n\n\n\n5.5.3 Cartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nTo reset the default style, use code chunk below:\n\ntmap_style(\"white\")\n\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = F,\n            bg.color = \"#E4D5C9\") +\n  tm_borders(alpha = 0.5) +\n  tm_compass(size = 1.8) +\n  tm_scale_bar(width = 0.1) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n5.5.4 Drawing Small Multiple Choropleth Maps\nSmall multiple maps aka facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically.\nSmall multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to aesthetic argumentsBy defining a group-by variable in tm_facets()By creating multiple stand-alone maps with tmap_arrange()\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"), #&lt;&lt; 2 items\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            bg.color = \"#E4D5C9\",\n            frame = F) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"quantile\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio vs Aged Population\\n by Planning Subzone\",\n            main.title.position = \"center\",\n            main.title.size = 0.8,\n    legend.position = c(\"right\", \"bottom\"),\n            bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\nSplits maps into groups ie by region\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  \n  tm_facets(by=\"REGION_N\",  #&lt;&lt; Breakdown by Region\n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20,\n            bg.color = \"#E4D5C9\",\n            frame = F) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n5.5.5 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\nBelow code only displays portion of the map where Region = Central Region.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+ #&lt;&lt; == Central\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            bg.color = \"#E4D5C9\",\n            frame = F) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "we could go anywhere",
    "section": "Latest Posts",
    "text": "Latest Posts"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#inspect-and-reproject-coordinate-system",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#inspect-and-reproject-coordinate-system",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Inspect and Reproject Coordinate System",
    "text": "4.1 Inspect and Reproject Coordinate System\n\nChildcare DatasetCoastal Outline DatasetMaster Plan Subzone Dataset\n\n\nFirst, we inspect the crs of the data.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe ID provided is EPSG:4326 which matches the intended WGS84 Coordinate reference. We will now convert the CRS from WGS84 Geographic Coordinate System to SVY21 Projected Coordinate System for further analysis.\n\nchildcare_sf &lt;- st_transform(childcare_sf , crs = 3414)\n\nNow, let us check if the CRS ID has been set correctly:\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nFirst, we inspect the crs of the data.\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe ID provided is EPSG:9001 which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.\n\nsg_sf &lt;- st_set_crs(sg_sf, 3414)\n\nNow, let us check if the CRS ID has been set correctly:\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nFirst, we inspect the crs of the data.\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe ID provided is EPSG:9001 which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.\n\nmpsz_sf &lt;- st_set_crs(mpsz_sf, 3414)\n\nNow, let us check if the CRS ID has been set correctly:\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#mapping-the-geospatial-datasets",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#mapping-the-geospatial-datasets",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 Mapping the Geospatial Datasets",
    "text": "4.2 Mapping the Geospatial Datasets\nAfter checking the CRS of each geospatial data frame, we can plot a map to see their spatial patterns.\n\nStatic Map\nFirst, we will create a static map to get a general feel of the dataset.\n\ntm_shape(sg_sf)+\n  tm_polygons(col = \"#a87b6f\") +\ntm_shape(mpsz_sf) +\n  tm_polygons(col = \"#f5f5f5\") +\ntm_shape(childcare_sf) +\n  tm_dots(col=\"#800200\") +\ntm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\ntm_shape(mpsz_sf) +\n  tm_polygons(col = \"#f5f5f5\") +\ntm_shape(sg_sf)+\n  tm_polygons(col = \"#a87b6f\") +\ntm_shape(childcare_sf) +\n  tm_dots(col=\"#800200\") +\ntm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nHere, we do not see any anomalies, all the geospatial points are within the map’s context, which means that the reference system and coordinate values are referred to the similar spatial context.\nWe can also prepare a pin map (interactive) by using the code below:\n\ntmap_mode('view')\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(childcare_sf) +\n  tm_dots(alpha = 0.5)\n\n\n\n\n\n\nFrom the interactive map above, we can see that tmap is ustilising the leaflet for R API, which allows us to interact, navigate, zoom and query each simple feature. Changing the background of the map is also possible.\nAfter setting the tmap_mode() to view we need to remember to switch it back to plot.\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-sf-dataframes-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-sf-dataframes-to-sps-spatial-class",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Converting sf Dataframes to sp’s Spatial* Class",
    "text": "5.1 Converting sf Dataframes to sp’s Spatial* Class\nWhile simple feature data frame is gaining in popularity, many geospatial analysis packages still require the input geospatial data in sp’s Spatial* classes.\n\nConversionComparison\n\n\nThe code below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nNow, let’s view the information of the Spatial* classes below:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNow, they have been correctly converted into sp’s Spatial* classes.\n\n\n\nhead(childcare_sf)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 17828.84 ymin: 29221.89 xmax: 40985.94 ymax: 45530.47\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n6 kml_6\nescription\n1              &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;467903&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, LIMAU GARDEN, BEDOK PARK, SINGAPORE 467903&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APOLLO INTERNATIONAL PRESCHOOL PRIVATE LIMITED&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;0A2D85D9BC6DA78E&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2             &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;768019&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, NORTHPOINT DRIVE, #02 - 201, NORTHPOINT CITY, SINGAPORE 768019&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APPLE TREE PLAYHOUSE PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;BD725D1719396336&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;650165&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;165, BUKIT BATOK WEST AVENUE 8, #01 - 286, SINGAPORE 650165&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;Appleland Montessori Child Care Centre Pte Ltd&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FF040EB9367BFB2E&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4                                           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;103104&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;104C, DEPOT ROAD, #01 - 03, SINGAPORE 103104&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APPLELAND PLAYHOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;BB912CBA276356B3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5   &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;449290&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;5000G, MARINE PARADE ROAD, #01 - 28/30, LAGUNA PARK, SINGAPORE 449290&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APRICOT ACADEMY (LAGUNA) PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;20068306D2B9B484&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n6                                                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;589240&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;2B Hindhede Road   S(589240)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;Arise Preschool&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B77B9CE171F312A4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (40985.94 33848.38 0)\n2 POINT Z (28308.65 45530.47 0)\n3 POINT Z (17828.84 36607.36 0)\n4 POINT Z (25579.73 29221.89 0)\n5 POINT Z (38981.02 32483.41 0)\n6    POINT Z (21588.47 36307 0)\n\n\n\nhead(childcare)\n\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n6 kml_6\nescription\n1              &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;467903&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, LIMAU GARDEN, BEDOK PARK, SINGAPORE 467903&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APOLLO INTERNATIONAL PRESCHOOL PRIVATE LIMITED&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;0A2D85D9BC6DA78E&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2             &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;768019&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, NORTHPOINT DRIVE, #02 - 201, NORTHPOINT CITY, SINGAPORE 768019&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APPLE TREE PLAYHOUSE PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;BD725D1719396336&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;650165&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;165, BUKIT BATOK WEST AVENUE 8, #01 - 286, SINGAPORE 650165&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;Appleland Montessori Child Care Centre Pte Ltd&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FF040EB9367BFB2E&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4                                           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;103104&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;104C, DEPOT ROAD, #01 - 03, SINGAPORE 103104&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APPLELAND PLAYHOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;BB912CBA276356B3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5   &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;449290&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;5000G, MARINE PARADE ROAD, #01 - 28/30, LAGUNA PARK, SINGAPORE 449290&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;APRICOT ACADEMY (LAGUNA) PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;20068306D2B9B484&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n6                                                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;589240&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;2B Hindhede Road   S(589240)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;Arise Preschool&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B77B9CE171F312A4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n\n\n\npar(bg = '#E4D5C9')\n\nplot(childcare_sf)\n\n\n\n\n\npar(bg = '#E4D5C9')\n\nplot(childcare)\n\n\n\n\n\nhead(mpsz_sf)\n\nSimple feature collection with 6 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n\n\n\nhead(mpsz)\n\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area\n1 29220.19   5267.381  1630379.3\n2 29782.05   3506.107   559816.2\n3 29974.66   1740.926   160807.5\n4 29933.77   3313.625   595428.9\n5 30005.70   2825.594   387429.4\n6 29991.38   4428.913  1030378.8\n\n\n\npar(bg = '#E4D5C9')\n\nplot(mpsz_sf)\n\n\n\n\n\npar(bg = '#E4D5C9')\n\nplot(mpsz)\n\n\n\n\n\nhead(sg)\n\n  GDO_GID MSLINK MAPID              COSTAL_NAM\n1       1      1     0                 Linkway\n2       2      3     0                 SENTOSA\n3       3      5     0          PULAU SARIMBUN\n4       4      6     0           PULAU SAMULUN\n5       5      7     0 SINGAPORE - MAIN ISLAND\n6       6      8     0            PULAU KEPPEL\n\n\n\npar(bg = '#E4D5C9')\n\nplot(sg_sf)\n\n\n\n\n\npar(bg = '#E4D5C9')\n\nplot(sg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Converting the Spatial* Class into Generic sp Format",
    "text": "5.2 Converting the Spatial* Class into Generic sp Format\nspstat requires the analytical data to be in ppp object form. As there is no direct method to convert Spatial* classes to ppp object, we need to convert the Spatial* classes into an intermediate Spatial object first.\nThe code below converts Spatial* Classes into generic sp objects:\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nNext, we can display the sp object properties.\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nDifferences between Spatial* classes and generic sp object\n\nThe previous SpatialPolygonsDataFrame class has now changed to the respective Spatial objects (points/polygons).\nThe points in a SpatialPoints object may be associated with a row of attributes to create a SpatialPointsDataFrame object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Converting the Generic sp Format into spatstat’s ppp Format",
    "text": "5.3 Converting the Generic sp Format into spatstat’s ppp Format\nwe will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\nMarked planar point pattern: 1925 points\nmarks are of storage type  'character'\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nLet’s examine the difference by plotting chidlcare_ppp:\n\npar(bg = '#E4D5C9')\n\nplot(childcare_ppp)\n\n\n\n\nWe now look at the summary statistics of the newly created ppp object.\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\n\nKey Point\nPay attention to the warning message regarding duplicates. In spatial point patterns analysis, a notable concern is the existence of duplicates. The statistical methods applied to spatial point patterns are predominantly built on the assumption that processes are straightforward, meaning that points cannot overlap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#handling-duplicated-points",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.4 Handling duplicated points",
    "text": "5.4 Handling duplicated points\nIn order to check duplication in a ppp object:\n\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nmultiplicity() function is used to count the number of co-indicence point.\n\nmultiplicity(childcare_ppp)\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1925] 1\n\n\nIf we want to know how many locations have more than one point event:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 0\n\n\nTo view the locations of these duplicate point events, we will plot childcare data:\n\ntmap_mode('view')\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\n5.4.1 Jittering\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#creating-owin-object",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.5 Creating owin object",
    "text": "5.5 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nHow to covert sg SpatialPolygon object into owin object of spatstat:\n\nsg_owin &lt;- as.owin(sg_sf)\n\nThe output object can be displayed by using plot() function:\n\npar(bg = '#E4D5C9')\n\nplot(sg_owin)\n\n\n\n\nAnd using summary() function of Base R:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#combining-point-events-object-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#combining-point-events-object-and-owin-object",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.6 Combining point events object and owin object",
    "text": "5.6 Combining point events object and owin object\nFor the last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.653796e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\npar(bg = '#E4D5C9')\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#kernel-density-estimation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#kernel-density-estimation",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Kernel Density Estimation",
    "text": "6.1 Kernel Density Estimation\nIn this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.\n\n6.1.1 Computing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\nThe plot() function of Base R is then used to display the kernel density derived.\n\npar(bg = '#E4D5C9')\n\nplot(kde_childcareSG_bw)\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in number of points per square meter.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer:\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n306.6986 \n\n\n\n\n6.1.2 Rescalling KDE values\nrescale() is used to covert the unit of measurement from meter to kilometer:\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\npar(bg = '#E4D5C9')\n\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\nNow we notice the output image looks identical to the earlier version, the only changes in the data values (refer to the legend)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-automatic-badwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-automatic-badwidth-methods",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Working with different automatic badwidth methods",
    "text": "6.2 Working with different automatic badwidth methods\nBeside bw.diggle(), there are 3 other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using:\n\nbw.CvL()bw.scott()bw.ppl()bw.diggle()\n\n\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.159749 1.396455 \n\n\n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.3066986 \n\n\n\n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm as it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThis will be used to compare the output of using bw.diggle() and bw.ppl() methods.\n\npar(bg = '#E4D5C9')\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\n\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-kernel-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-kernel-methods",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Working with different kernel methods",
    "text": "6.3 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics. Let’s take a look at what they’re like:\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#computing-kde-by-using-fixed-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#computing-kde-by-using-fixed-bandwidth",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.1 Computing KDE by using fixed bandwidth",
    "text": "7.1 Computing KDE by using fixed bandwidth\nNext, we will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\npar(bg = '#E4D5C9')\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#computing-kde-by-using-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#computing-kde-by-using-adaptive-bandwidth",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.2 Computing KDE by using adaptive bandwidth",
    "text": "7.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, we will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\npar(bg = '#E4D5C9')\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using:\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(1,2))\n\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-kde-output-into-grid-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#converting-kde-output-into-grid-object",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.3 Converting KDE output into grid object",
    "text": "7.3 Converting KDE output into grid object\nThe result is the same, we just convert it so that it is suitable for mapping purposes:\n\npar(bg = '#E4D5C9')\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n7.3.1 Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\n\nLet us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.014191e-14, 32.45281  (min, max)\n\n\nNotice that the crs property is NA.\n\n\n7.3.2 Assigning projection systems\nBelow we will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.014191e-14, 32.45281  (min, max)\n\n\nNote: crs property is completed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#visualising-the-output-in-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#visualising-the-output-in-tmap",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.4 Visualising the output in tmap",
    "text": "7.4 Visualising the output in tmap\nFinally, we will display the raster in cartographic quality map using tmap package.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE,\n            bg.color = \"#E4D5C9\")\n\n\n\n\nNotice: The raster values are encoded explicitly onto the raster pixel using the values in “v” field."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#comparing-spatial-point-patterns-using-kde",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#comparing-spatial-point-patterns-using-kde",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "7.5 Comparing Spatial Point Patterns using KDE",
    "text": "7.5 Comparing Spatial Point Patterns using KDE\nIn this section, we will learn how to compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n7.5.1 Extracting Study Area\nTo extract the target planning areas:\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas:\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n7.5.2 Creating owin object\nNow, we will convert these sf objects into owin objects that is required by spatstat.\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n7.5.3 Combining childcare points and the study area\nTo extract childcare that is within the specific region to do our analysis later on:\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nTo plot these four study areas and the locations of the childcare centres.\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n7.5.4 Computing KDE\nTo compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n7.5.5 Computing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#testing-spatial-point-patterns-using-clark-and-evans-test",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "8.1 Testing spatial point patterns using Clark and Evans Test",
    "text": "8.1 Testing spatial point patterns using Clark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.51429, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\nInterpretation\nAs P is &lt; 0.05, we reject the null hypothesis that the childcare services are randomly distributed. We can infer from the R value (Nearest Neighbour Index) that since R = 0.51429 &lt; 1, the pattern exhibits clustering in Singapore.\n\n\n4.5.2 Clark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.91943, p-value = 0.1849\nalternative hypothesis: two-sided\n\n\n\nInterpretation\nAs P is 0.0661 &gt; 0.05, we cannot reject the null hypothesis that the childcare services are randomly distributed in Choa Chu Kang.\n\n\n\n4.5.3 Clark and Evans Test: Tampines planning area\nThe similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.68765, p-value = 1.024e-10\nalternative hypothesis: two-sided\n\n\n\nInterpretation\nAs P is &lt; 0.05, we reject the null hypothesis that the childcare services are randomly distributed. We can infer from the R value (Nearest Neighbour Index) that since R = 0.68631 &lt; 1, the pattern exhibits clustering in Tampines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "This hands-on exercise is the continuation of Hands-on Exercise 2a."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-sf-dataframes-to-sps-spatial-class",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-sf-dataframes-to-sps-spatial-class",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Converting sf Dataframes to sp’s Spatial* Class",
    "text": "5.1 Converting sf Dataframes to sp’s Spatial* Class\nWhile simple feature data frame is gaining in popularity, many geospatial analysis packages still require the input geospatial data in sp’s Spatial* classes.\nThe code below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nNow, let’s view the information of the Spatial* classes below:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Name,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    Description \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNow, they have been correctly converted into sp’s Spatial* classes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Converting the Spatial* class into generic sp format",
    "text": "5.2 Converting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThis converts the Spatial* classes into generic sp objects.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nThis display sp objects properties:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.1 Converting the Generic sp Format into spatstat’s ppp Format",
    "text": "5.1 Converting the Generic sp Format into spatstat’s ppp Format\nWe will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nchildcare_ppp &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nLet’s examine the difference by plotting chidlcare_ppp:\n\npar(bg = '#E4D5C9')\n\nplot(childcare_ppp)\n\n\n\n\nWe now look at the summary statistics of the newly created ppp object.\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\n\nKey Point\nOutput provides key information about the planar point pattern, including the number of points, average intensity, presence of duplicate points, precision of coordinates, the window dimensions, and the associated warning about the potential impact of duplicated points on spatial analysis methodologies."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#handling-duplicated-points",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#handling-duplicated-points",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.2 Handling duplicated points",
    "text": "5.2 Handling duplicated points\nIn order to check duplication in a ppp object:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nmultiplicity() function is used to count the number of co-indicence point.\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nIf we want to know how many locations have more than one point event:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nTo view the locations of these duplicate point events, we will plot childcare data:\n\ntmap_mode('view')\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\nThe code chunk below implements the jittering approach.\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#creating-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#creating-owin-object",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.3 Creating owin object",
    "text": "5.3 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nHow to covert sg SpatialPolygon object into owin object of spatstat:\n\nsg_owin &lt;- as(sg_sp, \"owin\")\n\nThe output object can be displayed by using plot() function:\n\npar(bg = '#E4D5C9')\n\nplot(sg_owin)\n\n\n\n\nAnd using summary() function of Base R:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#combining-point-events-object-and-owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#combining-point-events-object-and-owin-object",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "5.4 Combining point events object and owin object",
    "text": "5.4 Combining point events object and owin object\nFor the last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.570982e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\npar(bg = '#E4D5C9')\n\nplot(childcareSG_ppp)\n\n\n\n\n\n5.4.1 Extracting Study Area\nTo extract the target planning areas:\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas:\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n5.4.2 Converting the spatial point data frame into generic sp format\nConvert these SpatialPolygonsDataFrame layers into generic spatialpolygons layers:\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\n5.4.3 Creating owin object (Similar as Hands-on_Ex03 part 1)\nConvert these SpatialPolygons objects into owin objects that is required by spatstat:\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n5.4.4 Combining childcare points and the study area\nTo extract childcare that is within the specific region to do our analysis later on:\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nNext, rescale() function is used to trasnform the unit of measurement from metre to kilometre.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nTo plot these four study areas and the locations of the childcare centres.\n\npar(bg = '#E4D5C9')\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-g-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-g-function",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.1 Analysing Spatial Point Process Using G-Function",
    "text": "6.1 Analysing Spatial Point Process Using G-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will learn how to compute G-function estimation by using Gest() of spatstat package. We will also learn how to perform monte carlo simulation test using envelope() of spatstat package.\n\nGest()\nGest(X, r=NULL, breaks=NULL, …, correction=c(\"rs\", \"km\", \"han\"), domain=NULL)\nX: The observed point pattern, from which an estimate of will be computed. An object of class ppp, or data in any format acceptable to as.ppp().\nCorrection: Optional. The edge correction(s) to be used to estimate. A vector of character strings selected from “none”, “rs”, “km”, “Hanisch” and “best”. Alternatively correction=“all” selects all options.\n\n\nChoa Chu Kang planning areaTampines planning area\n\n\n\nComputing G-function estimation\nTo compute G-function using Gest() of spatstat package:\n\npar(bg = '#E4D5C9')\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\npar(bg = '#E4D5C9')\n\nG_CK_all = Gest(childcare_ck_ppp)\nplot(G_CK_all, xlim=c(0,500))\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\\(H_1\\)= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nComputing G-function estimation\n\npar(bg = '#E4D5C9')\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Tampines are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Analysing Spatial Point Process Using F-Function",
    "text": "6.2 Analysing Spatial Point Process Using F-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will learn how to compute F-function estimation by using Fest() of spatstat package. We will also learn how to perform monte carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning areaTampines planning area\n\n\n\nComputing F-function estimation\nTo compute F-function using Fest() of spatstat package:\n\npar(bg = '#E4D5C9')\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with F-function:\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nComputing F-function estimation\nMonte Carlo test with F-function:\n\npar(bg = '#E4D5C9')\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Tampines are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.3 Analysing Spatial Point Process Using K-Function",
    "text": "6.3 Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using Kest() of spatstat package. We will also learn how to perform monte carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning areaTampines planning area\n\n\n\nComputing K-function estimate\n\npar(bg = '#E4D5C9')\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nComputing K-function estimation\n\npar(bg = '#E4D5C9')\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Tampines are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#choa-chu-kang-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#choa-chu-kang-planning-area-2",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Choa Chu Kang planning area",
    "text": "Choa Chu Kang planning area\n\nComputing K-function estimate\n\npar(bg = '#E4D5C9')\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#tampines-planning-area-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#tampines-planning-area-2",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Tampines planning area",
    "text": "Tampines planning area\n\nComputing K-function estimation\n\npar(bg = '#E4D5C9')\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Tampines are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02b.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-on Exercise 2b: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "6.4 Analysing Spatial Point Process Using L-Function",
    "text": "6.4 Analysing Spatial Point Process Using L-Function\nIn this section, you will learn how to compute L-function estimation by using Lest() of spatstat package. We will also learn how to perform monte carlo simulation test using envelope() of spatstat package.\n\nChoa Chu Kang planning areaTampines planning area\n\n\n\nComputing L-function estimation\n\npar(bg = '#E4D5C9')\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\\(H_0\\) = The distribution of childcare services at Choa Chu Kang are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\nThe code chunk below is used to perform the hypothesis testing.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nComputing L-function estimate\n\npar(bg = '#E4D5C9')\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\\(H_0\\) = The distribution of childcare services at Tampines are randomly distributed.\n\\(H_1\\) = The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nThe code chunk below will be used to perform the hypothesis testing\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(bg = '#E4D5C9')\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/data/geospatial/MPSZ-2019.html",
    "title": "we could go anywhere",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#import",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "4.1 Import",
    "text": "4.1 Import\nThe code chunk below uses st_read() of sf package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\nnetwork &lt;- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n\nReading layer `Punggol_St' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\nchildcare &lt;- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\")\n\nReading layer `Punggol_CC' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#checking-contents",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#checking-contents",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "4.2 Checking Contents",
    "text": "4.2 Checking Contents\n\nNetworkChildcare\n\n\n\nnetwork\n\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     LINK_ID                   ST_NAME                       geometry\n1  116130894                PUNGGOL RD LINESTRING (36546.89 44574....\n2  116130897 PONGGOL TWENTY-FOURTH AVE LINESTRING (36546.89 44574....\n3  116130901   PONGGOL SEVENTEENTH AVE LINESTRING (36012.73 44154....\n4  116130902   PONGGOL SEVENTEENTH AVE LINESTRING (36062.81 44197....\n5  116130907           PUNGGOL CENTRAL LINESTRING (36131.85 42755....\n6  116130908                PUNGGOL RD LINESTRING (36112.93 42752....\n7  116130909           PUNGGOL CENTRAL LINESTRING (36127.4 42744.5...\n8  116130910               PUNGGOL FLD LINESTRING (35994.98 42428....\n9  116130911               PUNGGOL FLD LINESTRING (35984.97 42407....\n10 116130912            EDGEFIELD PLNS LINESTRING (36200.87 42219....\n\n\n\nstr(network)\n\nClasses 'sf' and 'data.frame':  2642 obs. of  3 variables:\n $ LINK_ID : num  1.16e+08 1.16e+08 1.16e+08 1.16e+08 1.16e+08 ...\n $ ST_NAME : chr  \"PUNGGOL RD\" \"PONGGOL TWENTY-FOURTH AVE\" \"PONGGOL SEVENTEENTH AVE\" \"PONGGOL SEVENTEENTH AVE\" ...\n $ geometry:sfc_LINESTRING of length 2642; first list element:  'XY' num [1:2, 1:2] 36547 36559 44575 44614\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA\n  ..- attr(*, \"names\")= chr [1:2] \"LINK_ID\" \"ST_NAME\"\n\n\n\nst_crs(network)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nchildcare\n\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n      Name                      geometry\n1   kml_10 POINT Z (36173.81 42550.33 0)\n2   kml_99 POINT Z (36479.56 42405.21 0)\n3  kml_100 POINT Z (36618.72 41989.13 0)\n4  kml_101 POINT Z (36285.37 42261.42 0)\n5  kml_122  POINT Z (35414.54 42625.1 0)\n6  kml_161 POINT Z (36545.16 42580.09 0)\n7  kml_172 POINT Z (35289.44 44083.57 0)\n8  kml_188 POINT Z (36520.56 42844.74 0)\n9  kml_205  POINT Z (36924.01 41503.6 0)\n10 kml_222 POINT Z (37141.76 42326.36 0)\n\n\n\nstr(childcare)\n\nClasses 'sf' and 'data.frame':  61 obs. of  2 variables:\n $ Name    : chr  \"kml_10\" \"kml_99\" \"kml_100\" \"kml_101\" ...\n $ geometry:sfc_POINT of length 61; first list element:  'XYZ' num  36174 42550 0\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA\n  ..- attr(*, \"names\")= chr \"Name\"\n\n\n\nst_crs(childcare)\n\nCoordinate Reference System:\n  User input: SVY21 / Singapore TM \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-plot",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "Using Plot",
    "text": "Using Plot\n\npar(bg = '#E4D5C9')\n\nplot(st_geometry(network))\n\nplot(childcare,\n     add=T,\n     col='#800200',\n     pch = 19)\n\n\n\n\n\npar(bg = '#E4D5C9')\n\nplot(network)\n\nplot(childcare,\n     add=T,\n     col='#800200',\n     pch = 19)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#using-tmap",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "Using Tmap",
    "text": "Using Tmap\nFor achieving a visually appealing and interactive representation of geospatial data, the tmap package’s mapping function can be employed.\n\ntmap_mode('view')\n\ntm_shape(childcare) + \n  tm_dots(col = \"#800200\") + \n  tm_shape(network) +\n  tm_lines()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#preparing-the-lixels-objects",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#preparing-the-lixels-objects",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "6.1 Preparing the lixels objects",
    "text": "6.1 Preparing the lixels objects\nPrior to computing NetKDE, it is necessary to partition the SpatialLines object into lixels with a specified minimum distance. This operation can be accomplished using the lixelize_lines() function from the spNetwork package.\n\nLixel Length 700Lixel Length 750\n\n\n\nlixels &lt;- lixelize_lines(lines = network, #&lt;&lt; SpatialLinesDataFrame\n                         lx_length = 700, #&lt;&lt; Length of a lixel\n                         mindist = 350) #&lt;&lt; Minimum length of a lixel\n\n\n\n\nlixels_750 &lt;- lixelize_lines(lines = network, #&lt;&lt; SpatialLinesDataFrame\n                         lx_length = 750, #&lt;&lt; Length of a lixel\n                         mindist = 375) #&lt;&lt; Minimum length of a lixel\n\n\n\n\n\nLixelize_lines Function\n\nDimensions for Lixels Objects:\n\nSet the length of a lixel (lx_length) to 700m.\nSet the minimum length of a lixel (mindist) to 350m.\nAfter cut, if the final lixel is shorter than the minimum distance, it will be added to the previous lixel.\nSegments that are already shorter than the minimum length are not modified.\nIf the minimum length is NULL, then mindist = maxdist/10.\nAdditional Information about Lixelize_lines Function:\nLixelize_lines is used to cut a SpatialLines object into lixels with a specified minimal distance.\nThe function also supports multicore processing through lixelize_lines.mc().\n\nPost-cut Considerations:\n\nAfter cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel.\nIf the minimum distance is NULL, then mindist is set to maxdist/10.\nSegments that are already shorter than the minimum distance are not modified."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#generate-line-centre-points-using-lines_center-of-spnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#generate-line-centre-points-using-lines_center-of-spnetwork",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "6.2 Generate line centre points using lines_center() of spNetwork",
    "text": "6.2 Generate line centre points using lines_center() of spNetwork\n\nlines_center() of spNetwork is used to generate a SpatialPointsDataFrame with line center points.\nPoints are located at center of line based on the length of the line.\n\n\nLixel Length 700Lixel Length 750\n\n\n\nsamples &lt;- lines_center(lixels)\n\n\n\n\nsamples_750 &lt;- lines_center(lixels_750)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#performing-netkde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#performing-netkde",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "6.3 Performing NetKDE",
    "text": "6.3 Performing NetKDE\nTo compute the NetKDE:\n\nLixel Length 700Lixel Length 750\n\n\n\ndensities &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\", #&lt;&lt;\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", #&lt;&lt; Can be simple, discontinuous, continuous\n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  #agg = 5, #&lt;&lt; Aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\n\ndensities_750 &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples_750,\n                  kernel_name = \"quartic\", #&lt;&lt;\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", #&lt;&lt; Can be simple, discontinuous, continuous\n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  #agg = 5, #&lt;&lt; Aggregate events within a 5m radius (faster calculation)\n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\n\n\nKernel Method and Arguments:\n\nThe code chunk reveals the use of the quartic kernel (kernel_name argument).\nspNetwork supports various kernel methods, including triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov, or uniform.\n\nCalculation Methods for NKDE:\n\nThe method argument indicates the use of the “simple” method for calculating NetKDE.\nspNetwork offers three methods for NKDE:\n\nsimple: Distances between events and sampling points are replaced by network distances. The kernel formula is adjusted to calculate density over a linear unit instead of an areal unit.\ndiscontinuous: Proposed by Okabe et al. (2008), this method “divides” the mass density of an event at intersections of lixels.\ncontinuous: An alternative version proposed by Okabe et al. (2008) adjusts the density before intersections, making the function continuous.\n\n\nUser Guide Reference:\n\nThe user guide of the spNetwork package provides a comprehensive discussion of nkde(). It is recommended to read the guide to understand various parameters for calibrating the NetKDE model.\n\nAdditional Notes on Arguments:\n\nThe chosen kernel method is quartic, and the decision is explained.\nspNetwork supports alternative kernel methods such as triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov, or uniform.\nThe selected method for NKDE calculation is “simple,” and the reasons for its use are explained.\nOther supported methods include “discontinuous” and “continuous,” each with specific characteristics described in the code chunk."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-netkde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#visualising-netkde",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "6.4 Visualising NetKDE",
    "text": "6.4 Visualising NetKDE\n\n6.4.1 Insert computed density values (i.e. densities) into samples and lixels objects as density field\n\nLixel Length 700Lixel Length 750\n\n\n\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\n\n\n\nsamples$density_750 &lt;- densities_750\nlixels$density_750 &lt;- densities_750\n\n\n\n\n\n\n6.4.2 Rescale density values from number of events per m to number of events per km\nAs the svy21 projection system is in meters, the resulting density values are very small (e.g., 0.0000005). The code below employed to rescale the density values from the number of events per meter to the number of events per km.\n\nLixel Length 700Lixel Length 750\n\n\n\n# rescaling to help the mapping\n\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\n\n\nsamples$density_750 &lt;- samples$density_750*1000\nlixels$density_750 &lt;- lixels$density_750*1000\n\n\n\n\n`\n\n\n6.4.3 Using tmap package to plot map after rescaling\ntmap packages can be used to prepare interactive and high cartographic quality map visualisation.\n\nLixel Length 700Lixel Length 750\n\n\n\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\n\n\n\ntm_shape(lixels)+\n  tm_lines(col=\"density_750\")+\ntm_shape(childcare)+\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\nInterpretation\n\nRoad segments with relatively higher density of childcare centres (darker color)\nRoad segments with relatively lower density of childcare centres (lighter color)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#complete-spatial-randomness-csr-test",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#complete-spatial-randomness-csr-test",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "Complete Spatial Randomness (CSR) Test",
    "text": "Complete Spatial Randomness (CSR) Test\n\nObjective: Conducting CSR test using the kfunctions() function from the spNetwork package.\nNull Hypothesis (\\(H_0\\)): The observed spatial point events (i.e., distribution of childcare centres) exhibit a uniform distribution over a street network in Punggol Planning Area.\nCSR Test Assumption:\n\nThe CSR test relies on the assumption of a binomial point process.\nAssumption implies that childcare centres are randomly and independently distributed over the street network.\n\nInterpretation of Results:\n\nIf the null hypothesis is rejected:\n\nInference: The distribution of childcare centres shows spatial interactions and dependence.\nResultant Patterns: Nonrandom patterns may be observed.\n\n\nCSR Test Execution:\n\nExecution involves utilizing the kfunctions() function from the spNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#code-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#code-1",
    "title": "Hands-on Exercise 3: Network Constrained Spatial Point Patterns Analysis",
    "section": "Code",
    "text": "Code\n\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-data-into-r-environment",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "3.1 Loading Data Into R Environment",
    "text": "3.1 Loading Data Into R Environment\n\nImport Geospatial ShapefileImport Aspatial csv FilePerform relational join\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nRows: 88\nColumns: 8\n$ NAME_2     &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ ENGTYPE_3  &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Cou…\n$ Shape_Leng &lt;dbl&gt; 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918,…\n$ Shape_Area &lt;dbl&gt; 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357,…\n$ County     &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ geometry   &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n\n\n\n\n\n\n\n\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nShape_Leng\nShape_Area\nCounty\ngeometry\n\n\n\n\nChangde\n21098\nAnxiang\nCounty\n1.8690742\n0.1005619\nAnxiang\nPOLYGON ((112.0625 29.75523...\n\n\nChangde\n21100\nHanshou\nCounty\n2.3606914\n0.1997875\nHanshou\nPOLYGON ((112.2288 29.11684...\n\n\nChangde\n21101\nJinshi\nCounty City\n1.4256199\n0.0530241\nJinshi\nPOLYGON ((111.8927 29.6013,...\n\n\nChangde\n21102\nLi\nCounty\n3.4743245\n0.1890812\nLi\nPOLYGON ((111.3731 29.94649...\n\n\nChangde\n21103\nLinli\nCounty\n2.2895061\n0.1145036\nLinli\nPOLYGON ((111.6324 29.76288...\n\n\nChangde\n21104\nShimen\nCounty\n4.1719181\n0.3719471\nShimen\nPOLYGON ((110.8825 30.11675...\n\n\nChangsha\n21109\nLiuyang\nCounty City\n4.0605788\n0.4601679\nLiuyang\nPOLYGON ((113.9905 28.5682,...\n\n\nChangsha\n21110\nNingxiang\nCounty\n3.3237542\n0.2661420\nNingxiang\nPOLYGON ((112.7181 28.38299...\n\n\nChangsha\n21111\nWangcheng\nCounty\n2.2920930\n0.1304916\nWangcheng\nPOLYGON ((112.7914 28.52688...\n\n\nChenzhou\n21112\nAnren\nCounty\n2.2407387\n0.1334394\nAnren\nPOLYGON ((113.1757 26.82734...\n\n\nChenzhou\n21115\nGuidong\nCounty\n2.0467289\n0.1285299\nGuidong\nPOLYGON ((114.1799 26.20117...\n\n\nChenzhou\n21117\nJiahe\nCounty\n1.5038242\n0.0631237\nJiahe\nPOLYGON ((112.4425 25.74358...\n\n\nChenzhou\n21118\nLinwu\nCounty\n2.0512481\n0.1244964\nLinwu\nPOLYGON ((112.5914 25.55143...\n\n\nChenzhou\n21119\nRucheng\nCounty\n2.7155640\n0.2176296\nRucheng\nPOLYGON ((113.6759 25.87578...\n\n\nChenzhou\n21120\nYizhang\nCounty\n3.2765386\n0.1935418\nYizhang\nPOLYGON ((113.2621 25.68394...\n\n\nChenzhou\n21121\nYongxing\nCounty\n2.9211528\n0.1767181\nYongxing\nPOLYGON ((113.3169 26.41843...\n\n\nChenzhou\n21122\nZixing\nCounty City\n2.6995368\n0.2476280\nZixing\nPOLYGON ((113.7311 26.16259...\n\n\nHengyang\n21123\nChangning\nCounty City\n2.4013569\n0.1863642\nChangning\nPOLYGON ((112.6144 26.60198...\n\n\nHengyang\n21124\nHengdong\nCounty\n2.7098301\n0.1756985\nHengdong\nPOLYGON ((113.1056 27.21007...\n\n\nHengyang\n21125\nHengnan\nCounty\n3.7804926\n0.2408050\nHengnan\nPOLYGON ((112.7599 26.98149...\n\n\nHengyang\n21126\nHengshan\nCounty\n2.3513543\n0.0899128\nHengshan\nPOLYGON ((112.607 27.4689, ...\n\n\nHengyang\n21129\nLeiyang\nCounty\n2.7427498\n0.2426073\nLeiyang\nPOLYGON ((112.9996 26.69276...\n\n\nHengyang\n21130\nQidong\nCounty\n3.0714217\n0.1733332\nQidong\nPOLYGON ((111.7818 27.0383,...\n\n\nHuaihua\n21131\nChenxi\nCounty\n3.0228314\n0.1821929\nChenxi\nPOLYGON ((110.2624 28.21778...\n\n\nHuaihua\n21134\nZhongfang\nCounty\n2.9023763\n0.1994978\nZhongfang\nPOLYGON ((109.9431 27.72858...\n\n\nHuaihua\n21135\nHuitong\nCounty\n3.1096821\n0.2053454\nHuitong\nPOLYGON ((109.9419 27.10512...\n\n\nHuaihua\n21136\nJingzhou\nCounty\n2.8584583\n0.1988991\nJingzhou\nPOLYGON ((109.8186 26.75842...\n\n\nHuaihua\n21137\nMayang\nAutonomous County\n2.3274351\n0.1462606\nMayang\nPOLYGON ((109.795 27.98008,...\n\n\nHuaihua\n21138\nTongdao\nAutonomous County\n2.5711292\n0.2021613\nTongdao\nPOLYGON ((109.9294 26.46561...\n\n\nHuaihua\n21139\nXinhuang\nAutonomous County\n2.1443973\n0.1377764\nXinhuang\nPOLYGON ((109.227 27.43733,...\n\n\nHuaihua\n21140\nXupu\nCounty\n4.0350213\n0.3136471\nXupu\nPOLYGON ((110.7189 28.30485...\n\n\nHuaihua\n21141\nYuanling\nCounty\n4.1642914\n0.5345233\nYuanling\nPOLYGON ((110.9652 28.99895...\n\n\nHuaihua\n21142\nZhijiang\nAutonomous County\n2.4452310\n0.1906027\nZhijiang\nPOLYGON ((109.8818 27.60661...\n\n\nLoudi\n21143\nLengshuijiang\nCounty City\n0.9753557\n0.0372343\nLengshuijiang\nPOLYGON ((111.5307 27.81472...\n\n\nLoudi\n21146\nShuangfeng\nCounty\n2.4012680\n0.1565776\nShuangfeng\nPOLYGON ((112.263 27.70421,...\n\n\nLoudi\n21147\nXinhua\nCounty\n3.3284533\n0.3361624\nXinhua\nPOLYGON ((111.3345 28.19642...\n\n\nShaoyang\n21148\nChengbu\nAutonomous County\n2.9374722\n0.2362023\nChengbu\nPOLYGON ((110.4455 26.69317...\n\n\nYongzhou\n21149\nDongan\nDistrict\n3.2132100\n0.1983914\nDongan\nPOLYGON ((111.4531 26.86812...\n\n\nShaoyang\n21150\nDongkou\nCounty\n2.9425568\n0.1971258\nDongkou\nPOLYGON ((110.6622 27.37305...\n\n\nShaoyang\n21151\nLonghui\nCounty\n2.7208650\n0.2578820\nLonghui\nPOLYGON ((110.985 27.65983,...\n\n\nShaoyang\n21152\nShaodong\nCounty\n2.3029031\n0.1701016\nShaodong\nPOLYGON ((111.9054 27.40254...\n\n\nShaoyang\n21155\nSuining\nCounty\n3.3043615\n0.2659378\nSuining\nPOLYGON ((110.389 27.10006,...\n\n\nShaoyang\n21156\nWugang\nCounty City\n2.2565865\n0.1400498\nWugang\nPOLYGON ((110.9878 27.03345...\n\n\nShaoyang\n21157\nXinning\nCounty\n3.3414094\n0.2487593\nXinning\nPOLYGON ((111.0736 26.84627...\n\n\nShaoyang\n21158\nXinshao\nCounty\n2.2955891\n0.1658312\nXinshao\nPOLYGON ((111.6013 27.58275...\n\n\nXiangtan\n21159\nShaoshan\nCounty City\n0.7722034\n0.0212792\nShaoshan\nPOLYGON ((112.5391 27.97742...\n\n\nXiangtan\n21162\nXiangxiang\nCounty City\n3.0755761\n0.1840808\nXiangxiang\nPOLYGON ((112.4549 28.05783...\n\n\nXiangxi Tujia and Miao\n21163\nBaojing\nCounty\n2.5569785\n0.1606901\nBaojing\nPOLYGON ((109.7015 28.82844...\n\n\nXiangxi Tujia and Miao\n21164\nFenghuang\nCounty\n2.2928893\n0.1596618\nFenghuang\nPOLYGON ((109.5239 28.19206...\n\n\nXiangxi Tujia and Miao\n21165\nGuzhang\nCounty\n1.7973808\n0.1202073\nGuzhang\nPOLYGON ((109.8968 28.74034...\n\n\nXiangxi Tujia and Miao\n21166\nHuayuan\nCounty\n1.7921938\n0.1025162\nHuayuan\nPOLYGON ((109.5647 28.61712...\n\n\nXiangxi Tujia and Miao\n21167\nJishou\nCounty City\n1.8826069\n0.0973363\nJishou\nPOLYGON ((109.8375 28.4696,...\n\n\nXiangxi Tujia and Miao\n21168\nLongshan\nCounty\n2.9782522\n0.2919091\nLongshan\nPOLYGON ((109.6337 29.62521...\n\n\nXiangxi Tujia and Miao\n21169\nLuxi\nCounty\n2.2051733\n0.1434018\nLuxi\nPOLYGON ((110.1067 28.41835...\n\n\nXiangxi Tujia and Miao\n21170\nYongshun\nCounty\n3.0959707\n0.3551324\nYongshun\nPOLYGON ((110.0003 29.29499...\n\n\nYiyang\n21171\nAnhua\nCounty\n4.5835050\n0.4510648\nAnhua\nPOLYGON ((111.6034 28.63716...\n\n\nYiyang\n21172\nNan\nCounty\n2.3011103\n0.1247939\nNan\nPOLYGON ((112.3232 29.46074...\n\n\nYiyang\n21176\nYuanjiang\nCounty City\n2.3268236\n0.1886048\nYuanjiang\nPOLYGON ((112.4391 29.1791,...\n\n\nYongzhou\n21178\nJianghua\nAutonomous County\n3.3360379\n0.2927690\nJianghua\nPOLYGON ((111.6461 25.29661...\n\n\nYongzhou\n21180\nLanshan\nCounty\n2.3556792\n0.1603531\nLanshan\nPOLYGON ((112.2286 25.61123...\n\n\nYongzhou\n21183\nNingyuan\nCounty\n3.3322291\n0.2266737\nNingyuan\nPOLYGON ((112.0715 26.09892...\n\n\nYongzhou\n21185\nShuangpai\nCounty\n2.3877440\n0.1540255\nShuangpai\nPOLYGON ((111.8864 26.11957...\n\n\nYongzhou\n21186\nXintian\nCounty\n1.7274574\n0.0894019\nXintian\nPOLYGON ((112.2578 26.0796,...\n\n\nYueyang\n21187\nHuarong\nCounty\n2.8178435\n0.1678359\nHuarong\nPOLYGON ((112.9242 29.69134...\n\n\nYueyang\n21188\nLinxiang\nCounty City\n2.5975997\n0.1568525\nLinxiang\nPOLYGON ((113.5502 29.67418...\n\n\nYueyang\n21189\nMiluo\nCounty City\n2.4474057\n0.1497881\nMiluo\nPOLYGON ((112.9902 29.02139...\n\n\nYueyang\n21190\nPingjiang\nCounty\n3.2177944\n0.3786800\nPingjiang\nPOLYGON ((113.8436 29.06152...\n\n\nYueyang\n21191\nXiangyin\nCounty\n2.3515063\n0.1491429\nXiangyin\nPOLYGON ((112.9173 28.98264...\n\n\nZhangjiajie\n21194\nCili\nCounty\n2.8940385\n0.3232206\nCili\nPOLYGON ((110.8822 29.69017...\n\n\nZhuzhou\n21197\nChaling\nCounty\n2.2375615\n0.2278921\nChaling\nPOLYGON ((113.7666 27.10573...\n\n\nZhuzhou\n21198\nLiling\nCounty City\n2.2435440\n0.1960655\nLiling\nPOLYGON ((113.5673 27.94346...\n\n\nZhuzhou\n21199\nYanling\nCounty\n2.1078954\n0.1849090\nYanling\nPOLYGON ((113.9292 26.6154,...\n\n\nZhuzhou\n21200\nYou\nCounty\n2.8904505\n0.2436366\nYou\nPOLYGON ((113.5879 27.41324...\n\n\nZhuzhou\n21201\nZhuzhou\nDistrict\n0.9331877\n0.0373488\nZhuzhou\nPOLYGON ((113.2493 28.02411...\n\n\nZhangjiajie\n21196\nSangzhi\nCounty\n3.3475449\n0.3216362\nSangzhi\nPOLYGON ((110.556 29.40543,...\n\n\nYueyang\n21192\nYueyang\nDistrict\n2.5710437\n0.1047594\nYueyang\nPOLYGON ((113.343 29.61064,...\n\n\nYongzhou\n21184\nQiyang\nCounty\n3.1835301\n0.2275458\nQiyang\nPOLYGON ((111.5563 26.81318...\n\n\nYiyang\n21173\nTaojiang\nCounty\n2.6080229\n0.1905982\nTaojiang\nPOLYGON ((112.0508 28.67265...\n\n\nShaoyang\n21153\nShaoyang\nCounty City\n0.9765399\n0.0316779\nShaoyang\nPOLYGON ((111.5013 27.30207...\n\n\nLoudi\n21144\nLianyuan\nCounty City\n2.8007253\n0.2057341\nLianyuan\nPOLYGON ((111.6789 28.02946...\n\n\nHuaihua\n21132\nHongjiang\nDistrict\n3.3031522\n0.1994795\nHongjiang\nPOLYGON ((110.1441 27.47513...\n\n\nHengyang\n21127\nHengyang\nCounty City\n0.9035944\n0.0349171\nHengyang\nPOLYGON ((112.7144 26.98613...\n\n\nChenzhou\n21116\nGuiyang\nCounty\n3.6939698\n0.2668106\nGuiyang\nPOLYGON ((113.0811 26.04963...\n\n\nChangsha\n21107\nChangsha\nDistrict\n0.9536480\n0.0320942\nChangsha\nPOLYGON ((112.9421 28.03722...\n\n\nChangde\n21105\nTaoyuan\nCounty\n4.1225866\n0.4126555\nTaoyuan\nPOLYGON ((112.0612 29.32855...\n\n\nXiangtan\n21160\nXiangtan\nCounty City\n0.8480602\n0.0253653\nXiangtan\nPOLYGON ((113.0426 27.8942,...\n\n\nYongzhou\n21177\nDao\nCounty\n2.7674949\n0.2206642\nDao\nPOLYGON ((111.498 25.81679,...\n\n\nYongzhou\n21179\nJiangyong\nCounty\n2.2995970\n0.1473782\nJiangyong\nPOLYGON ((111.3659 25.39472...\n\n\n\n\n\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nRows: 88\nColumns: 29\n$ County      &lt;chr&gt; \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        &lt;chr&gt; \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    &lt;dbl&gt; 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    &lt;dbl&gt; 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         &lt;dbl&gt; 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     &lt;dbl&gt; 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     &lt;dbl&gt; 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         &lt;dbl&gt; 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       &lt;dbl&gt; 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         &lt;dbl&gt; 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        &lt;dbl&gt; 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       &lt;dbl&gt; 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         &lt;dbl&gt; 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         &lt;dbl&gt; 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        &lt;dbl&gt; 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       &lt;dbl&gt; 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     &lt;dbl&gt; 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     &lt;dbl&gt; 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   &lt;dbl&gt; 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R &lt;dbl&gt; 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        &lt;dbl&gt; 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       &lt;dbl&gt; 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        &lt;dbl&gt; 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       &lt;dbl&gt; 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        &lt;dbl&gt; 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     &lt;dbl&gt; 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    &lt;dbl&gt; 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        &lt;dbl&gt; 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      &lt;dbl&gt; 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n\n\n\n\n\n\n\n\nCounty\nCity\navg_wage\ndeposite\nFAI\nGov_Rev\nGov_Exp\nGDP\nGDPPC\nGIO\nLoan\nNIPCR\nBed\nEmp\nEmpR\nEmpRT\nPri_Stu\nSec_Stu\nHousehold\nHousehold_R\nNOIP\nPop_R\nRSCG\nPop_T\nAgri\nService\nDisp_Inc\nRORP\nROREmp\n\n\n\n\nAnhua\nYiyang\n30544\n10967.0\n6831.7\n456.72\n2703.00\n13225.0\n14567\n9276.90\n3954.90\n3528.3\n2718\n494.310\n441.4\n338.0\n54.175\n32.830\n290.400\n234.5\n101\n670.3\n5760.60\n910.8\n4942.253\n5414.5\n12373\n0.7359464\n0.8929619\n\n\nAnren\nChenzhou\n28058\n4598.9\n6386.1\n220.57\n1454.70\n4941.2\n12761\n4189.20\n2555.30\n3271.8\n970\n290.820\n255.4\n99.4\n33.171\n17.505\n104.600\n121.9\n34\n243.2\n2386.40\n388.7\n2357.764\n3814.1\n16072\n0.6256753\n0.8782065\n\n\nAnxiang\nChangde\n31935\n5517.2\n3541.0\n243.64\n1779.50\n12482.0\n23667\n5108.90\n2806.90\n7693.7\n1931\n336.390\n270.5\n205.9\n19.584\n17.819\n148.100\n135.4\n53\n346.0\n3957.90\n528.3\n4524.410\n14100.0\n16610\n0.6549309\n0.8041262\n\n\nBaojing\nHunan West\n30843\n2250.0\n1005.4\n192.59\n1379.10\n4087.9\n14563\n3623.50\n1253.70\n4191.3\n927\n195.170\n145.6\n116.4\n19.249\n11.831\n73.200\n69.9\n18\n184.1\n768.04\n281.3\n1118.561\n541.8\n13455\n0.6544614\n0.7460163\n\n\nChaling\nZhuzhou\n31251\n8241.4\n6508.4\n620.19\n1947.00\n11585.0\n20078\n9157.70\n4287.40\n3887.7\n1449\n330.290\n299.0\n154.0\n33.906\n20.548\n148.700\n139.4\n106\n301.6\n4009.50\n578.4\n3793.550\n5444.0\n20461\n0.5214385\n0.9052651\n\n\nChangning\nHengyang\n28518\n10860.0\n7920.0\n769.86\n2631.60\n19886.0\n24418\n37392.00\n4242.80\n9528.0\n3605\n548.610\n415.1\n273.7\n81.831\n44.485\n211.200\n211.7\n115\n448.2\n5220.40\n816.3\n6430.782\n13074.6\n20868\n0.5490628\n0.7566395\n\n\nChangsha\nChangsha\n54540\n24332.0\n33624.0\n5350.00\n7885.50\n88009.0\n88656\n51361.00\n40534.00\n17070.0\n3310\n670.820\n452.0\n219.4\n59.151\n39.685\n300.300\n248.4\n214\n475.1\n22604.00\n998.6\n13107.148\n17726.6\n183252\n0.4757661\n0.6738022\n\n\nChengbu\nShaoyang\n28597\n2580.6\n1922.3\n160.73\n1191.60\n2569.5\n10132\n1681.40\n1232.00\n3271.8\n582\n162.480\n127.6\n94.4\n18.751\n7.869\n76.100\n59.6\n17\n189.6\n1173.80\n256.7\n1356.950\n1215.1\n12379\n0.7386054\n0.7853274\n\n\nChenxi\nHuaihua\n33580\n4990.0\n5818.4\n460.49\n1724.20\n7755.2\n17026\n6644.50\n3220.00\n4777.0\n2170\n308.430\n214.4\n174.8\n26.706\n14.591\n139.500\n110.5\n55\n311.7\n2570.60\n456.7\n2257.520\n1306.3\n14595\n0.6825049\n0.6951334\n\n\nCili\nZhangjiajie\n33099\n8116.9\n4498.1\n499.77\n2306.20\n11378.0\n18714\n5843.30\n5503.40\n5031.8\n2179\n381.200\n334.8\n264.3\n34.918\n27.020\n211.400\n174.5\n70\n379.4\n3116.90\n610.4\n3112.731\n5005.6\n15603\n0.6215596\n0.8782791\n\n\nDao\nYongzhou\n32541\n7245.0\n7922.0\n461.66\n2013.50\n11034.0\n18059\n2393.80\n2873.50\n9000.0\n1588\n381.530\n344.3\n178.3\n65.790\n31.430\n158.700\n157.9\n44\n388.2\n2898.80\n613.6\n5602.035\n8411.1\n16305\n0.6326597\n0.9024192\n\n\nDongan\nYongzhou\n36713\n6549.3\n9158.0\n434.07\n1720.60\n11495.0\n20901\n11597.00\n3320.60\n9116.7\n1305\n322.250\n278.1\n163.6\n39.419\n20.661\n166.500\n163.0\n84\n366.0\n3106.30\n551.2\n4866.481\n6784.4\n20265\n0.6640058\n0.8629946\n\n\nDongkou\nShaoyang\n31483\n9489.6\n8703.2\n374.96\n2209.50\n10286.0\n13240\n10568.00\n4120.30\n3792.5\n1620\n583.560\n499.2\n263.2\n69.845\n43.194\n262.400\n220.4\n74\n523.1\n3229.10\n780.9\n6025.184\n9116.8\n15375\n0.6698681\n0.8554390\n\n\nFenghuang\nHunan West\n31608\n4008.7\n2550.0\n406.51\n1763.60\n4681.2\n13382\n848.99\n2863.00\n4681.2\n1212\n250.730\n195.4\n151.8\n33.379\n17.690\n90.100\n80.5\n17\n255.5\n2605.40\n351.3\n1206.261\n651.1\n14281\n0.7272986\n0.7793244\n\n\nGuidong\nChenzhou\n30149\n2200.1\n2512.9\n111.19\n880.00\n1955.9\n8497\n1202.60\n1437.20\n3130.4\n567\n138.530\n115.2\n56.9\n13.437\n7.091\n64.800\n65.4\n14\n150.1\n486.10\n231.8\n630.016\n911.1\n12290\n0.6475410\n0.8315888\n\n\nGuiyang\nChenzhou\n41394\n9664.8\n15712.0\n1309.20\n2727.50\n23023.0\n32853\n36820.00\n4860.10\n10271.0\n2237\n517.180\n430.9\n242.0\n69.344\n33.568\n231.800\n217.5\n127\n420.4\n6281.80\n704.1\n8804.639\n14791.5\n64517\n0.5970743\n0.8331722\n\n\nGuzhang\nHunan West\n28610\n1563.8\n1021.7\n108.40\n959.60\n1490.4\n11580\n513.95\n849.56\n3595.9\n392\n98.421\n74.6\n56.7\n8.718\n6.288\n35.200\n31.4\n10\n85.2\n354.48\n129.0\n527.230\n504.0\n11954\n0.6604651\n0.7579683\n\n\nHanshou\nChangde\n32265\n7979.0\n8665.0\n386.13\n2062.40\n15788.0\n20981\n13491.00\n4550.00\n8269.9\n2560\n456.780\n388.8\n246.7\n42.097\n33.029\n240.200\n208.7\n95\n553.2\n4460.50\n804.6\n6545.350\n17727.0\n18925\n0.6875466\n0.8511756\n\n\nHengdong\nHengyang\n30992\n8661.0\n6665.0\n542.25\n1937.40\n17409.0\n27485\n17305.00\n4118.00\n10829.0\n1859\n388.340\n284.5\n201.0\n48.983\n36.120\n164.400\n167.4\n96\n426.4\n5127.00\n634.9\n5972.961\n11278.5\n19800\n0.6716018\n0.7326054\n\n\nHengnan\nHengyang\n28031\n3288.9\n9531.4\n804.91\n2894.40\n21019.0\n21911\n20953.00\n4013.00\n9872.9\n2173\n601.570\n503.6\n354.0\n76.933\n57.519\n256.000\n274.3\n118\n629.1\n5752.60\n961.4\n8624.680\n15914.0\n18683\n0.6543582\n0.8371428\n\n\nHengshan\nHengyang\n28688\n5944.6\n4871.1\n451.46\n1393.70\n9718.9\n25172\n8571.50\n2221.50\n10619.0\n966\n291.120\n261.9\n158.8\n28.997\n20.909\n103.700\n101.0\n89\n256.4\n1713.70\n387.0\n3505.269\n6233.5\n17732\n0.6625323\n0.8996290\n\n\nHengyang\nHengyang\n27760\n14680.0\n11145.0\n597.66\n2778.80\n21495.0\n19382\n18288.00\n5549.60\n10313.0\n2632\n686.520\n500.2\n313.6\n88.917\n64.674\n299.200\n247.7\n120\n733.4\n5386.30\n1111.6\n12451.938\n23139.2\n124392\n0.6597697\n0.7286022\n\n\nHongjiang\nHuaihua\n37686\n5966.0\n6515.5\n623.95\n2067.80\n7355.5\n17733\n13750.00\n3272.20\n6553.5\n1161\n229.400\n199.9\n132.0\n23.614\n18.837\n136.100\n124.7\n76\n260.9\n1744.20\n415.8\n2588.250\n202.8\n27334\n0.6274651\n0.8714037\n\n\nHuarong\nYueyang\n26832\n8116.4\n14292.0\n365.84\n1933.90\n21654.0\n30413\n40193.00\n4564.80\n10367.0\n1500\n442.970\n359.2\n252.9\n31.601\n26.933\n202.300\n170.2\n151\n430.3\n6348.90\n714.1\n7690.520\n10050.6\n21501\n0.6025767\n0.8108901\n\n\nHuayuan\nHunan West\n31708\n3669.8\n2200.0\n331.78\n1503.70\n5905.9\n20337\n9257.60\n2463.60\n4353.8\n1240\n214.790\n149.8\n94.9\n23.831\n14.031\n76.900\n59.9\n74\n188.1\n1024.70\n291.1\n883.722\n533.2\n15467\n0.6461697\n0.6974254\n\n\nHuitong\nHuaihua\n33693\n4615.0\n2617.4\n295.00\n1306.70\n4588.3\n14334\n2095.60\n1369.30\n4631.9\n1194\n246.150\n193.5\n143.7\n20.603\n13.337\n96.700\n114.4\n25\n234.5\n1061.70\n320.9\n1580.090\n5.2\n13989\n0.7307572\n0.7861060\n\n\nJiahe\nChenzhou\n36023\n5493.1\n4864.3\n453.68\n1331.50\n9608.2\n32091\n14882.00\n1906.50\n7903.3\n719\n242.800\n198.9\n83.0\n36.054\n19.497\n99.000\n108.5\n100\n179.6\n1365.90\n301.3\n2276.272\n3230.2\n17744\n0.5960836\n0.8191928\n\n\nJianghua\nYongzhou\n34378\n4586.4\n4631.5\n309.70\n1651.40\n6555.9\n15801\n3357.10\n2976.00\n3225.3\n1663\n306.310\n272.7\n188.9\n37.494\n20.644\n109.900\n116.1\n33\n285.1\n2384.80\n416.7\n3272.511\n10533.8\n16274\n0.6841853\n0.8902746\n\n\nJiangyong\nYongzhou\n30250\n3198.2\n3942.5\n187.23\n1009.10\n4012.2\n17168\n2022.70\n1201.20\n3253.9\n720\n153.580\n132.8\n94.3\n21.936\n11.093\n68.300\n61.2\n25\n163.5\n1238.20\n234.3\n2862.901\n9773.3\n16634\n0.6978233\n0.8646959\n\n\nJingzhou\nHuaihua\n33870\n3592.8\n2031.4\n237.51\n1129.00\n5007.7\n20348\n4534.10\n1566.50\n5397.3\n1054\n163.910\n112.6\n85.8\n16.978\n11.446\n69.100\n56.1\n32\n140.6\n1611.50\n246.7\n1769.328\n337.5\n12859\n0.5699230\n0.6869624\n\n\nJinshi\nChangde\n28692\n4581.7\n4777.0\n373.31\n1148.40\n8706.9\n34592\n10935.00\n2242.00\n8169.9\n848\n122.780\n82.1\n61.7\n8.723\n7.592\n81.900\n43.7\n77\n92.4\n3683.00\n251.8\n2562.460\n7525.0\n19498\n0.3669579\n0.6686757\n\n\nJishou\nHunan West\n39816\n9586.2\n5235.0\n470.22\n1738.20\n9631.5\n31537\n6345.70\n8282.90\n4823.0\n3790\n213.420\n97.0\n62.4\n25.454\n21.941\n99.200\n46.5\n49\n85.2\n5651.00\n306.6\n849.010\n611.6\n17980\n0.2778865\n0.4545029\n\n\nLanshan\nYongzhou\n33756\n4236.0\n3986.7\n296.68\n1194.60\n6627.2\n20088\n5392.10\n1599.40\n8672.1\n1144\n233.390\n201.5\n131.6\n32.448\n16.299\n83.300\n90.7\n52\n198.2\n2234.20\n330.9\n2262.021\n10341.9\n19161\n0.5989725\n0.8633618\n\n\nLeiyang\nHengyang\n32814\n15393.0\n18687.0\n1535.20\n3819.00\n30213.0\n26105\n42707.00\n7409.20\n10611.0\n2531\n750.120\n553.7\n405.8\n112.200\n56.350\n338.100\n281.2\n155\n629.3\n7268.10\n1160.2\n8349.199\n19981.6\n19634\n0.5424065\n0.7381486\n\n\nLengshuijiang\nLoudi\n35647\n6805.3\n9746.8\n1054.20\n2105.30\n21243.0\n64257\n36926.00\n8936.60\n10441.0\n1413\n191.320\n101.8\n61.8\n29.639\n20.113\n112.400\n56.9\n118\n78.4\n5750.60\n332.6\n1277.869\n991.8\n23120\n0.2357186\n0.5320928\n\n\nLi\nChangde\n32541\n13487.0\n16066.0\n709.61\n2459.50\n20322.0\n24473\n18402.00\n6748.00\n8377.0\n2038\n513.440\n426.8\n227.1\n38.975\n33.938\n268.500\n256.0\n96\n539.7\n7110.20\n832.5\n7562.340\n53160.0\n18985\n0.6482883\n0.8312558\n\n\nLianyuan\nLoudi\n30320\n8059.7\n9255.3\n707.45\n3298.60\n18340.0\n18346\n20515.00\n7243.20\n4307.7\n2260\n706.840\n612.9\n344.1\n71.232\n53.597\n316.200\n298.7\n154\n712.6\n6889.00\n1001.5\n7642.158\n5965.4\n38131\n0.7115327\n0.8670986\n\n\nLiling\nZhuzhou\n42896\n12865.0\n19125.0\n2602.60\n4221.40\n39553.0\n41491\n57146.00\n9398.10\n13347.0\n2797\n639.830\n513.1\n212.1\n53.992\n33.705\n248.400\n229.7\n482\n473.2\n11213.00\n958.0\n5373.990\n17378.0\n24185\n0.4939457\n0.8019318\n\n\nLinli\nChangde\n32667\n564.1\n7781.2\n336.86\n1538.70\n10355.0\n25554\n8214.00\n358.00\n8143.1\n1440\n307.360\n272.2\n100.8\n23.286\n18.943\n129.100\n157.2\n99\n246.6\n3604.90\n409.3\n3583.910\n7031.0\n18604\n0.6024921\n0.8856065\n\n\nLinwu\nChenzhou\n32031\n5984.0\n5734.3\n478.92\n1435.20\n8191.1\n23986\n6250.70\n2152.70\n7102.2\n959\n215.300\n184.1\n90.2\n41.913\n13.238\n101.500\n88.0\n67\n227.5\n2023.30\n342.8\n1606.947\n2632.2\n17966\n0.6636523\n0.8550859\n\n\nLinxiang\nYueyang\n31669\n5850.5\n10852.0\n319.20\n1609.00\n15968.0\n31897\n29988.00\n3788.20\n9739.0\n1289\n293.500\n212.5\n98.8\n36.202\n23.831\n138.600\n136.7\n123\n286.1\n4598.80\n502.3\n3357.477\n2994.6\n20628\n0.5695799\n0.7240204\n\n\nLiuyang\nChangsha\n40446\n21415.0\n43599.0\n2473.10\n4605.50\n81113.0\n63118\n99254.00\n23408.00\n15719.0\n6225\n919.620\n721.4\n300.1\n90.978\n58.819\n374.800\n369.8\n733\n642.7\n16233.00\n1285.5\n10844.470\n26617.8\n27345\n0.4999611\n0.7844544\n\n\nLonghui\nShaoyang\n33615\n11925.0\n8723.9\n425.06\n2741.60\n10511.0\n9572\n9317.90\n3985.50\n3177.6\n2726\n709.990\n604.4\n436.7\n95.163\n54.211\n344.600\n298.8\n85\n834.1\n2819.60\n1098.2\n4320.396\n3264.6\n12049\n0.7595156\n0.8512796\n\n\nLongshan\nHunan West\n34203\n5557.0\n2810.0\n218.53\n2052.40\n4933.6\n9754\n893.45\n2128.20\n4164.0\n1505\n334.420\n266.7\n167.5\n42.189\n30.946\n148.200\n126.1\n18\n345.8\n2293.90\n508.3\n2248.709\n921.5\n13138\n0.6803069\n0.7975001\n\n\nLuxi\nHunan West\n32680\n2946.8\n1772.0\n184.25\n1337.60\n4878.3\n17472\n7085.60\n1626.60\n4089.1\n664\n197.490\n149.7\n80.9\n21.683\n17.160\n82.400\n71.1\n42\n174.3\n917.41\n280.3\n1036.088\n540.8\n13247\n0.6218337\n0.7580131\n\n\nMayang\nHuaihua\n32772\n3456.0\n2703.1\n215.86\n1461.00\n4738.8\n13744\n3876.90\n2242.00\n4299.8\n975\n216.850\n160.0\n148.1\n24.173\n15.207\n90.300\n87.8\n33\n245.0\n1581.70\n345.6\n1865.938\n5.2\n14487\n0.7089120\n0.7378372\n\n\nMiluo\nYueyang\n36113\n4749.3\n15828.0\n1068.60\n2446.50\n29548.0\n42497\n66342.00\n3330.60\n9421.3\n965\n451.270\n303.3\n162.8\n40.221\n30.662\n204.900\n193.6\n269\n351.4\n5817.70\n697.0\n5688.717\n8978.5\n23379\n0.5041607\n0.6721032\n\n\nNan\nYiyang\n35272\n8921.7\n3367.5\n300.00\n1987.10\n15568.0\n21311\n11804.00\n4928.10\n8369.8\n1877\n366.100\n325.6\n226.1\n35.487\n29.444\n259.200\n201.3\n91\n455.9\n5266.20\n732.8\n7783.359\n6781.7\n17691\n0.6221343\n0.8893745\n\n\nNingxiang\nChangsha\n40744\n18662.0\n49234.0\n2448.90\n4812.20\n73250.0\n62202\n114145.00\n18435.00\n13763.0\n4351\n852.960\n757.6\n318.3\n80.715\n68.853\n391.700\n369.6\n552\n655.5\n15623.00\n1186.5\n12804.480\n18447.7\n24020\n0.5524652\n0.8882011\n\n\nNingyuan\nYongzhou\n34190\n7351.4\n7716.5\n514.24\n2234.40\n8984.3\n12697\n5627.80\n4249.40\n4151.5\n1753\n444.920\n401.3\n157.8\n68.336\n32.471\n185.500\n157.8\n64\n460.9\n3097.50\n710.2\n4283.431\n9958.4\n19742\n0.6489721\n0.9019599\n\n\nPingjiang\nYueyang\n30017\n8718.4\n10627.0\n461.62\n2827.00\n16444.0\n17252\n25647.00\n5201.20\n3780.8\n2205\n601.380\n512.8\n278.3\n73.943\n43.548\n260.900\n269.9\n136\n612.5\n3448.30\n957.5\n5060.948\n8789.3\n14883\n0.6396867\n0.8527054\n\n\nQidong\nHengyang\n30990\n13633.0\n6875.7\n463.91\n2413.20\n17718.0\n18001\n26260.00\n4246.10\n9020.6\n2055\n607.640\n529.2\n311.0\n80.694\n51.474\n289.200\n287.3\n115\n627.8\n6076.00\n986.4\n7380.180\n15451.7\n18256\n0.6364558\n0.8709104\n\n\nQiyang\nYongzhou\n32059\n14432.0\n14439.0\n499.51\n2710.50\n17705.0\n20638\n11567.00\n6388.30\n8816.0\n2799\n594.100\n495.2\n257.9\n75.936\n45.318\n241.900\n255.1\n107\n519.9\n3832.70\n860.7\n6273.597\n13568.8\n19776\n0.6040432\n0.8335297\n\n\nRucheng\nChenzhou\n35575\n4777.6\n3816.6\n343.00\n1492.70\n3756.0\n11286\n4492.20\n2426.20\n2993.7\n1130\n232.280\n197.3\n127.8\n33.101\n14.478\n111.300\n101.6\n43\n235.7\n751.80\n333.2\n2079.963\n1744.7\n13755\n0.7073830\n0.8494059\n\n\nSangzhi\nZhangjiajie\n33916\n3920.0\n3081.3\n248.06\n1856.10\n5615.4\n14624\n1694.80\n2981.20\n3405.9\n1999\n267.150\n234.5\n139.8\n31.278\n18.993\n127.900\n122.8\n28\n256.9\n1803.30\n385.5\n3607.897\n17585.8\n45167\n0.6664073\n0.8777840\n\n\nShaodong\nShaoyang\n31507\n16184.0\n12214.0\n771.60\n2757.00\n22898.0\n25246\n29175.00\n7855.30\n10089.0\n3080\n724.310\n547.7\n310.0\n99.082\n59.009\n363.200\n297.8\n148\n524.9\n8576.30\n912.1\n5704.602\n4679.3\n18296\n0.5754851\n0.7561679\n\n\nShaoshan\nXiangtan\n33314\n2626.4\n4500.0\n258.64\n683.65\n4956.8\n55570\n9717.60\n1649.00\n14916.0\n488\n73.652\n62.0\n33.6\n5.910\n3.201\n27.147\n30.4\n48\n57.7\n1200.80\n92.3\n807.714\n1630.3\n24991\n0.6251354\n0.8417966\n\n\nShaoyang\nShaoyang\n31783\n8345.7\n7237.3\n376.42\n2780.80\n9031.2\n9653\n7887.80\n2425.30\n3499.3\n2294\n655.130\n569.2\n385.0\n71.417\n43.525\n265.400\n247.9\n65\n657.6\n3406.30\n942.3\n5518.299\n21656.5\n65431\n0.6978669\n0.8688352\n\n\nShimen\nChangde\n33261\n8334.4\n10531.0\n548.33\n2178.80\n16293.0\n27137\n17795.00\n6026.50\n6156.0\n2502\n392.050\n329.6\n193.8\n29.245\n26.104\n190.600\n184.7\n122\n399.2\n6490.70\n600.5\n5266.510\n6981.0\n19275\n0.6647794\n0.8407091\n\n\nShuangfeng\nLoudi\n33684\n11455.0\n7904.9\n470.59\n2657.50\n15225.0\n17755\n16665.00\n3914.00\n5470.3\n1862\n559.470\n488.5\n309.6\n57.966\n41.575\n244.300\n245.6\n129\n644.6\n4596.00\n859.4\n7943.893\n2613.1\n14994\n0.7500582\n0.8731478\n\n\nShuangpai\nYongzhou\n33302\n1918.0\n3572.0\n226.37\n881.96\n3728.0\n21942\n2646.30\n2056.40\n4568.1\n408\n86.264\n68.0\n46.2\n11.339\n6.890\n57.600\n39.5\n34\n111.6\n567.21\n174.1\n1866.171\n9092.1\n18479\n0.6410109\n0.7882778\n\n\nSuining\nShaoyang\n31750\n4307.1\n3605.6\n222.40\n1442.50\n5658.1\n16069\n11150.00\n1566.40\n4990.4\n802\n264.080\n208.9\n145.2\n26.200\n14.261\n108.800\n86.3\n54\n268.4\n1761.50\n352.9\n2064.499\n1413.5\n15004\n0.7605554\n0.7910482\n\n\nTaojiang\nYiyang\n35184\n8657.4\n8743.0\n417.37\n2276.80\n15162.0\n19509\n18691.00\n4656.80\n8687.9\n2504\n472.800\n411.4\n194.0\n48.047\n33.234\n260.900\n208.8\n153\n504.5\n5355.90\n779.7\n13878.842\n13439.3\n79214\n0.6470437\n0.8701354\n\n\nTaoyuan\nChangde\n31877\n11948.0\n8656.0\n710.08\n2625.10\n19603.0\n22879\n16529.00\n4735.00\n7682.6\n2070\n558.770\n479.9\n300.5\n44.429\n36.630\n274.500\n272.0\n60\n607.4\n8926.00\n857.1\n18328.460\n50619.0\n60461\n0.7086688\n0.8588507\n\n\nTongdao\nHuaihua\n35400\n2578.0\n1525.4\n165.59\n1046.50\n2653.2\n12781\n2514.50\n1021.00\n3696.4\n882\n144.490\n105.5\n82.2\n15.913\n7.776\n57.900\n49.7\n27\n154.2\n749.14\n208.1\n981.418\n644.2\n12424\n0.7409899\n0.7301543\n\n\nWangcheng\nChangsha\n45171\n12122.0\n48829.0\n2285.50\n3802.30\n37488.0\n70666\n148976.00\n10330.00\n16495.0\n1678\n361.480\n268.6\n131.2\n28.838\n24.815\n161.300\n154.8\n314\n266.6\n5623.30\n533.4\n5222.356\n6648.6\n27690\n0.4998125\n0.7430563\n\n\nWugang\nShaoyang\n30573\n8618.0\n7373.3\n486.85\n2346.00\n9046.7\n12112\n5346.00\n3852.00\n4864.4\n2250\n483.620\n402.5\n271.4\n70.758\n43.683\n243.900\n194.0\n52\n502.9\n3476.00\n752.3\n4613.704\n1734.7\n15126\n0.6684833\n0.8322650\n\n\nXiangtan\nXiangtan\n35274\n15516.0\n10121.0\n1236.60\n3050.10\n22728.0\n27060\n30730.00\n12217.00\n10135.0\n2022\n610.490\n551.9\n347.1\n46.556\n54.439\n248.590\n239.1\n187\n574.0\n4889.10\n845.2\n10688.618\n40758.0\n69261\n0.6791292\n0.9040279\n\n\nXiangxiang\nXiangtan\n33040\n13298.0\n9819.0\n975.59\n2942.80\n23175.0\n29361\n39630.00\n7900.30\n9264.3\n2451\n586.400\n492.0\n324.5\n47.743\n39.612\n231.710\n242.0\n189\n535.7\n5891.80\n787.8\n6852.943\n17531.9\n22297\n0.6799949\n0.8390177\n\n\nXiangyin\nYueyang\n33169\n5466.1\n14714.0\n520.53\n2318.80\n23265.0\n33983\n49507.00\n5222.90\n8824.5\n1550\n466.110\n357.4\n169.4\n44.878\n30.752\n193.800\n190.1\n152\n408.4\n4273.20\n686.9\n6000.857\n8175.0\n19945\n0.5945552\n0.7667718\n\n\nXinhua\nLoudi\n32496\n11075.0\n6725.3\n576.47\n3599.50\n14940.0\n13398\n12152.00\n6121.20\n3342.4\n1542\n755.140\n677.9\n451.6\n96.224\n57.670\n316.600\n313.8\n112\n817.4\n5743.50\n1116.7\n6919.849\n3145.3\n13834\n0.7319782\n0.8977143\n\n\nXinhuang\nHuaihua\n31891\n2373.1\n2075.8\n170.11\n1069.30\n3782.1\n15412\n3405.70\n1265.20\n3935.6\n1350\n149.710\n105.6\n104.0\n15.938\n8.781\n72.000\n72.5\n36\n178.6\n873.45\n246.0\n1130.322\n785.8\n12732\n0.7260163\n0.7053637\n\n\nXinning\nShaoyang\n32067\n6126.3\n5978.8\n390.67\n1830.60\n6064.6\n10732\n3857.70\n2899.90\n3287.7\n1565\n429.840\n347.8\n227.4\n41.633\n22.005\n171.400\n146.5\n38\n383.6\n1445.90\n566.7\n2415.712\n2364.9\n13031\n0.6769014\n0.8091383\n\n\nXinshao\nShaoyang\n34199\n7344.2\n8313.8\n384.19\n2229.20\n8590.9\n11514\n10829.00\n5042.50\n3986.4\n2319\n577.690\n477.4\n265.8\n68.131\n39.034\n234.100\n213.0\n79\n533.6\n2941.60\n749.0\n3003.553\n5679.2\n13778\n0.7124166\n0.8263948\n\n\nXintian\nYongzhou\n33609\n3851.6\n3401.9\n250.31\n1280.20\n4776.4\n14426\n3357.40\n1334.90\n2894.9\n1264\n236.520\n217.1\n116.9\n32.138\n15.970\n93.800\n107.1\n42\n226.6\n1329.80\n332.1\n2530.482\n3134.3\n16925\n0.6823246\n0.9178928\n\n\nXupu\nHuaihua\n29873\n8675.5\n6112.2\n457.86\n2452.00\n10314.0\n13863\n6720.40\n4588.00\n5453.1\n2106\n512.610\n400.9\n292.3\n53.793\n29.166\n226.100\n211.2\n71\n516.0\n3427.30\n745.9\n4308.431\n242.6\n16558\n0.6917817\n0.7820760\n\n\nYanling\nZhuzhou\n34156\n3274.4\n5835.0\n402.90\n1038.20\n4250.5\n21021\n5855.80\n2379.60\n3608.4\n545\n116.180\n99.0\n54.0\n10.838\n6.682\n52.200\n46.0\n75\n112.2\n1241.20\n202.2\n971.500\n6851.0\n18652\n0.5548961\n0.8521260\n\n\nYizhang\nChenzhou\n33508\n7938.8\n9992.5\n750.40\n2142.60\n10455.0\n17814\n19120.00\n3697.00\n3788.6\n2280\n348.830\n279.9\n128.8\n63.564\n25.843\n161.300\n142.5\n169\n363.4\n5037.50\n588.9\n2521.831\n3584.6\n19318\n0.6170827\n0.8023966\n\n\nYongshun\nHunan West\n31234\n4516.9\n2464.1\n220.66\n2021.70\n4142.1\n9590\n1061.00\n2839.90\n3963.1\n1801\n312.990\n259.4\n195.7\n38.686\n24.854\n115.700\n113.9\n23\n292.5\n2247.30\n433.3\n2018.756\n845.8\n12650\n0.6750519\n0.8287805\n\n\nYongxing\nChenzhou\n33278\n7097.6\n13456.0\n1294.50\n2476.00\n21382.0\n37651\n43700.00\n3053.70\n9856.1\n1969\n375.500\n304.9\n133.5\n52.440\n19.765\n172.500\n145.7\n175\n333.5\n4807.10\n562.6\n3174.984\n4540.5\n19960\n0.5927835\n0.8119840\n\n\nYou\nZhuzhou\n36791\n9541.6\n15611.0\n1533.30\n2803.00\n25153.0\n36264\n32738.00\n6316.20\n13021.0\n1992\n472.320\n418.0\n254.3\n42.124\n31.908\n186.400\n196.9\n248\n344.4\n7654.80\n693.7\n6071.620\n27443.0\n22732\n0.4964682\n0.8849932\n\n\nYuanjiang\nYiyang\n33302\n7763.4\n10486.0\n509.45\n2381.20\n17603.0\n26258\n21082.00\n6464.20\n10060.0\n1856\n401.220\n335.2\n203.3\n34.220\n27.932\n260.300\n161.0\n105\n366.7\n5125.10\n672.5\n6644.520\n5899.6\n20552\n0.5452788\n0.8354519\n\n\nYuanling\nHuaihua\n37762\n5627.0\n5466.8\n677.40\n2202.60\n14156.0\n24194\n14835.00\n2485.30\n4265.4\n2501\n382.530\n283.9\n210.2\n33.935\n21.278\n166.500\n155.9\n56\n397.0\n3092.50\n586.5\n2508.387\n637.8\n15165\n0.6768968\n0.7421640\n\n\nYueyang\nYueyang\n31470\n4946.6\n15084.0\n330.43\n1971.60\n18974.0\n26360\n36800.00\n3668.70\n10377.0\n1616\n411.260\n293.3\n173.0\n40.218\n30.051\n201.500\n150.9\n158\n435.3\n5836.60\n721.7\n11279.478\n15381.2\n88494\n0.6031592\n0.7131741\n\n\nZhijiang\nHuaihua\n33582\n4306.1\n2802.2\n356.96\n1470.00\n6992.5\n20518\n4491.80\n2477.30\n4535.1\n935\n223.750\n175.5\n116.1\n23.693\n14.726\n101.800\n94.3\n56\n247.6\n2133.30\n341.6\n2576.470\n90.8\n13589\n0.7248244\n0.7843575\n\n\nZhongfang\nHuaihua\n34941\n1296.3\n7594.6\n348.83\n1048.00\n7332.1\n30846\n8608.50\n968.44\n6082.5\n662\n170.250\n103.1\n89.3\n12.709\n8.563\n71.100\n70.9\n56\n173.8\n1064.90\n238.3\n2917.158\n1938.6\n37231\n0.7293328\n0.6055800\n\n\nZhuzhou\nZhuzhou\n37191\n5395.6\n4777.7\n507.04\n1408.80\n7962.1\n27589\n6768.90\n2970.20\n11407.0\n1032\n210.380\n177.0\n106.0\n12.436\n11.824\n92.200\n85.2\n82\n210.6\n2538.40\n289.6\n4236.370\n10883.0\n103228\n0.7272099\n0.8413347\n\n\nZixing\nChenzhou\n34163\n7873.2\n14891.0\n1556.00\n2679.00\n22261.0\n65706\n51921.00\n5014.70\n10838.0\n1159\n261.980\n177.9\n76.0\n22.316\n14.760\n114.000\n86.3\n155\n140.2\n4835.80\n340.2\n2761.164\n3636.3\n21600\n0.4121105\n0.6790595\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\"  \n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-data",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "3.2 Visualising Data",
    "text": "3.2 Visualising Data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-based-neighbours",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "5.1 Computing contiguity based neighbours",
    "text": "5.1 Computing contiguity based neighbours\nWe’ll be computing based on two types of contiguity: Queen and Rook. If you’re a chess buff (or even a chess amateur), these terms will sound familiar to you: and as you might’ve guessed, they’re related to the positions the queen and rook can move on a chess board.\n::: panel-tabset ## Queen\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nInterpretation\n\nThere are 88 area units in Hunan.\nMost connected area unit has 11 neighbours.\nThere are 2 area units with only 1 neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "5.2 Visualising contiguity weights",
    "text": "5.2 Visualising contiguity weights\n\nA connectivity graph takes a point and displays a line to each neighboring point.\nAs we are working with polygons, we need to get points in order to make the connectivity graphs.\nMost typical method: polygon centroids\n\nCalculate these in the sf package before moving onto the graphs\nGetting Latitude and Longitude of Polygon Centroids\nIt is a little more complicated than just running st_centroid on the sf object as we need to get the coordinates in a separate data frame..\n\nMapping function: applies a given function to each element of a vector and returns a vector of the same length.\ninput vector: will be the geometry column of us.bound.\nfunction will be st_centroid.\nUse map_dbl variation of map from the purrr package\n\n\n5.2.1 Get Long & Lat\n\nLongLatCombine Long & LatCheck\n\n\n\nTo get our longitude values, we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1.\nAllows us to get only the longitude, which is the first value in each centroid.\n\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\n\n\nDo the same for latitude with one key difference.\nWe access the second value per each centroid with [[2]]\n\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\n\ncbind() to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\n\n5.2.2 Plotting contiguity-based neighbours map\n\n\nShow the code\npar(bg = '#E4D5C9')\n\npar(mfrow=c(1,2))\n\nplot(hunan$geometry, \n     border=\"#b89c8c\", \n     main=\"Queen Contiguity\")\nplot(wm_q, \n     coords, \n     pch = 19, \n     cex = 0.6, \n     add = TRUE, \n     col= \"red\")\n\nplot(hunan$geometry, \n     border=\"#b89c8c\", \n     main=\"Rook Contiguity\")\nplot(wm_r, \n     coords, \n     pch = 19, \n     cex = 0.6, \n     add = TRUE, \n     col = \"red\")\n\n\n\n\n\n\nNote\n\nThere is actually a difference if you look closely at the bottom right of Queen Contiguity plot.\nThere is 2 extra vertices at the bottom right."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "6.2 Computing distance-based neighbours",
    "text": "6.2 Computing distance-based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\n\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\n6.2.1 Determine the cut-off distance / upper limit\n\nCreate neighbour listCalculate distanceObtain upper limit\n\n\n\nknearneigh() of spdep: returns a matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nknn2nb(): converts the knn object returned by knearneigh() into a neighbours list (class nb) with a list of integer vectors containing neighbour region number ids.\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \n25 disjoint connected subgraphs\nNon-symmetric neighbours list\n\n\n\n\n\nnbdists() of spdep: calculates the length of neighbour relationship edges (ie distance between neighboring regions). Returns units of the coordinates if the coordinates are projected, in km otherwise.\nunlist(): removes the list structure of the returned object by using .\n\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nk1dists\n\n [1] 25.53398 43.03114 25.53398 29.28480 29.28480 45.98097 58.52704 28.95985\n [9] 34.45062 37.99885 44.49442 33.48816 35.98123 47.65184 37.73556 36.16613\n[17] 40.53569 49.02492 37.47543 42.97316 37.47543 36.16613 44.51898 39.77440\n[25] 33.92180 45.03425 40.15056 32.50795 40.15056 47.83345 38.35439 58.39365\n[33] 44.85211 27.85864 38.21510 32.12293 44.74688 41.53815 38.02669 46.02900\n[41] 44.51898 44.74688 32.13340 32.13340 27.85864 24.79082 24.79082 29.66852\n[49] 32.50795 39.19375 29.66852 28.43598 50.50645 28.43598 45.72100 48.22649\n[57] 31.82332 31.82332 59.98421 37.44866 35.83248 39.77577 33.48816 34.34758\n[65] 40.45791 32.58547 58.52704 32.58547 45.98097 37.99885 31.27538 44.49442\n[73] 43.88878 31.27538 53.12656 40.45791 43.93382 43.03114 47.45858 34.68711\n[81] 33.92180 37.80739 42.81869 34.45062 61.79116 34.90929 42.32891 48.59005\n\n\n\n\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nInterpretation: The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n6.2.2 Computing fixed distance weight matrix\ndnearneigh() is used to compute the distance weight matrix.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nInterpretation: 88 regions in Hunan, 324 links amongst regions of distance up to 62km, Avg of 3-4 neighbours within this distance\nTo display the structure of wm_d62 weight matrix:\n\nstr()table() & card()\n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, \n       # list number of neighbours for each area\n      card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n\n\n[n.comp.nb()] finds the number of disjoint connected subgraphs in the graph depicted by [nb.obj()] - a spatial neighbours list object.\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting fixed distance weight matrix\n\nDistance-linkDistance-link and 1st nearest neighbours\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\n\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, col=\"cornflowerblue\", pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n6.2.3 Computing adaptive distance weight matrix\n\nFor fixed distance weight matrix, more densely settled areas (usually urban areas) tend to have more neighbours and the less densely settled areas (usually rural counties) tend to have lesser neighbours.\nHaving many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours (where k=n as specified), either accepting asymmetric neighbours or imposing symmetry.\n\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nEach county will have exactly six neighbours as specified.\n\n6.2.3.1 Plotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"#e0218a\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-1-compute-distance-between-areas",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-1-compute-distance-between-areas",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "Step 1: Compute Distance between Areas",
    "text": "Step 1: Compute Distance between Areas\nWe use nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-2-row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-2-row-standardised-weights-matrix",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Step 2: Row-standardised weights matrix",
    "text": "Step 2: Row-standardised weights matrix\n\nnb2listw()\n\nAssign weights to each neighboring polygon. Recall in lecture slides, it is calculated using the inverse of number of neigbours; total of each row in matrix adds to 1, which makes it a row-standardized.\nIn our case study, each neighboring polygon will be assigned equal weight (style=\"W\"). This is accomplished by assigning the fraction 1/(# of neighbours) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nStyle=\"W\" option used for this example for simplicity’s sake but more robust options are available, notably style=\"B\".\nStyles:\n\nW: row standardised (sums over all links to n)\nB: basic binary coding\nC: globally standardised (sums over all links to n)\nU: equal to C divided by the number of neighbours (sums over all links to unity)\nS: variance-stabilizing coding scheme (sums over all links to n)\nminmax: divides the weights by min of the max row sums and max column sums of the input weights; similar to C/U\n\nnb2listw() converts a neighbors list object into a weight list object.\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\n\n\nW (Equal Weight)B (Binary Coding)Zero.Policy = FALSE\n\n\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\n\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\nrswm_qB &lt;- nb2listw(wm_q, style=\"B\", zero.policy = TRUE)\nrswm_qB\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n\n\nrswm_qF &lt;- nb2listw(wm_q, style=\"W\", zero.policy = FALSE)\nrswm_qF\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\nzero.policy = TRUE: allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy = FALSE would return an error.\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nEach neighbor is assigned a 0.125 of the total weight. All same because style=“W” =&gt; equal weights.\nThis means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nrswm_ids &lt;- nb2listw(wm_q, \n                     glist=ids, \n                     style=\"B\", \n                     zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#a-spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#a-spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "(a) Spatial lag with row-standardized weights",
    "text": "(a) Spatial lag with row-standardized weights\n\nSums up GDPPC of all the neighbours, except the target location itself\n\n\nStep 1: Compute the avg neighbor GDPPC valueStep 2: Append values onto hunan dfStep 3: Plot both the GDPPC and spatial lag GDPPC\n\n\n\nThese values are often referred to as spatially lagged values.\n\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nIn the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#b-spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#b-spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "(b) Spatial lag as a sum of neighboring values",
    "text": "(b) Spatial lag as a sum of neighboring values\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights.\nThis requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\n\n\nCreate binary spatial weights matrixCompute lag variableAppend lag_sum GDPPC into hunanPlot & Compare\n\n\n\nWe start by applying a function that will assign a value of 1 per each neighbor.\nThis is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks.\nBasically it applies a function across each value in the neighbors structure.\n\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#c-spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#c-spatial-window-average",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "(c) Spatial window average",
    "text": "(c) Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\n\nAdd diagonal elementCreate spatial weights listCreate lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\n\n\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#d-spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#d-spatial-window-sum",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "(d) Spatial window sum",
    "text": "(d) Spatial window sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nUses and includes the diagonal element.\nSums up GDPPC of all neighbours, including target location itself\n\n\nAdd diagonal elementAssign weightsCompute lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications (WIP)",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#rook",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#rook",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Rook",
    "text": "Rook\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\nInterpretation\n\nThere are 88 area units in Hunan.\nMost connect area unit has 10 neighbours.\nThere are 2 area units with only 1 neighbour.\n\n\n\n5.1.1 Display Neighbours for Specific County\nFor each polygon in our polygon object, wm_q() lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nwm_r[[1]]\n\n[1]  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in Hunan SpatialPolygonsDataFrame class.\n\n\n5.1.2 Retrieve County Name of Polygon ID=1\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\n\n\n5.1.3 Reveal county names of neighboring polygons\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\n5.1.4 Retrieve GDPCC\nWe can retrieve the GDPPC of these five counties by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nnb2 &lt;- wm_r[[1]]\nnb2 &lt;- hunan$GDPPC[nb2]\nnb2\n\n[1] 34592 24473 21311 22879\n\n\n\n\n5.1.5 Display the complete weight matrix\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-fixed-distance-weight-matrix",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "6.2.3 Plotting fixed distance weight matrix",
    "text": "6.2.3 Plotting fixed distance weight matrix\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\npar(bg = '#E4D5C9')\npar(mfrow=c(1,2))\n\nplot(hunan$geometry, \n     border=\"#b89c8c\", \n     main=\"1st nearest neighbours\")\nplot(k1, \n     coords, \n     add=TRUE, \n     col=\"#909690\",\n     pch = 19,\n     length=0.6)\n\nplot(hunan$geometry, \n     border=\"#b89c8c\", \n     main=\"Distance link\")\nplot(wm_d62, \n     coords, \n     add=TRUE, \n     col=\"#bd5f5a\", \n     pch = 19, \n     cex = 0.6)\n\n\n\n\n\n6.2.4 Computing adaptive distance weight matrix\n\nFor fixed distance weight matrix, more densely settled areas (usually urban areas) tend to have more neighbours and the less densely settled areas (usually rural counties) tend to have lesser neighbours.\nHaving many neighbours smoothes the neighbour relationship across more neighbours.\n\n\nControl the numbers of neighbours directlyPlotting distance based neighbours\n\n\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours (where k=n as specified), either accepting asymmetric neighbours or imposing symmetry.\n\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nEach county will have exactly six neighbours as specified.\n\n\nWe can plot the weight matrix using the code chunk below.\n\npar(bg = '#E4D5C9')\n\nplot(hunan$geometry, \n     border=\"#b89c8c\")\nplot(knn6, \n     coords, \n     pch = 18, \n     cex = 0.6, \n     add = TRUE, \n     col = \"#A70D04\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-1-compute-distance-between-areas-using-nbdists-of-spdep",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#step-1-compute-distance-between-areas-using-nbdists-of-spdep",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "Step 1: Compute Distance between Areas using nbdists() of spdep",
    "text": "Step 1: Compute Distance between Areas using nbdists() of spdep\n\ndist &lt;- nbdists(wm_q, \n                coords, \n                longlat = TRUE)\n\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "8.1 Spatial lag with row-standardized weights",
    "text": "8.1 Spatial lag with row-standardized weights\n\nSums up GDPPC of all the neighbours, except the target location itself\nHere, we compute the average neighbor GDPPC value for each polygon.\nThese values are often referred to as spatially lagged values\n\n\nCompute the avg neighbor GDPPC valueAppend spatially lag GDPPC values onto hunan SpatialPolygonDataFramePlot both the GDPPC and spatial lag GDPPC\n\n\n\nThese values are often referred to as spatially lagged values.\n\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\n\n\nlag.list &lt;- list(hunan$NAME_3, \n                 lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,\n                   lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(gdppc, \n             lag_gdppc, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "8.2 Spatial lag as a sum of neighboring values",
    "text": "8.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\n\nCreate binary spatial weights matrixCompute lag variableAppend lag_sum GDPPC into hunanPlot & Compare\n\n\n\nWe start by applying a function that will assign a value of 1 per each neighbor.\nThis is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks.\nBasically it applies a function across each value in the neighbors structure.\n\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-average",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "8.3 Spatial window average",
    "text": "8.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\n\nAdd diagonal elementCreate spatial weights listCreate lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\n\n\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable() %&gt;% \n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                            fixed_thead = T)\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523...\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684...\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,...\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649...\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288...\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675...\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,...\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299...\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688...\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734...\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117...\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358...\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143...\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578...\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394...\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843...\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259...\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198...\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007...\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149...\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, ...\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276...\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,...\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778...\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858...\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512...\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842...\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,...\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561...\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,...\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485...\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895...\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661...\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472...\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,...\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642...\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317...\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812...\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305...\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,...\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254...\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,...\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345...\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627...\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275...\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742...\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783...\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844...\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206...\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034...\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712...\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,...\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521...\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835...\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499...\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716...\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074...\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,...\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661...\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123...\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892...\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957...\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,...\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134...\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418...\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139...\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152...\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264...\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017...\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573...\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346...\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,...\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324...\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411...\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,...\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,...\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318...\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265...\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207...\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946...\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513...\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613...\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963...\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722...\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855...\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,...\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,...\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472...\n\n\n\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-sum",
    "title": "Hands-on Exercise 4: Spatial Weights and Applications",
    "section": "8.4 Spatial window sum",
    "text": "8.4 Spatial window sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nUses and includes the diagonal element.\nSums up GDPPC of all neighbours, including target location itself\n\n\nAdd diagonal elementAssign weightsCompute lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable() %&gt;% \n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                            fixed_thead = T)\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523...\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684...\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,...\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649...\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288...\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675...\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,...\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299...\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688...\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734...\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117...\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358...\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143...\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578...\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394...\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843...\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259...\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198...\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007...\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149...\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, ...\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276...\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,...\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778...\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858...\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512...\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842...\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,...\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561...\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,...\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485...\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895...\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661...\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472...\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,...\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642...\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317...\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812...\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305...\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,...\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254...\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,...\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345...\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627...\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275...\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742...\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783...\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844...\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206...\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034...\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712...\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,...\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521...\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835...\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499...\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716...\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074...\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,...\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661...\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123...\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892...\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957...\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,...\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134...\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418...\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139...\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152...\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264...\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017...\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573...\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346...\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,...\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324...\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411...\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,...\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,...\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318...\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265...\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207...\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946...\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513...\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613...\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963...\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722...\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855...\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,...\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,...\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472...\n\n\n\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#loading-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#loading-the-data",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "3.1 Loading the Data",
    "text": "3.1 Loading the Data\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefileImport csv filePerforming relational join\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R.\n\n#output: simple features object\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nShape_Leng\nShape_Area\nCounty\ngeometry\n\n\n\n\nChangde\n21098\nAnxiang\nCounty\n1.8690742\n0.1005619\nAnxiang\nPOLYGON ((112.0625 29.75523...\n\n\nChangde\n21100\nHanshou\nCounty\n2.3606914\n0.1997875\nHanshou\nPOLYGON ((112.2288 29.11684...\n\n\nChangde\n21101\nJinshi\nCounty City\n1.4256199\n0.0530241\nJinshi\nPOLYGON ((111.8927 29.6013,...\n\n\nChangde\n21102\nLi\nCounty\n3.4743245\n0.1890812\nLi\nPOLYGON ((111.3731 29.94649...\n\n\nChangde\n21103\nLinli\nCounty\n2.2895061\n0.1145036\nLinli\nPOLYGON ((111.6324 29.76288...\n\n\nChangde\n21104\nShimen\nCounty\n4.1719181\n0.3719471\nShimen\nPOLYGON ((110.8825 30.11675...\n\n\nChangsha\n21109\nLiuyang\nCounty City\n4.0605788\n0.4601679\nLiuyang\nPOLYGON ((113.9905 28.5682,...\n\n\nChangsha\n21110\nNingxiang\nCounty\n3.3237542\n0.2661420\nNingxiang\nPOLYGON ((112.7181 28.38299...\n\n\nChangsha\n21111\nWangcheng\nCounty\n2.2920930\n0.1304916\nWangcheng\nPOLYGON ((112.7914 28.52688...\n\n\nChenzhou\n21112\nAnren\nCounty\n2.2407387\n0.1334394\nAnren\nPOLYGON ((113.1757 26.82734...\n\n\nChenzhou\n21115\nGuidong\nCounty\n2.0467289\n0.1285299\nGuidong\nPOLYGON ((114.1799 26.20117...\n\n\nChenzhou\n21117\nJiahe\nCounty\n1.5038242\n0.0631237\nJiahe\nPOLYGON ((112.4425 25.74358...\n\n\nChenzhou\n21118\nLinwu\nCounty\n2.0512481\n0.1244964\nLinwu\nPOLYGON ((112.5914 25.55143...\n\n\nChenzhou\n21119\nRucheng\nCounty\n2.7155640\n0.2176296\nRucheng\nPOLYGON ((113.6759 25.87578...\n\n\nChenzhou\n21120\nYizhang\nCounty\n3.2765386\n0.1935418\nYizhang\nPOLYGON ((113.2621 25.68394...\n\n\nChenzhou\n21121\nYongxing\nCounty\n2.9211528\n0.1767181\nYongxing\nPOLYGON ((113.3169 26.41843...\n\n\nChenzhou\n21122\nZixing\nCounty City\n2.6995368\n0.2476280\nZixing\nPOLYGON ((113.7311 26.16259...\n\n\nHengyang\n21123\nChangning\nCounty City\n2.4013569\n0.1863642\nChangning\nPOLYGON ((112.6144 26.60198...\n\n\nHengyang\n21124\nHengdong\nCounty\n2.7098301\n0.1756985\nHengdong\nPOLYGON ((113.1056 27.21007...\n\n\nHengyang\n21125\nHengnan\nCounty\n3.7804926\n0.2408050\nHengnan\nPOLYGON ((112.7599 26.98149...\n\n\nHengyang\n21126\nHengshan\nCounty\n2.3513543\n0.0899128\nHengshan\nPOLYGON ((112.607 27.4689, ...\n\n\nHengyang\n21129\nLeiyang\nCounty\n2.7427498\n0.2426073\nLeiyang\nPOLYGON ((112.9996 26.69276...\n\n\nHengyang\n21130\nQidong\nCounty\n3.0714217\n0.1733332\nQidong\nPOLYGON ((111.7818 27.0383,...\n\n\nHuaihua\n21131\nChenxi\nCounty\n3.0228314\n0.1821929\nChenxi\nPOLYGON ((110.2624 28.21778...\n\n\nHuaihua\n21134\nZhongfang\nCounty\n2.9023763\n0.1994978\nZhongfang\nPOLYGON ((109.9431 27.72858...\n\n\nHuaihua\n21135\nHuitong\nCounty\n3.1096821\n0.2053454\nHuitong\nPOLYGON ((109.9419 27.10512...\n\n\nHuaihua\n21136\nJingzhou\nCounty\n2.8584583\n0.1988991\nJingzhou\nPOLYGON ((109.8186 26.75842...\n\n\nHuaihua\n21137\nMayang\nAutonomous County\n2.3274351\n0.1462606\nMayang\nPOLYGON ((109.795 27.98008,...\n\n\nHuaihua\n21138\nTongdao\nAutonomous County\n2.5711292\n0.2021613\nTongdao\nPOLYGON ((109.9294 26.46561...\n\n\nHuaihua\n21139\nXinhuang\nAutonomous County\n2.1443973\n0.1377764\nXinhuang\nPOLYGON ((109.227 27.43733,...\n\n\nHuaihua\n21140\nXupu\nCounty\n4.0350213\n0.3136471\nXupu\nPOLYGON ((110.7189 28.30485...\n\n\nHuaihua\n21141\nYuanling\nCounty\n4.1642914\n0.5345233\nYuanling\nPOLYGON ((110.9652 28.99895...\n\n\nHuaihua\n21142\nZhijiang\nAutonomous County\n2.4452310\n0.1906027\nZhijiang\nPOLYGON ((109.8818 27.60661...\n\n\nLoudi\n21143\nLengshuijiang\nCounty City\n0.9753557\n0.0372343\nLengshuijiang\nPOLYGON ((111.5307 27.81472...\n\n\nLoudi\n21146\nShuangfeng\nCounty\n2.4012680\n0.1565776\nShuangfeng\nPOLYGON ((112.263 27.70421,...\n\n\nLoudi\n21147\nXinhua\nCounty\n3.3284533\n0.3361624\nXinhua\nPOLYGON ((111.3345 28.19642...\n\n\nShaoyang\n21148\nChengbu\nAutonomous County\n2.9374722\n0.2362023\nChengbu\nPOLYGON ((110.4455 26.69317...\n\n\nYongzhou\n21149\nDongan\nDistrict\n3.2132100\n0.1983914\nDongan\nPOLYGON ((111.4531 26.86812...\n\n\nShaoyang\n21150\nDongkou\nCounty\n2.9425568\n0.1971258\nDongkou\nPOLYGON ((110.6622 27.37305...\n\n\nShaoyang\n21151\nLonghui\nCounty\n2.7208650\n0.2578820\nLonghui\nPOLYGON ((110.985 27.65983,...\n\n\nShaoyang\n21152\nShaodong\nCounty\n2.3029031\n0.1701016\nShaodong\nPOLYGON ((111.9054 27.40254...\n\n\nShaoyang\n21155\nSuining\nCounty\n3.3043615\n0.2659378\nSuining\nPOLYGON ((110.389 27.10006,...\n\n\nShaoyang\n21156\nWugang\nCounty City\n2.2565865\n0.1400498\nWugang\nPOLYGON ((110.9878 27.03345...\n\n\nShaoyang\n21157\nXinning\nCounty\n3.3414094\n0.2487593\nXinning\nPOLYGON ((111.0736 26.84627...\n\n\nShaoyang\n21158\nXinshao\nCounty\n2.2955891\n0.1658312\nXinshao\nPOLYGON ((111.6013 27.58275...\n\n\nXiangtan\n21159\nShaoshan\nCounty City\n0.7722034\n0.0212792\nShaoshan\nPOLYGON ((112.5391 27.97742...\n\n\nXiangtan\n21162\nXiangxiang\nCounty City\n3.0755761\n0.1840808\nXiangxiang\nPOLYGON ((112.4549 28.05783...\n\n\nXiangxi Tujia and Miao\n21163\nBaojing\nCounty\n2.5569785\n0.1606901\nBaojing\nPOLYGON ((109.7015 28.82844...\n\n\nXiangxi Tujia and Miao\n21164\nFenghuang\nCounty\n2.2928893\n0.1596618\nFenghuang\nPOLYGON ((109.5239 28.19206...\n\n\nXiangxi Tujia and Miao\n21165\nGuzhang\nCounty\n1.7973808\n0.1202073\nGuzhang\nPOLYGON ((109.8968 28.74034...\n\n\nXiangxi Tujia and Miao\n21166\nHuayuan\nCounty\n1.7921938\n0.1025162\nHuayuan\nPOLYGON ((109.5647 28.61712...\n\n\nXiangxi Tujia and Miao\n21167\nJishou\nCounty City\n1.8826069\n0.0973363\nJishou\nPOLYGON ((109.8375 28.4696,...\n\n\nXiangxi Tujia and Miao\n21168\nLongshan\nCounty\n2.9782522\n0.2919091\nLongshan\nPOLYGON ((109.6337 29.62521...\n\n\nXiangxi Tujia and Miao\n21169\nLuxi\nCounty\n2.2051733\n0.1434018\nLuxi\nPOLYGON ((110.1067 28.41835...\n\n\nXiangxi Tujia and Miao\n21170\nYongshun\nCounty\n3.0959707\n0.3551324\nYongshun\nPOLYGON ((110.0003 29.29499...\n\n\nYiyang\n21171\nAnhua\nCounty\n4.5835050\n0.4510648\nAnhua\nPOLYGON ((111.6034 28.63716...\n\n\nYiyang\n21172\nNan\nCounty\n2.3011103\n0.1247939\nNan\nPOLYGON ((112.3232 29.46074...\n\n\nYiyang\n21176\nYuanjiang\nCounty City\n2.3268236\n0.1886048\nYuanjiang\nPOLYGON ((112.4391 29.1791,...\n\n\nYongzhou\n21178\nJianghua\nAutonomous County\n3.3360379\n0.2927690\nJianghua\nPOLYGON ((111.6461 25.29661...\n\n\nYongzhou\n21180\nLanshan\nCounty\n2.3556792\n0.1603531\nLanshan\nPOLYGON ((112.2286 25.61123...\n\n\nYongzhou\n21183\nNingyuan\nCounty\n3.3322291\n0.2266737\nNingyuan\nPOLYGON ((112.0715 26.09892...\n\n\nYongzhou\n21185\nShuangpai\nCounty\n2.3877440\n0.1540255\nShuangpai\nPOLYGON ((111.8864 26.11957...\n\n\nYongzhou\n21186\nXintian\nCounty\n1.7274574\n0.0894019\nXintian\nPOLYGON ((112.2578 26.0796,...\n\n\nYueyang\n21187\nHuarong\nCounty\n2.8178435\n0.1678359\nHuarong\nPOLYGON ((112.9242 29.69134...\n\n\nYueyang\n21188\nLinxiang\nCounty City\n2.5975997\n0.1568525\nLinxiang\nPOLYGON ((113.5502 29.67418...\n\n\nYueyang\n21189\nMiluo\nCounty City\n2.4474057\n0.1497881\nMiluo\nPOLYGON ((112.9902 29.02139...\n\n\nYueyang\n21190\nPingjiang\nCounty\n3.2177944\n0.3786800\nPingjiang\nPOLYGON ((113.8436 29.06152...\n\n\nYueyang\n21191\nXiangyin\nCounty\n2.3515063\n0.1491429\nXiangyin\nPOLYGON ((112.9173 28.98264...\n\n\nZhangjiajie\n21194\nCili\nCounty\n2.8940385\n0.3232206\nCili\nPOLYGON ((110.8822 29.69017...\n\n\nZhuzhou\n21197\nChaling\nCounty\n2.2375615\n0.2278921\nChaling\nPOLYGON ((113.7666 27.10573...\n\n\nZhuzhou\n21198\nLiling\nCounty City\n2.2435440\n0.1960655\nLiling\nPOLYGON ((113.5673 27.94346...\n\n\nZhuzhou\n21199\nYanling\nCounty\n2.1078954\n0.1849090\nYanling\nPOLYGON ((113.9292 26.6154,...\n\n\nZhuzhou\n21200\nYou\nCounty\n2.8904505\n0.2436366\nYou\nPOLYGON ((113.5879 27.41324...\n\n\nZhuzhou\n21201\nZhuzhou\nDistrict\n0.9331877\n0.0373488\nZhuzhou\nPOLYGON ((113.2493 28.02411...\n\n\nZhangjiajie\n21196\nSangzhi\nCounty\n3.3475449\n0.3216362\nSangzhi\nPOLYGON ((110.556 29.40543,...\n\n\nYueyang\n21192\nYueyang\nDistrict\n2.5710437\n0.1047594\nYueyang\nPOLYGON ((113.343 29.61064,...\n\n\nYongzhou\n21184\nQiyang\nCounty\n3.1835301\n0.2275458\nQiyang\nPOLYGON ((111.5563 26.81318...\n\n\nYiyang\n21173\nTaojiang\nCounty\n2.6080229\n0.1905982\nTaojiang\nPOLYGON ((112.0508 28.67265...\n\n\nShaoyang\n21153\nShaoyang\nCounty City\n0.9765399\n0.0316779\nShaoyang\nPOLYGON ((111.5013 27.30207...\n\n\nLoudi\n21144\nLianyuan\nCounty City\n2.8007253\n0.2057341\nLianyuan\nPOLYGON ((111.6789 28.02946...\n\n\nHuaihua\n21132\nHongjiang\nDistrict\n3.3031522\n0.1994795\nHongjiang\nPOLYGON ((110.1441 27.47513...\n\n\nHengyang\n21127\nHengyang\nCounty City\n0.9035944\n0.0349171\nHengyang\nPOLYGON ((112.7144 26.98613...\n\n\nChenzhou\n21116\nGuiyang\nCounty\n3.6939698\n0.2668106\nGuiyang\nPOLYGON ((113.0811 26.04963...\n\n\nChangsha\n21107\nChangsha\nDistrict\n0.9536480\n0.0320942\nChangsha\nPOLYGON ((112.9421 28.03722...\n\n\nChangde\n21105\nTaoyuan\nCounty\n4.1225866\n0.4126555\nTaoyuan\nPOLYGON ((112.0612 29.32855...\n\n\nXiangtan\n21160\nXiangtan\nCounty City\n0.8480602\n0.0253653\nXiangtan\nPOLYGON ((113.0426 27.8942,...\n\n\nYongzhou\n21177\nDao\nCounty\n2.7674949\n0.2206642\nDao\nPOLYGON ((111.498 25.81679,...\n\n\nYongzhou\n21179\nJiangyong\nCounty\n2.2995970\n0.1473782\nJiangyong\nPOLYGON ((111.3659 25.39472...\n\n\n\n\n\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package.\n\n#output: R dataframe class\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\n\n\nCounty\nCity\navg_wage\ndeposite\nFAI\nGov_Rev\nGov_Exp\nGDP\nGDPPC\nGIO\nLoan\nNIPCR\nBed\nEmp\nEmpR\nEmpRT\nPri_Stu\nSec_Stu\nHousehold\nHousehold_R\nNOIP\nPop_R\nRSCG\nPop_T\nAgri\nService\nDisp_Inc\nRORP\nROREmp\n\n\n\n\nAnhua\nYiyang\n30544\n10967.0\n6831.7\n456.72\n2703.00\n13225.0\n14567\n9276.90\n3954.90\n3528.3\n2718\n494.310\n441.4\n338.0\n54.175\n32.830\n290.400\n234.5\n101\n670.3\n5760.60\n910.8\n4942.253\n5414.5\n12373\n0.7359464\n0.8929619\n\n\nAnren\nChenzhou\n28058\n4598.9\n6386.1\n220.57\n1454.70\n4941.2\n12761\n4189.20\n2555.30\n3271.8\n970\n290.820\n255.4\n99.4\n33.171\n17.505\n104.600\n121.9\n34\n243.2\n2386.40\n388.7\n2357.764\n3814.1\n16072\n0.6256753\n0.8782065\n\n\nAnxiang\nChangde\n31935\n5517.2\n3541.0\n243.64\n1779.50\n12482.0\n23667\n5108.90\n2806.90\n7693.7\n1931\n336.390\n270.5\n205.9\n19.584\n17.819\n148.100\n135.4\n53\n346.0\n3957.90\n528.3\n4524.410\n14100.0\n16610\n0.6549309\n0.8041262\n\n\nBaojing\nHunan West\n30843\n2250.0\n1005.4\n192.59\n1379.10\n4087.9\n14563\n3623.50\n1253.70\n4191.3\n927\n195.170\n145.6\n116.4\n19.249\n11.831\n73.200\n69.9\n18\n184.1\n768.04\n281.3\n1118.561\n541.8\n13455\n0.6544614\n0.7460163\n\n\nChaling\nZhuzhou\n31251\n8241.4\n6508.4\n620.19\n1947.00\n11585.0\n20078\n9157.70\n4287.40\n3887.7\n1449\n330.290\n299.0\n154.0\n33.906\n20.548\n148.700\n139.4\n106\n301.6\n4009.50\n578.4\n3793.550\n5444.0\n20461\n0.5214385\n0.9052651\n\n\nChangning\nHengyang\n28518\n10860.0\n7920.0\n769.86\n2631.60\n19886.0\n24418\n37392.00\n4242.80\n9528.0\n3605\n548.610\n415.1\n273.7\n81.831\n44.485\n211.200\n211.7\n115\n448.2\n5220.40\n816.3\n6430.782\n13074.6\n20868\n0.5490628\n0.7566395\n\n\nChangsha\nChangsha\n54540\n24332.0\n33624.0\n5350.00\n7885.50\n88009.0\n88656\n51361.00\n40534.00\n17070.0\n3310\n670.820\n452.0\n219.4\n59.151\n39.685\n300.300\n248.4\n214\n475.1\n22604.00\n998.6\n13107.148\n17726.6\n183252\n0.4757661\n0.6738022\n\n\nChengbu\nShaoyang\n28597\n2580.6\n1922.3\n160.73\n1191.60\n2569.5\n10132\n1681.40\n1232.00\n3271.8\n582\n162.480\n127.6\n94.4\n18.751\n7.869\n76.100\n59.6\n17\n189.6\n1173.80\n256.7\n1356.950\n1215.1\n12379\n0.7386054\n0.7853274\n\n\nChenxi\nHuaihua\n33580\n4990.0\n5818.4\n460.49\n1724.20\n7755.2\n17026\n6644.50\n3220.00\n4777.0\n2170\n308.430\n214.4\n174.8\n26.706\n14.591\n139.500\n110.5\n55\n311.7\n2570.60\n456.7\n2257.520\n1306.3\n14595\n0.6825049\n0.6951334\n\n\nCili\nZhangjiajie\n33099\n8116.9\n4498.1\n499.77\n2306.20\n11378.0\n18714\n5843.30\n5503.40\n5031.8\n2179\n381.200\n334.8\n264.3\n34.918\n27.020\n211.400\n174.5\n70\n379.4\n3116.90\n610.4\n3112.731\n5005.6\n15603\n0.6215596\n0.8782791\n\n\nDao\nYongzhou\n32541\n7245.0\n7922.0\n461.66\n2013.50\n11034.0\n18059\n2393.80\n2873.50\n9000.0\n1588\n381.530\n344.3\n178.3\n65.790\n31.430\n158.700\n157.9\n44\n388.2\n2898.80\n613.6\n5602.035\n8411.1\n16305\n0.6326597\n0.9024192\n\n\nDongan\nYongzhou\n36713\n6549.3\n9158.0\n434.07\n1720.60\n11495.0\n20901\n11597.00\n3320.60\n9116.7\n1305\n322.250\n278.1\n163.6\n39.419\n20.661\n166.500\n163.0\n84\n366.0\n3106.30\n551.2\n4866.481\n6784.4\n20265\n0.6640058\n0.8629946\n\n\nDongkou\nShaoyang\n31483\n9489.6\n8703.2\n374.96\n2209.50\n10286.0\n13240\n10568.00\n4120.30\n3792.5\n1620\n583.560\n499.2\n263.2\n69.845\n43.194\n262.400\n220.4\n74\n523.1\n3229.10\n780.9\n6025.184\n9116.8\n15375\n0.6698681\n0.8554390\n\n\nFenghuang\nHunan West\n31608\n4008.7\n2550.0\n406.51\n1763.60\n4681.2\n13382\n848.99\n2863.00\n4681.2\n1212\n250.730\n195.4\n151.8\n33.379\n17.690\n90.100\n80.5\n17\n255.5\n2605.40\n351.3\n1206.261\n651.1\n14281\n0.7272986\n0.7793244\n\n\nGuidong\nChenzhou\n30149\n2200.1\n2512.9\n111.19\n880.00\n1955.9\n8497\n1202.60\n1437.20\n3130.4\n567\n138.530\n115.2\n56.9\n13.437\n7.091\n64.800\n65.4\n14\n150.1\n486.10\n231.8\n630.016\n911.1\n12290\n0.6475410\n0.8315888\n\n\nGuiyang\nChenzhou\n41394\n9664.8\n15712.0\n1309.20\n2727.50\n23023.0\n32853\n36820.00\n4860.10\n10271.0\n2237\n517.180\n430.9\n242.0\n69.344\n33.568\n231.800\n217.5\n127\n420.4\n6281.80\n704.1\n8804.639\n14791.5\n64517\n0.5970743\n0.8331722\n\n\nGuzhang\nHunan West\n28610\n1563.8\n1021.7\n108.40\n959.60\n1490.4\n11580\n513.95\n849.56\n3595.9\n392\n98.421\n74.6\n56.7\n8.718\n6.288\n35.200\n31.4\n10\n85.2\n354.48\n129.0\n527.230\n504.0\n11954\n0.6604651\n0.7579683\n\n\nHanshou\nChangde\n32265\n7979.0\n8665.0\n386.13\n2062.40\n15788.0\n20981\n13491.00\n4550.00\n8269.9\n2560\n456.780\n388.8\n246.7\n42.097\n33.029\n240.200\n208.7\n95\n553.2\n4460.50\n804.6\n6545.350\n17727.0\n18925\n0.6875466\n0.8511756\n\n\nHengdong\nHengyang\n30992\n8661.0\n6665.0\n542.25\n1937.40\n17409.0\n27485\n17305.00\n4118.00\n10829.0\n1859\n388.340\n284.5\n201.0\n48.983\n36.120\n164.400\n167.4\n96\n426.4\n5127.00\n634.9\n5972.961\n11278.5\n19800\n0.6716018\n0.7326054\n\n\nHengnan\nHengyang\n28031\n3288.9\n9531.4\n804.91\n2894.40\n21019.0\n21911\n20953.00\n4013.00\n9872.9\n2173\n601.570\n503.6\n354.0\n76.933\n57.519\n256.000\n274.3\n118\n629.1\n5752.60\n961.4\n8624.680\n15914.0\n18683\n0.6543582\n0.8371428\n\n\nHengshan\nHengyang\n28688\n5944.6\n4871.1\n451.46\n1393.70\n9718.9\n25172\n8571.50\n2221.50\n10619.0\n966\n291.120\n261.9\n158.8\n28.997\n20.909\n103.700\n101.0\n89\n256.4\n1713.70\n387.0\n3505.269\n6233.5\n17732\n0.6625323\n0.8996290\n\n\nHengyang\nHengyang\n27760\n14680.0\n11145.0\n597.66\n2778.80\n21495.0\n19382\n18288.00\n5549.60\n10313.0\n2632\n686.520\n500.2\n313.6\n88.917\n64.674\n299.200\n247.7\n120\n733.4\n5386.30\n1111.6\n12451.938\n23139.2\n124392\n0.6597697\n0.7286022\n\n\nHongjiang\nHuaihua\n37686\n5966.0\n6515.5\n623.95\n2067.80\n7355.5\n17733\n13750.00\n3272.20\n6553.5\n1161\n229.400\n199.9\n132.0\n23.614\n18.837\n136.100\n124.7\n76\n260.9\n1744.20\n415.8\n2588.250\n202.8\n27334\n0.6274651\n0.8714037\n\n\nHuarong\nYueyang\n26832\n8116.4\n14292.0\n365.84\n1933.90\n21654.0\n30413\n40193.00\n4564.80\n10367.0\n1500\n442.970\n359.2\n252.9\n31.601\n26.933\n202.300\n170.2\n151\n430.3\n6348.90\n714.1\n7690.520\n10050.6\n21501\n0.6025767\n0.8108901\n\n\nHuayuan\nHunan West\n31708\n3669.8\n2200.0\n331.78\n1503.70\n5905.9\n20337\n9257.60\n2463.60\n4353.8\n1240\n214.790\n149.8\n94.9\n23.831\n14.031\n76.900\n59.9\n74\n188.1\n1024.70\n291.1\n883.722\n533.2\n15467\n0.6461697\n0.6974254\n\n\nHuitong\nHuaihua\n33693\n4615.0\n2617.4\n295.00\n1306.70\n4588.3\n14334\n2095.60\n1369.30\n4631.9\n1194\n246.150\n193.5\n143.7\n20.603\n13.337\n96.700\n114.4\n25\n234.5\n1061.70\n320.9\n1580.090\n5.2\n13989\n0.7307572\n0.7861060\n\n\nJiahe\nChenzhou\n36023\n5493.1\n4864.3\n453.68\n1331.50\n9608.2\n32091\n14882.00\n1906.50\n7903.3\n719\n242.800\n198.9\n83.0\n36.054\n19.497\n99.000\n108.5\n100\n179.6\n1365.90\n301.3\n2276.272\n3230.2\n17744\n0.5960836\n0.8191928\n\n\nJianghua\nYongzhou\n34378\n4586.4\n4631.5\n309.70\n1651.40\n6555.9\n15801\n3357.10\n2976.00\n3225.3\n1663\n306.310\n272.7\n188.9\n37.494\n20.644\n109.900\n116.1\n33\n285.1\n2384.80\n416.7\n3272.511\n10533.8\n16274\n0.6841853\n0.8902746\n\n\nJiangyong\nYongzhou\n30250\n3198.2\n3942.5\n187.23\n1009.10\n4012.2\n17168\n2022.70\n1201.20\n3253.9\n720\n153.580\n132.8\n94.3\n21.936\n11.093\n68.300\n61.2\n25\n163.5\n1238.20\n234.3\n2862.901\n9773.3\n16634\n0.6978233\n0.8646959\n\n\nJingzhou\nHuaihua\n33870\n3592.8\n2031.4\n237.51\n1129.00\n5007.7\n20348\n4534.10\n1566.50\n5397.3\n1054\n163.910\n112.6\n85.8\n16.978\n11.446\n69.100\n56.1\n32\n140.6\n1611.50\n246.7\n1769.328\n337.5\n12859\n0.5699230\n0.6869624\n\n\nJinshi\nChangde\n28692\n4581.7\n4777.0\n373.31\n1148.40\n8706.9\n34592\n10935.00\n2242.00\n8169.9\n848\n122.780\n82.1\n61.7\n8.723\n7.592\n81.900\n43.7\n77\n92.4\n3683.00\n251.8\n2562.460\n7525.0\n19498\n0.3669579\n0.6686757\n\n\nJishou\nHunan West\n39816\n9586.2\n5235.0\n470.22\n1738.20\n9631.5\n31537\n6345.70\n8282.90\n4823.0\n3790\n213.420\n97.0\n62.4\n25.454\n21.941\n99.200\n46.5\n49\n85.2\n5651.00\n306.6\n849.010\n611.6\n17980\n0.2778865\n0.4545029\n\n\nLanshan\nYongzhou\n33756\n4236.0\n3986.7\n296.68\n1194.60\n6627.2\n20088\n5392.10\n1599.40\n8672.1\n1144\n233.390\n201.5\n131.6\n32.448\n16.299\n83.300\n90.7\n52\n198.2\n2234.20\n330.9\n2262.021\n10341.9\n19161\n0.5989725\n0.8633618\n\n\nLeiyang\nHengyang\n32814\n15393.0\n18687.0\n1535.20\n3819.00\n30213.0\n26105\n42707.00\n7409.20\n10611.0\n2531\n750.120\n553.7\n405.8\n112.200\n56.350\n338.100\n281.2\n155\n629.3\n7268.10\n1160.2\n8349.199\n19981.6\n19634\n0.5424065\n0.7381486\n\n\nLengshuijiang\nLoudi\n35647\n6805.3\n9746.8\n1054.20\n2105.30\n21243.0\n64257\n36926.00\n8936.60\n10441.0\n1413\n191.320\n101.8\n61.8\n29.639\n20.113\n112.400\n56.9\n118\n78.4\n5750.60\n332.6\n1277.869\n991.8\n23120\n0.2357186\n0.5320928\n\n\nLi\nChangde\n32541\n13487.0\n16066.0\n709.61\n2459.50\n20322.0\n24473\n18402.00\n6748.00\n8377.0\n2038\n513.440\n426.8\n227.1\n38.975\n33.938\n268.500\n256.0\n96\n539.7\n7110.20\n832.5\n7562.340\n53160.0\n18985\n0.6482883\n0.8312558\n\n\nLianyuan\nLoudi\n30320\n8059.7\n9255.3\n707.45\n3298.60\n18340.0\n18346\n20515.00\n7243.20\n4307.7\n2260\n706.840\n612.9\n344.1\n71.232\n53.597\n316.200\n298.7\n154\n712.6\n6889.00\n1001.5\n7642.158\n5965.4\n38131\n0.7115327\n0.8670986\n\n\nLiling\nZhuzhou\n42896\n12865.0\n19125.0\n2602.60\n4221.40\n39553.0\n41491\n57146.00\n9398.10\n13347.0\n2797\n639.830\n513.1\n212.1\n53.992\n33.705\n248.400\n229.7\n482\n473.2\n11213.00\n958.0\n5373.990\n17378.0\n24185\n0.4939457\n0.8019318\n\n\nLinli\nChangde\n32667\n564.1\n7781.2\n336.86\n1538.70\n10355.0\n25554\n8214.00\n358.00\n8143.1\n1440\n307.360\n272.2\n100.8\n23.286\n18.943\n129.100\n157.2\n99\n246.6\n3604.90\n409.3\n3583.910\n7031.0\n18604\n0.6024921\n0.8856065\n\n\nLinwu\nChenzhou\n32031\n5984.0\n5734.3\n478.92\n1435.20\n8191.1\n23986\n6250.70\n2152.70\n7102.2\n959\n215.300\n184.1\n90.2\n41.913\n13.238\n101.500\n88.0\n67\n227.5\n2023.30\n342.8\n1606.947\n2632.2\n17966\n0.6636523\n0.8550859\n\n\nLinxiang\nYueyang\n31669\n5850.5\n10852.0\n319.20\n1609.00\n15968.0\n31897\n29988.00\n3788.20\n9739.0\n1289\n293.500\n212.5\n98.8\n36.202\n23.831\n138.600\n136.7\n123\n286.1\n4598.80\n502.3\n3357.477\n2994.6\n20628\n0.5695799\n0.7240204\n\n\nLiuyang\nChangsha\n40446\n21415.0\n43599.0\n2473.10\n4605.50\n81113.0\n63118\n99254.00\n23408.00\n15719.0\n6225\n919.620\n721.4\n300.1\n90.978\n58.819\n374.800\n369.8\n733\n642.7\n16233.00\n1285.5\n10844.470\n26617.8\n27345\n0.4999611\n0.7844544\n\n\nLonghui\nShaoyang\n33615\n11925.0\n8723.9\n425.06\n2741.60\n10511.0\n9572\n9317.90\n3985.50\n3177.6\n2726\n709.990\n604.4\n436.7\n95.163\n54.211\n344.600\n298.8\n85\n834.1\n2819.60\n1098.2\n4320.396\n3264.6\n12049\n0.7595156\n0.8512796\n\n\nLongshan\nHunan West\n34203\n5557.0\n2810.0\n218.53\n2052.40\n4933.6\n9754\n893.45\n2128.20\n4164.0\n1505\n334.420\n266.7\n167.5\n42.189\n30.946\n148.200\n126.1\n18\n345.8\n2293.90\n508.3\n2248.709\n921.5\n13138\n0.6803069\n0.7975001\n\n\nLuxi\nHunan West\n32680\n2946.8\n1772.0\n184.25\n1337.60\n4878.3\n17472\n7085.60\n1626.60\n4089.1\n664\n197.490\n149.7\n80.9\n21.683\n17.160\n82.400\n71.1\n42\n174.3\n917.41\n280.3\n1036.088\n540.8\n13247\n0.6218337\n0.7580131\n\n\nMayang\nHuaihua\n32772\n3456.0\n2703.1\n215.86\n1461.00\n4738.8\n13744\n3876.90\n2242.00\n4299.8\n975\n216.850\n160.0\n148.1\n24.173\n15.207\n90.300\n87.8\n33\n245.0\n1581.70\n345.6\n1865.938\n5.2\n14487\n0.7089120\n0.7378372\n\n\nMiluo\nYueyang\n36113\n4749.3\n15828.0\n1068.60\n2446.50\n29548.0\n42497\n66342.00\n3330.60\n9421.3\n965\n451.270\n303.3\n162.8\n40.221\n30.662\n204.900\n193.6\n269\n351.4\n5817.70\n697.0\n5688.717\n8978.5\n23379\n0.5041607\n0.6721032\n\n\nNan\nYiyang\n35272\n8921.7\n3367.5\n300.00\n1987.10\n15568.0\n21311\n11804.00\n4928.10\n8369.8\n1877\n366.100\n325.6\n226.1\n35.487\n29.444\n259.200\n201.3\n91\n455.9\n5266.20\n732.8\n7783.359\n6781.7\n17691\n0.6221343\n0.8893745\n\n\nNingxiang\nChangsha\n40744\n18662.0\n49234.0\n2448.90\n4812.20\n73250.0\n62202\n114145.00\n18435.00\n13763.0\n4351\n852.960\n757.6\n318.3\n80.715\n68.853\n391.700\n369.6\n552\n655.5\n15623.00\n1186.5\n12804.480\n18447.7\n24020\n0.5524652\n0.8882011\n\n\nNingyuan\nYongzhou\n34190\n7351.4\n7716.5\n514.24\n2234.40\n8984.3\n12697\n5627.80\n4249.40\n4151.5\n1753\n444.920\n401.3\n157.8\n68.336\n32.471\n185.500\n157.8\n64\n460.9\n3097.50\n710.2\n4283.431\n9958.4\n19742\n0.6489721\n0.9019599\n\n\nPingjiang\nYueyang\n30017\n8718.4\n10627.0\n461.62\n2827.00\n16444.0\n17252\n25647.00\n5201.20\n3780.8\n2205\n601.380\n512.8\n278.3\n73.943\n43.548\n260.900\n269.9\n136\n612.5\n3448.30\n957.5\n5060.948\n8789.3\n14883\n0.6396867\n0.8527054\n\n\nQidong\nHengyang\n30990\n13633.0\n6875.7\n463.91\n2413.20\n17718.0\n18001\n26260.00\n4246.10\n9020.6\n2055\n607.640\n529.2\n311.0\n80.694\n51.474\n289.200\n287.3\n115\n627.8\n6076.00\n986.4\n7380.180\n15451.7\n18256\n0.6364558\n0.8709104\n\n\nQiyang\nYongzhou\n32059\n14432.0\n14439.0\n499.51\n2710.50\n17705.0\n20638\n11567.00\n6388.30\n8816.0\n2799\n594.100\n495.2\n257.9\n75.936\n45.318\n241.900\n255.1\n107\n519.9\n3832.70\n860.7\n6273.597\n13568.8\n19776\n0.6040432\n0.8335297\n\n\nRucheng\nChenzhou\n35575\n4777.6\n3816.6\n343.00\n1492.70\n3756.0\n11286\n4492.20\n2426.20\n2993.7\n1130\n232.280\n197.3\n127.8\n33.101\n14.478\n111.300\n101.6\n43\n235.7\n751.80\n333.2\n2079.963\n1744.7\n13755\n0.7073830\n0.8494059\n\n\nSangzhi\nZhangjiajie\n33916\n3920.0\n3081.3\n248.06\n1856.10\n5615.4\n14624\n1694.80\n2981.20\n3405.9\n1999\n267.150\n234.5\n139.8\n31.278\n18.993\n127.900\n122.8\n28\n256.9\n1803.30\n385.5\n3607.897\n17585.8\n45167\n0.6664073\n0.8777840\n\n\nShaodong\nShaoyang\n31507\n16184.0\n12214.0\n771.60\n2757.00\n22898.0\n25246\n29175.00\n7855.30\n10089.0\n3080\n724.310\n547.7\n310.0\n99.082\n59.009\n363.200\n297.8\n148\n524.9\n8576.30\n912.1\n5704.602\n4679.3\n18296\n0.5754851\n0.7561679\n\n\nShaoshan\nXiangtan\n33314\n2626.4\n4500.0\n258.64\n683.65\n4956.8\n55570\n9717.60\n1649.00\n14916.0\n488\n73.652\n62.0\n33.6\n5.910\n3.201\n27.147\n30.4\n48\n57.7\n1200.80\n92.3\n807.714\n1630.3\n24991\n0.6251354\n0.8417966\n\n\nShaoyang\nShaoyang\n31783\n8345.7\n7237.3\n376.42\n2780.80\n9031.2\n9653\n7887.80\n2425.30\n3499.3\n2294\n655.130\n569.2\n385.0\n71.417\n43.525\n265.400\n247.9\n65\n657.6\n3406.30\n942.3\n5518.299\n21656.5\n65431\n0.6978669\n0.8688352\n\n\nShimen\nChangde\n33261\n8334.4\n10531.0\n548.33\n2178.80\n16293.0\n27137\n17795.00\n6026.50\n6156.0\n2502\n392.050\n329.6\n193.8\n29.245\n26.104\n190.600\n184.7\n122\n399.2\n6490.70\n600.5\n5266.510\n6981.0\n19275\n0.6647794\n0.8407091\n\n\nShuangfeng\nLoudi\n33684\n11455.0\n7904.9\n470.59\n2657.50\n15225.0\n17755\n16665.00\n3914.00\n5470.3\n1862\n559.470\n488.5\n309.6\n57.966\n41.575\n244.300\n245.6\n129\n644.6\n4596.00\n859.4\n7943.893\n2613.1\n14994\n0.7500582\n0.8731478\n\n\nShuangpai\nYongzhou\n33302\n1918.0\n3572.0\n226.37\n881.96\n3728.0\n21942\n2646.30\n2056.40\n4568.1\n408\n86.264\n68.0\n46.2\n11.339\n6.890\n57.600\n39.5\n34\n111.6\n567.21\n174.1\n1866.171\n9092.1\n18479\n0.6410109\n0.7882778\n\n\nSuining\nShaoyang\n31750\n4307.1\n3605.6\n222.40\n1442.50\n5658.1\n16069\n11150.00\n1566.40\n4990.4\n802\n264.080\n208.9\n145.2\n26.200\n14.261\n108.800\n86.3\n54\n268.4\n1761.50\n352.9\n2064.499\n1413.5\n15004\n0.7605554\n0.7910482\n\n\nTaojiang\nYiyang\n35184\n8657.4\n8743.0\n417.37\n2276.80\n15162.0\n19509\n18691.00\n4656.80\n8687.9\n2504\n472.800\n411.4\n194.0\n48.047\n33.234\n260.900\n208.8\n153\n504.5\n5355.90\n779.7\n13878.842\n13439.3\n79214\n0.6470437\n0.8701354\n\n\nTaoyuan\nChangde\n31877\n11948.0\n8656.0\n710.08\n2625.10\n19603.0\n22879\n16529.00\n4735.00\n7682.6\n2070\n558.770\n479.9\n300.5\n44.429\n36.630\n274.500\n272.0\n60\n607.4\n8926.00\n857.1\n18328.460\n50619.0\n60461\n0.7086688\n0.8588507\n\n\nTongdao\nHuaihua\n35400\n2578.0\n1525.4\n165.59\n1046.50\n2653.2\n12781\n2514.50\n1021.00\n3696.4\n882\n144.490\n105.5\n82.2\n15.913\n7.776\n57.900\n49.7\n27\n154.2\n749.14\n208.1\n981.418\n644.2\n12424\n0.7409899\n0.7301543\n\n\nWangcheng\nChangsha\n45171\n12122.0\n48829.0\n2285.50\n3802.30\n37488.0\n70666\n148976.00\n10330.00\n16495.0\n1678\n361.480\n268.6\n131.2\n28.838\n24.815\n161.300\n154.8\n314\n266.6\n5623.30\n533.4\n5222.356\n6648.6\n27690\n0.4998125\n0.7430563\n\n\nWugang\nShaoyang\n30573\n8618.0\n7373.3\n486.85\n2346.00\n9046.7\n12112\n5346.00\n3852.00\n4864.4\n2250\n483.620\n402.5\n271.4\n70.758\n43.683\n243.900\n194.0\n52\n502.9\n3476.00\n752.3\n4613.704\n1734.7\n15126\n0.6684833\n0.8322650\n\n\nXiangtan\nXiangtan\n35274\n15516.0\n10121.0\n1236.60\n3050.10\n22728.0\n27060\n30730.00\n12217.00\n10135.0\n2022\n610.490\n551.9\n347.1\n46.556\n54.439\n248.590\n239.1\n187\n574.0\n4889.10\n845.2\n10688.618\n40758.0\n69261\n0.6791292\n0.9040279\n\n\nXiangxiang\nXiangtan\n33040\n13298.0\n9819.0\n975.59\n2942.80\n23175.0\n29361\n39630.00\n7900.30\n9264.3\n2451\n586.400\n492.0\n324.5\n47.743\n39.612\n231.710\n242.0\n189\n535.7\n5891.80\n787.8\n6852.943\n17531.9\n22297\n0.6799949\n0.8390177\n\n\nXiangyin\nYueyang\n33169\n5466.1\n14714.0\n520.53\n2318.80\n23265.0\n33983\n49507.00\n5222.90\n8824.5\n1550\n466.110\n357.4\n169.4\n44.878\n30.752\n193.800\n190.1\n152\n408.4\n4273.20\n686.9\n6000.857\n8175.0\n19945\n0.5945552\n0.7667718\n\n\nXinhua\nLoudi\n32496\n11075.0\n6725.3\n576.47\n3599.50\n14940.0\n13398\n12152.00\n6121.20\n3342.4\n1542\n755.140\n677.9\n451.6\n96.224\n57.670\n316.600\n313.8\n112\n817.4\n5743.50\n1116.7\n6919.849\n3145.3\n13834\n0.7319782\n0.8977143\n\n\nXinhuang\nHuaihua\n31891\n2373.1\n2075.8\n170.11\n1069.30\n3782.1\n15412\n3405.70\n1265.20\n3935.6\n1350\n149.710\n105.6\n104.0\n15.938\n8.781\n72.000\n72.5\n36\n178.6\n873.45\n246.0\n1130.322\n785.8\n12732\n0.7260163\n0.7053637\n\n\nXinning\nShaoyang\n32067\n6126.3\n5978.8\n390.67\n1830.60\n6064.6\n10732\n3857.70\n2899.90\n3287.7\n1565\n429.840\n347.8\n227.4\n41.633\n22.005\n171.400\n146.5\n38\n383.6\n1445.90\n566.7\n2415.712\n2364.9\n13031\n0.6769014\n0.8091383\n\n\nXinshao\nShaoyang\n34199\n7344.2\n8313.8\n384.19\n2229.20\n8590.9\n11514\n10829.00\n5042.50\n3986.4\n2319\n577.690\n477.4\n265.8\n68.131\n39.034\n234.100\n213.0\n79\n533.6\n2941.60\n749.0\n3003.553\n5679.2\n13778\n0.7124166\n0.8263948\n\n\nXintian\nYongzhou\n33609\n3851.6\n3401.9\n250.31\n1280.20\n4776.4\n14426\n3357.40\n1334.90\n2894.9\n1264\n236.520\n217.1\n116.9\n32.138\n15.970\n93.800\n107.1\n42\n226.6\n1329.80\n332.1\n2530.482\n3134.3\n16925\n0.6823246\n0.9178928\n\n\nXupu\nHuaihua\n29873\n8675.5\n6112.2\n457.86\n2452.00\n10314.0\n13863\n6720.40\n4588.00\n5453.1\n2106\n512.610\n400.9\n292.3\n53.793\n29.166\n226.100\n211.2\n71\n516.0\n3427.30\n745.9\n4308.431\n242.6\n16558\n0.6917817\n0.7820760\n\n\nYanling\nZhuzhou\n34156\n3274.4\n5835.0\n402.90\n1038.20\n4250.5\n21021\n5855.80\n2379.60\n3608.4\n545\n116.180\n99.0\n54.0\n10.838\n6.682\n52.200\n46.0\n75\n112.2\n1241.20\n202.2\n971.500\n6851.0\n18652\n0.5548961\n0.8521260\n\n\nYizhang\nChenzhou\n33508\n7938.8\n9992.5\n750.40\n2142.60\n10455.0\n17814\n19120.00\n3697.00\n3788.6\n2280\n348.830\n279.9\n128.8\n63.564\n25.843\n161.300\n142.5\n169\n363.4\n5037.50\n588.9\n2521.831\n3584.6\n19318\n0.6170827\n0.8023966\n\n\nYongshun\nHunan West\n31234\n4516.9\n2464.1\n220.66\n2021.70\n4142.1\n9590\n1061.00\n2839.90\n3963.1\n1801\n312.990\n259.4\n195.7\n38.686\n24.854\n115.700\n113.9\n23\n292.5\n2247.30\n433.3\n2018.756\n845.8\n12650\n0.6750519\n0.8287805\n\n\nYongxing\nChenzhou\n33278\n7097.6\n13456.0\n1294.50\n2476.00\n21382.0\n37651\n43700.00\n3053.70\n9856.1\n1969\n375.500\n304.9\n133.5\n52.440\n19.765\n172.500\n145.7\n175\n333.5\n4807.10\n562.6\n3174.984\n4540.5\n19960\n0.5927835\n0.8119840\n\n\nYou\nZhuzhou\n36791\n9541.6\n15611.0\n1533.30\n2803.00\n25153.0\n36264\n32738.00\n6316.20\n13021.0\n1992\n472.320\n418.0\n254.3\n42.124\n31.908\n186.400\n196.9\n248\n344.4\n7654.80\n693.7\n6071.620\n27443.0\n22732\n0.4964682\n0.8849932\n\n\nYuanjiang\nYiyang\n33302\n7763.4\n10486.0\n509.45\n2381.20\n17603.0\n26258\n21082.00\n6464.20\n10060.0\n1856\n401.220\n335.2\n203.3\n34.220\n27.932\n260.300\n161.0\n105\n366.7\n5125.10\n672.5\n6644.520\n5899.6\n20552\n0.5452788\n0.8354519\n\n\nYuanling\nHuaihua\n37762\n5627.0\n5466.8\n677.40\n2202.60\n14156.0\n24194\n14835.00\n2485.30\n4265.4\n2501\n382.530\n283.9\n210.2\n33.935\n21.278\n166.500\n155.9\n56\n397.0\n3092.50\n586.5\n2508.387\n637.8\n15165\n0.6768968\n0.7421640\n\n\nYueyang\nYueyang\n31470\n4946.6\n15084.0\n330.43\n1971.60\n18974.0\n26360\n36800.00\n3668.70\n10377.0\n1616\n411.260\n293.3\n173.0\n40.218\n30.051\n201.500\n150.9\n158\n435.3\n5836.60\n721.7\n11279.478\n15381.2\n88494\n0.6031592\n0.7131741\n\n\nZhijiang\nHuaihua\n33582\n4306.1\n2802.2\n356.96\n1470.00\n6992.5\n20518\n4491.80\n2477.30\n4535.1\n935\n223.750\n175.5\n116.1\n23.693\n14.726\n101.800\n94.3\n56\n247.6\n2133.30\n341.6\n2576.470\n90.8\n13589\n0.7248244\n0.7843575\n\n\nZhongfang\nHuaihua\n34941\n1296.3\n7594.6\n348.83\n1048.00\n7332.1\n30846\n8608.50\n968.44\n6082.5\n662\n170.250\n103.1\n89.3\n12.709\n8.563\n71.100\n70.9\n56\n173.8\n1064.90\n238.3\n2917.158\n1938.6\n37231\n0.7293328\n0.6055800\n\n\nZhuzhou\nZhuzhou\n37191\n5395.6\n4777.7\n507.04\n1408.80\n7962.1\n27589\n6768.90\n2970.20\n11407.0\n1032\n210.380\n177.0\n106.0\n12.436\n11.824\n92.200\n85.2\n82\n210.6\n2538.40\n289.6\n4236.370\n10883.0\n103228\n0.7272099\n0.8413347\n\n\nZixing\nChenzhou\n34163\n7873.2\n14891.0\n1556.00\n2679.00\n22261.0\n65706\n51921.00\n5014.70\n10838.0\n1159\n261.980\n177.9\n76.0\n22.316\n14.760\n114.000\n86.3\n155\n140.2\n4835.80\n340.2\n2761.164\n3636.3\n21600\n0.4121105\n0.6790595\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\"  \n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "3.2 Visualising Regional Development Indicator",
    "text": "3.2 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", \n          size=0.3) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.9,\n            legend.text.size = 0.5)\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "4.1 Computing Contiguity Spatial Weights",
    "text": "4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\npoly2nb() of spdep package to compute contiguity weight matrices for the study area.\nThis function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options.\nDefault: Queen = TRUE, but if you change it to FALSE, you are using ROOK method.\nThe output that you will get is a list.\n\nThe code chunk below will be used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nInterpretation\n\nThere are 88 area units in Hunan.\nMost connected area unit has 11 neighbours.\nThere are 2 area units with only 1 neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "4.5 Global Spatial Autocorrelation: Geary’s",
    "text": "4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nDescriptionGeary’s C testComputing Monte Carlo Geary’s CVisualising the Monte Carlo Geary’s C\n\n\nDescribes how features differ from their immediate neighbours.\n\n\nGeary c (\\(Z\\) value) is:\n\nLarge c value (&gt;1) : Dispersed, observations tend to be dissimilar;\nSmall c value (&lt;1) : Clustered, observations tend to be similar;\nc = 1: observations are arranged randomly over space.\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, \n           listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\nHere, the p-value is 0.0001526.\nWe will reject the null hypothesis at 99.9% as the p-value is smaller than our alpha value, 0.001.\nThe Geary C statistic is 0.6907223 which is &lt; 1, hence the spatial pattern is “clustered”.\n\n\n\n\nPerforms permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\nAfter running 1000 simulations, the p-value is now = 0.001.\nHence, we will accept / cannot reject the null hypothesis at 99.9% as the p-value is equal to our alpha value, 0.001.\nThe Geary C statistic is now, 0.69072, which is still &lt; 1, hence the spatial pattern is “clustered”.\n\n\n\n\nPlot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\n\nShow the code\npar(bg = '#E4D5C9')\n\nmean(bperm$res[1:999])\n\n\n[1] 1.004402\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.007436493\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nShow the code\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     col = \"#efe7df\",\n     xlab=\"Simulated Geary c\")\n\nabline(v=1, \n       col=\"#800200\",\n       lwd = 3,\n       lty = 2) \n\n\n\n\n\n\nplot2 &lt;- bperm$res\nmu &lt;- mean(plot2)\n\nggplot(data=data.frame(plot2),\n       aes(x=plot2)\n  ) +\n  geom_histogram(\n    bins=30,\n    fill=\"#efe7df\",\n    color=\"black\",\n    size=0.2\n  ) +\n  geom_vline(\n    xintercept = mu,\n    color=\"#800200\",\n    linetype = \"longdash\",\n    size = 1\n  ) +\n  labs(title =\"Histogram of Monte Carlo Geary's Cs\",\n    x = \"Simulated Geary's C\",\n    y = \"Frequency\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title.x = element_text(size = 8),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.ticks = element_blank(),\n    axis.text = element_text(size = 6),\n    plot.background = element_rect(fill = \"#E4D5C9\", color = \"#E4D5C9\"),\n    panel.background = element_rect(fill = \"#E4D5C9\", color = \"#E4D5C9\")\n  )\n\n\n\n\n\nQuestion: What statistical observation can you draw from the output?\nThe distribution is close to a normal distribution, with more values in the center of the histogram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 5: Global Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nLocalised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nGetis and Ord’s G-Statistics\n\nUsed to to detect spatial anomalies is the Getis and Ord’s G-statistics .\nLooks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n1. Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroidDetermine the cut-off distanceComputing fixed distance weight matrixComputing adaptive distance weight matrix\n\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\nThe output spatial weights object is called wm62_lw.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n2. Computing Gi statistics\n\nGi statistics using fixed distanceMapping Gi values with fixed distance weightsGi statistics using adaptive distanceMapping Gi values with adaptive distance weights\n\n\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nhunan.gi\n\nSimple feature collection with 88 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC      Z.GDPPC lag_GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667 -0.049205949  24847.20\n2   Changde 21100   Hanshou      County   Hanshou 20981 -0.228341158  22724.80\n3   Changde 21101    Jinshi County City    Jinshi 34592  0.679406172  24143.25\n4   Changde 21102        Li      County        Li 24473  0.004547952  27737.50\n5   Changde 21103     Linli      County     Linli 25554  0.076642204  27270.25\n6   Changde 21104    Shimen      County    Shimen 27137  0.182215933  21248.80\n7  Changsha 21109   Liuyang County City   Liuyang 63118  2.581867439  43747.00\n8  Changsha 21110 Ningxiang      County Ningxiang 62202  2.520777398  33582.71\n9  Changsha 21111 Wangcheng      County Wangcheng 70666  3.085260051  45651.17\n10 Chenzhou 21112     Anren      County     Anren 12761 -0.776550918  32027.62\n   gstat_fixed                       geometry\n1   0.43607584 POLYGON ((112.0625 29.75523...\n2  -0.26550565 POLYGON ((112.2288 29.11684...\n3  -0.07303367 POLYGON ((111.8927 29.6013,...\n4   0.41301703 POLYGON ((111.3731 29.94649...\n5   0.27307058 POLYGON ((111.6324 29.76288...\n6  -0.37751078 POLYGON ((110.8825 30.11675...\n7   2.86389882 POLYGON ((113.9905 28.5682,...\n8   2.79435042 POLYGON ((112.7181 28.38299...\n9   5.21612540 POLYGON ((112.7914 28.52688...\n10  0.22823660 POLYGON ((113.1757 26.82734...\n\n\nCode chunk above performs three tasks:\n\nas.matrix(): to convert the output vector (i.e. gi.fixed) into r matrix object by using .\ncbind(): to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nrename(): rename the field name of the gi values to gstat_fixed by using\n\n\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "4.2 Row-standardised weights matrix",
    "text": "4.2 Row-standardised weights matrix\n\nAssign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”).\nThis is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nStyle=“W” option used for this example for simplicity’s sake but more robust options are available, notably style=“B”.\n\nStyles:\n\nW: row standardised (sums over all links to n)\nB: basic binary coding\nC: globally standardised (sums over all links to n)\nU: equal to C divided by the number of neighbours (sums over all links to unity)\nS: variance-stabilizing coding scheme (sums over all links to n)\nminmax: divides the weights by min of the max row sums and max column sums of the input weights; similar to C/U\n\n\nThe input of *nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style=\"W\",\n                   zero.policy = TRUE) \nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy = TRUE allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy = FALSE would return an error.\nIf zero policy = TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length = length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#global-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#global-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation",
    "section": "4.3 Global Spatial Autocorrelation: Moran’s I",
    "text": "4.3 Global Spatial Autocorrelation: Moran’s I\n\nDescriptionMoran’s I testComputing Monte Carlo Moran’s IVisualise Monte Carlo Moran’s I\n\n\n\nDescribe how features differ from the values in the study area as a whole\nHypothesis:\n\n\\(H_0\\): Observed spatial patterns of values is equally likely as any other spatial pattern i.e. data is randomly disbursed, no spatial pattern\n\\(H_1\\): Data is more spatially clustered than expected by chance alone.\n\n\nMoran I (\\(Z\\) value) is:\n\npositive (I&gt;0): Clustered, observations tend to be similar;\nnegative(I&lt;0): Dispersed, observations tend to be dissimilar;\napproximately zero: observations are arranged randomly over space.\n\nMoran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\nThe p-value which is 1.095e-06, or 0.0000001095 which is very small\nWe will reject the null hypothesis at 99.9% as the p-value is smaller than our alpha value.\nSince the Moran I statistic 0.300749970 is &gt; 0 and is approaching 1 which is positive autocorrelation, we can infer that spatial patterns that we observed resemble a cluster.\n\nNote:\n\nWhen we accept or reject the null hypothesis, we have to mention at what confidence interval.\nOnce you select a confidence interval, it will translate into the alpha value or significance value.\nConfidence intervals:\n\n90% alpha value is 0.1, number of simulations: 100\n95 % alpha value 0.05,\n99 % alpha value 0.01,\n99.9 alpha value is 0.001 , number of simulations: 1000\n\n\n\n\n\nPermutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\n\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\nAfter 999 simulations, our P-value is 0.001.\nWe will accept / do not reject the null hypothesis at 99.9% as the p-value is equal to our alpha value 0.001.\nSince the Monte Carlo statistic 0.30075 is &gt; 0 and is approaching 1 which is positive autocorrelation, we can infer that spatial patterns that we observed resemble a cluster.\n\n\n\n\n\nUsing hist()\nPlot the distribution of the statistical values as histogram to examine the simulated Moran’s I test statistics in greater detail: hist() and abline() of R Graphics are used.\n\n\nShow the code\npar(bg = '#E4D5C9')\n\n\nmean(bperm$res[1:999])\n\n\n[1] -0.01504572\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.004371574\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nShow the code\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     col = \"#efe7df\",\n     xlab=\"Simulated Moran's I\")\n\nabline(v=0, \n       col=\"#800200\",\n       lwd = 3,\n       lty = 2) \n\n\n\n\n\n\n\nUsing ggplot\n\nplot2 &lt;- bperm$res\nmu &lt;- mean(plot2)\n\nggplot(data=data.frame(plot2),\n       aes(x=plot2)\n  ) +\n  geom_histogram(\n    bins=30,\n    fill=\"#efe7df\",\n    color=\"black\",\n    size=0.2\n  ) +\n  geom_vline(\n    xintercept = mu,\n    color=\"#800200\",\n    linetype = \"longdash\",\n    size = 1\n  ) +\n  labs(title =\"Histogram of Monte Carlo Moran's Is\",\n    x = \"Simulated Moran's I\",\n    y = \"Frequency\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 10, hjust = 0.5),\n    axis.title.x = element_text(size = 8),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.ticks = element_blank(),\n    axis.text = element_text(size = 6),\n    plot.background = element_rect(fill = \"#E4D5C9\", color = \"#E4D5C9\"),\n    panel.background = element_rect(fill = \"#E4D5C9\", color = \"#E4D5C9\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#loading-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#loading-the-data",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "3.1 Loading the Data",
    "text": "3.1 Loading the Data\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefileImport csv filePerforming relational join\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R.\n\n#output: simple features object\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nShape_Leng\nShape_Area\nCounty\ngeometry\n\n\n\n\nChangde\n21098\nAnxiang\nCounty\n1.8690742\n0.1005619\nAnxiang\nPOLYGON ((112.0625 29.75523...\n\n\nChangde\n21100\nHanshou\nCounty\n2.3606914\n0.1997875\nHanshou\nPOLYGON ((112.2288 29.11684...\n\n\nChangde\n21101\nJinshi\nCounty City\n1.4256199\n0.0530241\nJinshi\nPOLYGON ((111.8927 29.6013,...\n\n\nChangde\n21102\nLi\nCounty\n3.4743245\n0.1890812\nLi\nPOLYGON ((111.3731 29.94649...\n\n\nChangde\n21103\nLinli\nCounty\n2.2895061\n0.1145036\nLinli\nPOLYGON ((111.6324 29.76288...\n\n\nChangde\n21104\nShimen\nCounty\n4.1719181\n0.3719471\nShimen\nPOLYGON ((110.8825 30.11675...\n\n\nChangsha\n21109\nLiuyang\nCounty City\n4.0605788\n0.4601679\nLiuyang\nPOLYGON ((113.9905 28.5682,...\n\n\nChangsha\n21110\nNingxiang\nCounty\n3.3237542\n0.2661420\nNingxiang\nPOLYGON ((112.7181 28.38299...\n\n\nChangsha\n21111\nWangcheng\nCounty\n2.2920930\n0.1304916\nWangcheng\nPOLYGON ((112.7914 28.52688...\n\n\nChenzhou\n21112\nAnren\nCounty\n2.2407387\n0.1334394\nAnren\nPOLYGON ((113.1757 26.82734...\n\n\nChenzhou\n21115\nGuidong\nCounty\n2.0467289\n0.1285299\nGuidong\nPOLYGON ((114.1799 26.20117...\n\n\nChenzhou\n21117\nJiahe\nCounty\n1.5038242\n0.0631237\nJiahe\nPOLYGON ((112.4425 25.74358...\n\n\nChenzhou\n21118\nLinwu\nCounty\n2.0512481\n0.1244964\nLinwu\nPOLYGON ((112.5914 25.55143...\n\n\nChenzhou\n21119\nRucheng\nCounty\n2.7155640\n0.2176296\nRucheng\nPOLYGON ((113.6759 25.87578...\n\n\nChenzhou\n21120\nYizhang\nCounty\n3.2765386\n0.1935418\nYizhang\nPOLYGON ((113.2621 25.68394...\n\n\nChenzhou\n21121\nYongxing\nCounty\n2.9211528\n0.1767181\nYongxing\nPOLYGON ((113.3169 26.41843...\n\n\nChenzhou\n21122\nZixing\nCounty City\n2.6995368\n0.2476280\nZixing\nPOLYGON ((113.7311 26.16259...\n\n\nHengyang\n21123\nChangning\nCounty City\n2.4013569\n0.1863642\nChangning\nPOLYGON ((112.6144 26.60198...\n\n\nHengyang\n21124\nHengdong\nCounty\n2.7098301\n0.1756985\nHengdong\nPOLYGON ((113.1056 27.21007...\n\n\nHengyang\n21125\nHengnan\nCounty\n3.7804926\n0.2408050\nHengnan\nPOLYGON ((112.7599 26.98149...\n\n\nHengyang\n21126\nHengshan\nCounty\n2.3513543\n0.0899128\nHengshan\nPOLYGON ((112.607 27.4689, ...\n\n\nHengyang\n21129\nLeiyang\nCounty\n2.7427498\n0.2426073\nLeiyang\nPOLYGON ((112.9996 26.69276...\n\n\nHengyang\n21130\nQidong\nCounty\n3.0714217\n0.1733332\nQidong\nPOLYGON ((111.7818 27.0383,...\n\n\nHuaihua\n21131\nChenxi\nCounty\n3.0228314\n0.1821929\nChenxi\nPOLYGON ((110.2624 28.21778...\n\n\nHuaihua\n21134\nZhongfang\nCounty\n2.9023763\n0.1994978\nZhongfang\nPOLYGON ((109.9431 27.72858...\n\n\nHuaihua\n21135\nHuitong\nCounty\n3.1096821\n0.2053454\nHuitong\nPOLYGON ((109.9419 27.10512...\n\n\nHuaihua\n21136\nJingzhou\nCounty\n2.8584583\n0.1988991\nJingzhou\nPOLYGON ((109.8186 26.75842...\n\n\nHuaihua\n21137\nMayang\nAutonomous County\n2.3274351\n0.1462606\nMayang\nPOLYGON ((109.795 27.98008,...\n\n\nHuaihua\n21138\nTongdao\nAutonomous County\n2.5711292\n0.2021613\nTongdao\nPOLYGON ((109.9294 26.46561...\n\n\nHuaihua\n21139\nXinhuang\nAutonomous County\n2.1443973\n0.1377764\nXinhuang\nPOLYGON ((109.227 27.43733,...\n\n\nHuaihua\n21140\nXupu\nCounty\n4.0350213\n0.3136471\nXupu\nPOLYGON ((110.7189 28.30485...\n\n\nHuaihua\n21141\nYuanling\nCounty\n4.1642914\n0.5345233\nYuanling\nPOLYGON ((110.9652 28.99895...\n\n\nHuaihua\n21142\nZhijiang\nAutonomous County\n2.4452310\n0.1906027\nZhijiang\nPOLYGON ((109.8818 27.60661...\n\n\nLoudi\n21143\nLengshuijiang\nCounty City\n0.9753557\n0.0372343\nLengshuijiang\nPOLYGON ((111.5307 27.81472...\n\n\nLoudi\n21146\nShuangfeng\nCounty\n2.4012680\n0.1565776\nShuangfeng\nPOLYGON ((112.263 27.70421,...\n\n\nLoudi\n21147\nXinhua\nCounty\n3.3284533\n0.3361624\nXinhua\nPOLYGON ((111.3345 28.19642...\n\n\nShaoyang\n21148\nChengbu\nAutonomous County\n2.9374722\n0.2362023\nChengbu\nPOLYGON ((110.4455 26.69317...\n\n\nYongzhou\n21149\nDongan\nDistrict\n3.2132100\n0.1983914\nDongan\nPOLYGON ((111.4531 26.86812...\n\n\nShaoyang\n21150\nDongkou\nCounty\n2.9425568\n0.1971258\nDongkou\nPOLYGON ((110.6622 27.37305...\n\n\nShaoyang\n21151\nLonghui\nCounty\n2.7208650\n0.2578820\nLonghui\nPOLYGON ((110.985 27.65983,...\n\n\nShaoyang\n21152\nShaodong\nCounty\n2.3029031\n0.1701016\nShaodong\nPOLYGON ((111.9054 27.40254...\n\n\nShaoyang\n21155\nSuining\nCounty\n3.3043615\n0.2659378\nSuining\nPOLYGON ((110.389 27.10006,...\n\n\nShaoyang\n21156\nWugang\nCounty City\n2.2565865\n0.1400498\nWugang\nPOLYGON ((110.9878 27.03345...\n\n\nShaoyang\n21157\nXinning\nCounty\n3.3414094\n0.2487593\nXinning\nPOLYGON ((111.0736 26.84627...\n\n\nShaoyang\n21158\nXinshao\nCounty\n2.2955891\n0.1658312\nXinshao\nPOLYGON ((111.6013 27.58275...\n\n\nXiangtan\n21159\nShaoshan\nCounty City\n0.7722034\n0.0212792\nShaoshan\nPOLYGON ((112.5391 27.97742...\n\n\nXiangtan\n21162\nXiangxiang\nCounty City\n3.0755761\n0.1840808\nXiangxiang\nPOLYGON ((112.4549 28.05783...\n\n\nXiangxi Tujia and Miao\n21163\nBaojing\nCounty\n2.5569785\n0.1606901\nBaojing\nPOLYGON ((109.7015 28.82844...\n\n\nXiangxi Tujia and Miao\n21164\nFenghuang\nCounty\n2.2928893\n0.1596618\nFenghuang\nPOLYGON ((109.5239 28.19206...\n\n\nXiangxi Tujia and Miao\n21165\nGuzhang\nCounty\n1.7973808\n0.1202073\nGuzhang\nPOLYGON ((109.8968 28.74034...\n\n\nXiangxi Tujia and Miao\n21166\nHuayuan\nCounty\n1.7921938\n0.1025162\nHuayuan\nPOLYGON ((109.5647 28.61712...\n\n\nXiangxi Tujia and Miao\n21167\nJishou\nCounty City\n1.8826069\n0.0973363\nJishou\nPOLYGON ((109.8375 28.4696,...\n\n\nXiangxi Tujia and Miao\n21168\nLongshan\nCounty\n2.9782522\n0.2919091\nLongshan\nPOLYGON ((109.6337 29.62521...\n\n\nXiangxi Tujia and Miao\n21169\nLuxi\nCounty\n2.2051733\n0.1434018\nLuxi\nPOLYGON ((110.1067 28.41835...\n\n\nXiangxi Tujia and Miao\n21170\nYongshun\nCounty\n3.0959707\n0.3551324\nYongshun\nPOLYGON ((110.0003 29.29499...\n\n\nYiyang\n21171\nAnhua\nCounty\n4.5835050\n0.4510648\nAnhua\nPOLYGON ((111.6034 28.63716...\n\n\nYiyang\n21172\nNan\nCounty\n2.3011103\n0.1247939\nNan\nPOLYGON ((112.3232 29.46074...\n\n\nYiyang\n21176\nYuanjiang\nCounty City\n2.3268236\n0.1886048\nYuanjiang\nPOLYGON ((112.4391 29.1791,...\n\n\nYongzhou\n21178\nJianghua\nAutonomous County\n3.3360379\n0.2927690\nJianghua\nPOLYGON ((111.6461 25.29661...\n\n\nYongzhou\n21180\nLanshan\nCounty\n2.3556792\n0.1603531\nLanshan\nPOLYGON ((112.2286 25.61123...\n\n\nYongzhou\n21183\nNingyuan\nCounty\n3.3322291\n0.2266737\nNingyuan\nPOLYGON ((112.0715 26.09892...\n\n\nYongzhou\n21185\nShuangpai\nCounty\n2.3877440\n0.1540255\nShuangpai\nPOLYGON ((111.8864 26.11957...\n\n\nYongzhou\n21186\nXintian\nCounty\n1.7274574\n0.0894019\nXintian\nPOLYGON ((112.2578 26.0796,...\n\n\nYueyang\n21187\nHuarong\nCounty\n2.8178435\n0.1678359\nHuarong\nPOLYGON ((112.9242 29.69134...\n\n\nYueyang\n21188\nLinxiang\nCounty City\n2.5975997\n0.1568525\nLinxiang\nPOLYGON ((113.5502 29.67418...\n\n\nYueyang\n21189\nMiluo\nCounty City\n2.4474057\n0.1497881\nMiluo\nPOLYGON ((112.9902 29.02139...\n\n\nYueyang\n21190\nPingjiang\nCounty\n3.2177944\n0.3786800\nPingjiang\nPOLYGON ((113.8436 29.06152...\n\n\nYueyang\n21191\nXiangyin\nCounty\n2.3515063\n0.1491429\nXiangyin\nPOLYGON ((112.9173 28.98264...\n\n\nZhangjiajie\n21194\nCili\nCounty\n2.8940385\n0.3232206\nCili\nPOLYGON ((110.8822 29.69017...\n\n\nZhuzhou\n21197\nChaling\nCounty\n2.2375615\n0.2278921\nChaling\nPOLYGON ((113.7666 27.10573...\n\n\nZhuzhou\n21198\nLiling\nCounty City\n2.2435440\n0.1960655\nLiling\nPOLYGON ((113.5673 27.94346...\n\n\nZhuzhou\n21199\nYanling\nCounty\n2.1078954\n0.1849090\nYanling\nPOLYGON ((113.9292 26.6154,...\n\n\nZhuzhou\n21200\nYou\nCounty\n2.8904505\n0.2436366\nYou\nPOLYGON ((113.5879 27.41324...\n\n\nZhuzhou\n21201\nZhuzhou\nDistrict\n0.9331877\n0.0373488\nZhuzhou\nPOLYGON ((113.2493 28.02411...\n\n\nZhangjiajie\n21196\nSangzhi\nCounty\n3.3475449\n0.3216362\nSangzhi\nPOLYGON ((110.556 29.40543,...\n\n\nYueyang\n21192\nYueyang\nDistrict\n2.5710437\n0.1047594\nYueyang\nPOLYGON ((113.343 29.61064,...\n\n\nYongzhou\n21184\nQiyang\nCounty\n3.1835301\n0.2275458\nQiyang\nPOLYGON ((111.5563 26.81318...\n\n\nYiyang\n21173\nTaojiang\nCounty\n2.6080229\n0.1905982\nTaojiang\nPOLYGON ((112.0508 28.67265...\n\n\nShaoyang\n21153\nShaoyang\nCounty City\n0.9765399\n0.0316779\nShaoyang\nPOLYGON ((111.5013 27.30207...\n\n\nLoudi\n21144\nLianyuan\nCounty City\n2.8007253\n0.2057341\nLianyuan\nPOLYGON ((111.6789 28.02946...\n\n\nHuaihua\n21132\nHongjiang\nDistrict\n3.3031522\n0.1994795\nHongjiang\nPOLYGON ((110.1441 27.47513...\n\n\nHengyang\n21127\nHengyang\nCounty City\n0.9035944\n0.0349171\nHengyang\nPOLYGON ((112.7144 26.98613...\n\n\nChenzhou\n21116\nGuiyang\nCounty\n3.6939698\n0.2668106\nGuiyang\nPOLYGON ((113.0811 26.04963...\n\n\nChangsha\n21107\nChangsha\nDistrict\n0.9536480\n0.0320942\nChangsha\nPOLYGON ((112.9421 28.03722...\n\n\nChangde\n21105\nTaoyuan\nCounty\n4.1225866\n0.4126555\nTaoyuan\nPOLYGON ((112.0612 29.32855...\n\n\nXiangtan\n21160\nXiangtan\nCounty City\n0.8480602\n0.0253653\nXiangtan\nPOLYGON ((113.0426 27.8942,...\n\n\nYongzhou\n21177\nDao\nCounty\n2.7674949\n0.2206642\nDao\nPOLYGON ((111.498 25.81679,...\n\n\nYongzhou\n21179\nJiangyong\nCounty\n2.2995970\n0.1473782\nJiangyong\nPOLYGON ((111.3659 25.39472...\n\n\n\n\n\n\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package.\n\n#output: R dataframe class\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\n\n\nCounty\nCity\navg_wage\ndeposite\nFAI\nGov_Rev\nGov_Exp\nGDP\nGDPPC\nGIO\nLoan\nNIPCR\nBed\nEmp\nEmpR\nEmpRT\nPri_Stu\nSec_Stu\nHousehold\nHousehold_R\nNOIP\nPop_R\nRSCG\nPop_T\nAgri\nService\nDisp_Inc\nRORP\nROREmp\n\n\n\n\nAnhua\nYiyang\n30544\n10967.0\n6831.7\n456.72\n2703.00\n13225.0\n14567\n9276.90\n3954.90\n3528.3\n2718\n494.310\n441.4\n338.0\n54.175\n32.830\n290.400\n234.5\n101\n670.3\n5760.60\n910.8\n4942.253\n5414.5\n12373\n0.7359464\n0.8929619\n\n\nAnren\nChenzhou\n28058\n4598.9\n6386.1\n220.57\n1454.70\n4941.2\n12761\n4189.20\n2555.30\n3271.8\n970\n290.820\n255.4\n99.4\n33.171\n17.505\n104.600\n121.9\n34\n243.2\n2386.40\n388.7\n2357.764\n3814.1\n16072\n0.6256753\n0.8782065\n\n\nAnxiang\nChangde\n31935\n5517.2\n3541.0\n243.64\n1779.50\n12482.0\n23667\n5108.90\n2806.90\n7693.7\n1931\n336.390\n270.5\n205.9\n19.584\n17.819\n148.100\n135.4\n53\n346.0\n3957.90\n528.3\n4524.410\n14100.0\n16610\n0.6549309\n0.8041262\n\n\nBaojing\nHunan West\n30843\n2250.0\n1005.4\n192.59\n1379.10\n4087.9\n14563\n3623.50\n1253.70\n4191.3\n927\n195.170\n145.6\n116.4\n19.249\n11.831\n73.200\n69.9\n18\n184.1\n768.04\n281.3\n1118.561\n541.8\n13455\n0.6544614\n0.7460163\n\n\nChaling\nZhuzhou\n31251\n8241.4\n6508.4\n620.19\n1947.00\n11585.0\n20078\n9157.70\n4287.40\n3887.7\n1449\n330.290\n299.0\n154.0\n33.906\n20.548\n148.700\n139.4\n106\n301.6\n4009.50\n578.4\n3793.550\n5444.0\n20461\n0.5214385\n0.9052651\n\n\nChangning\nHengyang\n28518\n10860.0\n7920.0\n769.86\n2631.60\n19886.0\n24418\n37392.00\n4242.80\n9528.0\n3605\n548.610\n415.1\n273.7\n81.831\n44.485\n211.200\n211.7\n115\n448.2\n5220.40\n816.3\n6430.782\n13074.6\n20868\n0.5490628\n0.7566395\n\n\nChangsha\nChangsha\n54540\n24332.0\n33624.0\n5350.00\n7885.50\n88009.0\n88656\n51361.00\n40534.00\n17070.0\n3310\n670.820\n452.0\n219.4\n59.151\n39.685\n300.300\n248.4\n214\n475.1\n22604.00\n998.6\n13107.148\n17726.6\n183252\n0.4757661\n0.6738022\n\n\nChengbu\nShaoyang\n28597\n2580.6\n1922.3\n160.73\n1191.60\n2569.5\n10132\n1681.40\n1232.00\n3271.8\n582\n162.480\n127.6\n94.4\n18.751\n7.869\n76.100\n59.6\n17\n189.6\n1173.80\n256.7\n1356.950\n1215.1\n12379\n0.7386054\n0.7853274\n\n\nChenxi\nHuaihua\n33580\n4990.0\n5818.4\n460.49\n1724.20\n7755.2\n17026\n6644.50\n3220.00\n4777.0\n2170\n308.430\n214.4\n174.8\n26.706\n14.591\n139.500\n110.5\n55\n311.7\n2570.60\n456.7\n2257.520\n1306.3\n14595\n0.6825049\n0.6951334\n\n\nCili\nZhangjiajie\n33099\n8116.9\n4498.1\n499.77\n2306.20\n11378.0\n18714\n5843.30\n5503.40\n5031.8\n2179\n381.200\n334.8\n264.3\n34.918\n27.020\n211.400\n174.5\n70\n379.4\n3116.90\n610.4\n3112.731\n5005.6\n15603\n0.6215596\n0.8782791\n\n\nDao\nYongzhou\n32541\n7245.0\n7922.0\n461.66\n2013.50\n11034.0\n18059\n2393.80\n2873.50\n9000.0\n1588\n381.530\n344.3\n178.3\n65.790\n31.430\n158.700\n157.9\n44\n388.2\n2898.80\n613.6\n5602.035\n8411.1\n16305\n0.6326597\n0.9024192\n\n\nDongan\nYongzhou\n36713\n6549.3\n9158.0\n434.07\n1720.60\n11495.0\n20901\n11597.00\n3320.60\n9116.7\n1305\n322.250\n278.1\n163.6\n39.419\n20.661\n166.500\n163.0\n84\n366.0\n3106.30\n551.2\n4866.481\n6784.4\n20265\n0.6640058\n0.8629946\n\n\nDongkou\nShaoyang\n31483\n9489.6\n8703.2\n374.96\n2209.50\n10286.0\n13240\n10568.00\n4120.30\n3792.5\n1620\n583.560\n499.2\n263.2\n69.845\n43.194\n262.400\n220.4\n74\n523.1\n3229.10\n780.9\n6025.184\n9116.8\n15375\n0.6698681\n0.8554390\n\n\nFenghuang\nHunan West\n31608\n4008.7\n2550.0\n406.51\n1763.60\n4681.2\n13382\n848.99\n2863.00\n4681.2\n1212\n250.730\n195.4\n151.8\n33.379\n17.690\n90.100\n80.5\n17\n255.5\n2605.40\n351.3\n1206.261\n651.1\n14281\n0.7272986\n0.7793244\n\n\nGuidong\nChenzhou\n30149\n2200.1\n2512.9\n111.19\n880.00\n1955.9\n8497\n1202.60\n1437.20\n3130.4\n567\n138.530\n115.2\n56.9\n13.437\n7.091\n64.800\n65.4\n14\n150.1\n486.10\n231.8\n630.016\n911.1\n12290\n0.6475410\n0.8315888\n\n\nGuiyang\nChenzhou\n41394\n9664.8\n15712.0\n1309.20\n2727.50\n23023.0\n32853\n36820.00\n4860.10\n10271.0\n2237\n517.180\n430.9\n242.0\n69.344\n33.568\n231.800\n217.5\n127\n420.4\n6281.80\n704.1\n8804.639\n14791.5\n64517\n0.5970743\n0.8331722\n\n\nGuzhang\nHunan West\n28610\n1563.8\n1021.7\n108.40\n959.60\n1490.4\n11580\n513.95\n849.56\n3595.9\n392\n98.421\n74.6\n56.7\n8.718\n6.288\n35.200\n31.4\n10\n85.2\n354.48\n129.0\n527.230\n504.0\n11954\n0.6604651\n0.7579683\n\n\nHanshou\nChangde\n32265\n7979.0\n8665.0\n386.13\n2062.40\n15788.0\n20981\n13491.00\n4550.00\n8269.9\n2560\n456.780\n388.8\n246.7\n42.097\n33.029\n240.200\n208.7\n95\n553.2\n4460.50\n804.6\n6545.350\n17727.0\n18925\n0.6875466\n0.8511756\n\n\nHengdong\nHengyang\n30992\n8661.0\n6665.0\n542.25\n1937.40\n17409.0\n27485\n17305.00\n4118.00\n10829.0\n1859\n388.340\n284.5\n201.0\n48.983\n36.120\n164.400\n167.4\n96\n426.4\n5127.00\n634.9\n5972.961\n11278.5\n19800\n0.6716018\n0.7326054\n\n\nHengnan\nHengyang\n28031\n3288.9\n9531.4\n804.91\n2894.40\n21019.0\n21911\n20953.00\n4013.00\n9872.9\n2173\n601.570\n503.6\n354.0\n76.933\n57.519\n256.000\n274.3\n118\n629.1\n5752.60\n961.4\n8624.680\n15914.0\n18683\n0.6543582\n0.8371428\n\n\nHengshan\nHengyang\n28688\n5944.6\n4871.1\n451.46\n1393.70\n9718.9\n25172\n8571.50\n2221.50\n10619.0\n966\n291.120\n261.9\n158.8\n28.997\n20.909\n103.700\n101.0\n89\n256.4\n1713.70\n387.0\n3505.269\n6233.5\n17732\n0.6625323\n0.8996290\n\n\nHengyang\nHengyang\n27760\n14680.0\n11145.0\n597.66\n2778.80\n21495.0\n19382\n18288.00\n5549.60\n10313.0\n2632\n686.520\n500.2\n313.6\n88.917\n64.674\n299.200\n247.7\n120\n733.4\n5386.30\n1111.6\n12451.938\n23139.2\n124392\n0.6597697\n0.7286022\n\n\nHongjiang\nHuaihua\n37686\n5966.0\n6515.5\n623.95\n2067.80\n7355.5\n17733\n13750.00\n3272.20\n6553.5\n1161\n229.400\n199.9\n132.0\n23.614\n18.837\n136.100\n124.7\n76\n260.9\n1744.20\n415.8\n2588.250\n202.8\n27334\n0.6274651\n0.8714037\n\n\nHuarong\nYueyang\n26832\n8116.4\n14292.0\n365.84\n1933.90\n21654.0\n30413\n40193.00\n4564.80\n10367.0\n1500\n442.970\n359.2\n252.9\n31.601\n26.933\n202.300\n170.2\n151\n430.3\n6348.90\n714.1\n7690.520\n10050.6\n21501\n0.6025767\n0.8108901\n\n\nHuayuan\nHunan West\n31708\n3669.8\n2200.0\n331.78\n1503.70\n5905.9\n20337\n9257.60\n2463.60\n4353.8\n1240\n214.790\n149.8\n94.9\n23.831\n14.031\n76.900\n59.9\n74\n188.1\n1024.70\n291.1\n883.722\n533.2\n15467\n0.6461697\n0.6974254\n\n\nHuitong\nHuaihua\n33693\n4615.0\n2617.4\n295.00\n1306.70\n4588.3\n14334\n2095.60\n1369.30\n4631.9\n1194\n246.150\n193.5\n143.7\n20.603\n13.337\n96.700\n114.4\n25\n234.5\n1061.70\n320.9\n1580.090\n5.2\n13989\n0.7307572\n0.7861060\n\n\nJiahe\nChenzhou\n36023\n5493.1\n4864.3\n453.68\n1331.50\n9608.2\n32091\n14882.00\n1906.50\n7903.3\n719\n242.800\n198.9\n83.0\n36.054\n19.497\n99.000\n108.5\n100\n179.6\n1365.90\n301.3\n2276.272\n3230.2\n17744\n0.5960836\n0.8191928\n\n\nJianghua\nYongzhou\n34378\n4586.4\n4631.5\n309.70\n1651.40\n6555.9\n15801\n3357.10\n2976.00\n3225.3\n1663\n306.310\n272.7\n188.9\n37.494\n20.644\n109.900\n116.1\n33\n285.1\n2384.80\n416.7\n3272.511\n10533.8\n16274\n0.6841853\n0.8902746\n\n\nJiangyong\nYongzhou\n30250\n3198.2\n3942.5\n187.23\n1009.10\n4012.2\n17168\n2022.70\n1201.20\n3253.9\n720\n153.580\n132.8\n94.3\n21.936\n11.093\n68.300\n61.2\n25\n163.5\n1238.20\n234.3\n2862.901\n9773.3\n16634\n0.6978233\n0.8646959\n\n\nJingzhou\nHuaihua\n33870\n3592.8\n2031.4\n237.51\n1129.00\n5007.7\n20348\n4534.10\n1566.50\n5397.3\n1054\n163.910\n112.6\n85.8\n16.978\n11.446\n69.100\n56.1\n32\n140.6\n1611.50\n246.7\n1769.328\n337.5\n12859\n0.5699230\n0.6869624\n\n\nJinshi\nChangde\n28692\n4581.7\n4777.0\n373.31\n1148.40\n8706.9\n34592\n10935.00\n2242.00\n8169.9\n848\n122.780\n82.1\n61.7\n8.723\n7.592\n81.900\n43.7\n77\n92.4\n3683.00\n251.8\n2562.460\n7525.0\n19498\n0.3669579\n0.6686757\n\n\nJishou\nHunan West\n39816\n9586.2\n5235.0\n470.22\n1738.20\n9631.5\n31537\n6345.70\n8282.90\n4823.0\n3790\n213.420\n97.0\n62.4\n25.454\n21.941\n99.200\n46.5\n49\n85.2\n5651.00\n306.6\n849.010\n611.6\n17980\n0.2778865\n0.4545029\n\n\nLanshan\nYongzhou\n33756\n4236.0\n3986.7\n296.68\n1194.60\n6627.2\n20088\n5392.10\n1599.40\n8672.1\n1144\n233.390\n201.5\n131.6\n32.448\n16.299\n83.300\n90.7\n52\n198.2\n2234.20\n330.9\n2262.021\n10341.9\n19161\n0.5989725\n0.8633618\n\n\nLeiyang\nHengyang\n32814\n15393.0\n18687.0\n1535.20\n3819.00\n30213.0\n26105\n42707.00\n7409.20\n10611.0\n2531\n750.120\n553.7\n405.8\n112.200\n56.350\n338.100\n281.2\n155\n629.3\n7268.10\n1160.2\n8349.199\n19981.6\n19634\n0.5424065\n0.7381486\n\n\nLengshuijiang\nLoudi\n35647\n6805.3\n9746.8\n1054.20\n2105.30\n21243.0\n64257\n36926.00\n8936.60\n10441.0\n1413\n191.320\n101.8\n61.8\n29.639\n20.113\n112.400\n56.9\n118\n78.4\n5750.60\n332.6\n1277.869\n991.8\n23120\n0.2357186\n0.5320928\n\n\nLi\nChangde\n32541\n13487.0\n16066.0\n709.61\n2459.50\n20322.0\n24473\n18402.00\n6748.00\n8377.0\n2038\n513.440\n426.8\n227.1\n38.975\n33.938\n268.500\n256.0\n96\n539.7\n7110.20\n832.5\n7562.340\n53160.0\n18985\n0.6482883\n0.8312558\n\n\nLianyuan\nLoudi\n30320\n8059.7\n9255.3\n707.45\n3298.60\n18340.0\n18346\n20515.00\n7243.20\n4307.7\n2260\n706.840\n612.9\n344.1\n71.232\n53.597\n316.200\n298.7\n154\n712.6\n6889.00\n1001.5\n7642.158\n5965.4\n38131\n0.7115327\n0.8670986\n\n\nLiling\nZhuzhou\n42896\n12865.0\n19125.0\n2602.60\n4221.40\n39553.0\n41491\n57146.00\n9398.10\n13347.0\n2797\n639.830\n513.1\n212.1\n53.992\n33.705\n248.400\n229.7\n482\n473.2\n11213.00\n958.0\n5373.990\n17378.0\n24185\n0.4939457\n0.8019318\n\n\nLinli\nChangde\n32667\n564.1\n7781.2\n336.86\n1538.70\n10355.0\n25554\n8214.00\n358.00\n8143.1\n1440\n307.360\n272.2\n100.8\n23.286\n18.943\n129.100\n157.2\n99\n246.6\n3604.90\n409.3\n3583.910\n7031.0\n18604\n0.6024921\n0.8856065\n\n\nLinwu\nChenzhou\n32031\n5984.0\n5734.3\n478.92\n1435.20\n8191.1\n23986\n6250.70\n2152.70\n7102.2\n959\n215.300\n184.1\n90.2\n41.913\n13.238\n101.500\n88.0\n67\n227.5\n2023.30\n342.8\n1606.947\n2632.2\n17966\n0.6636523\n0.8550859\n\n\nLinxiang\nYueyang\n31669\n5850.5\n10852.0\n319.20\n1609.00\n15968.0\n31897\n29988.00\n3788.20\n9739.0\n1289\n293.500\n212.5\n98.8\n36.202\n23.831\n138.600\n136.7\n123\n286.1\n4598.80\n502.3\n3357.477\n2994.6\n20628\n0.5695799\n0.7240204\n\n\nLiuyang\nChangsha\n40446\n21415.0\n43599.0\n2473.10\n4605.50\n81113.0\n63118\n99254.00\n23408.00\n15719.0\n6225\n919.620\n721.4\n300.1\n90.978\n58.819\n374.800\n369.8\n733\n642.7\n16233.00\n1285.5\n10844.470\n26617.8\n27345\n0.4999611\n0.7844544\n\n\nLonghui\nShaoyang\n33615\n11925.0\n8723.9\n425.06\n2741.60\n10511.0\n9572\n9317.90\n3985.50\n3177.6\n2726\n709.990\n604.4\n436.7\n95.163\n54.211\n344.600\n298.8\n85\n834.1\n2819.60\n1098.2\n4320.396\n3264.6\n12049\n0.7595156\n0.8512796\n\n\nLongshan\nHunan West\n34203\n5557.0\n2810.0\n218.53\n2052.40\n4933.6\n9754\n893.45\n2128.20\n4164.0\n1505\n334.420\n266.7\n167.5\n42.189\n30.946\n148.200\n126.1\n18\n345.8\n2293.90\n508.3\n2248.709\n921.5\n13138\n0.6803069\n0.7975001\n\n\nLuxi\nHunan West\n32680\n2946.8\n1772.0\n184.25\n1337.60\n4878.3\n17472\n7085.60\n1626.60\n4089.1\n664\n197.490\n149.7\n80.9\n21.683\n17.160\n82.400\n71.1\n42\n174.3\n917.41\n280.3\n1036.088\n540.8\n13247\n0.6218337\n0.7580131\n\n\nMayang\nHuaihua\n32772\n3456.0\n2703.1\n215.86\n1461.00\n4738.8\n13744\n3876.90\n2242.00\n4299.8\n975\n216.850\n160.0\n148.1\n24.173\n15.207\n90.300\n87.8\n33\n245.0\n1581.70\n345.6\n1865.938\n5.2\n14487\n0.7089120\n0.7378372\n\n\nMiluo\nYueyang\n36113\n4749.3\n15828.0\n1068.60\n2446.50\n29548.0\n42497\n66342.00\n3330.60\n9421.3\n965\n451.270\n303.3\n162.8\n40.221\n30.662\n204.900\n193.6\n269\n351.4\n5817.70\n697.0\n5688.717\n8978.5\n23379\n0.5041607\n0.6721032\n\n\nNan\nYiyang\n35272\n8921.7\n3367.5\n300.00\n1987.10\n15568.0\n21311\n11804.00\n4928.10\n8369.8\n1877\n366.100\n325.6\n226.1\n35.487\n29.444\n259.200\n201.3\n91\n455.9\n5266.20\n732.8\n7783.359\n6781.7\n17691\n0.6221343\n0.8893745\n\n\nNingxiang\nChangsha\n40744\n18662.0\n49234.0\n2448.90\n4812.20\n73250.0\n62202\n114145.00\n18435.00\n13763.0\n4351\n852.960\n757.6\n318.3\n80.715\n68.853\n391.700\n369.6\n552\n655.5\n15623.00\n1186.5\n12804.480\n18447.7\n24020\n0.5524652\n0.8882011\n\n\nNingyuan\nYongzhou\n34190\n7351.4\n7716.5\n514.24\n2234.40\n8984.3\n12697\n5627.80\n4249.40\n4151.5\n1753\n444.920\n401.3\n157.8\n68.336\n32.471\n185.500\n157.8\n64\n460.9\n3097.50\n710.2\n4283.431\n9958.4\n19742\n0.6489721\n0.9019599\n\n\nPingjiang\nYueyang\n30017\n8718.4\n10627.0\n461.62\n2827.00\n16444.0\n17252\n25647.00\n5201.20\n3780.8\n2205\n601.380\n512.8\n278.3\n73.943\n43.548\n260.900\n269.9\n136\n612.5\n3448.30\n957.5\n5060.948\n8789.3\n14883\n0.6396867\n0.8527054\n\n\nQidong\nHengyang\n30990\n13633.0\n6875.7\n463.91\n2413.20\n17718.0\n18001\n26260.00\n4246.10\n9020.6\n2055\n607.640\n529.2\n311.0\n80.694\n51.474\n289.200\n287.3\n115\n627.8\n6076.00\n986.4\n7380.180\n15451.7\n18256\n0.6364558\n0.8709104\n\n\nQiyang\nYongzhou\n32059\n14432.0\n14439.0\n499.51\n2710.50\n17705.0\n20638\n11567.00\n6388.30\n8816.0\n2799\n594.100\n495.2\n257.9\n75.936\n45.318\n241.900\n255.1\n107\n519.9\n3832.70\n860.7\n6273.597\n13568.8\n19776\n0.6040432\n0.8335297\n\n\nRucheng\nChenzhou\n35575\n4777.6\n3816.6\n343.00\n1492.70\n3756.0\n11286\n4492.20\n2426.20\n2993.7\n1130\n232.280\n197.3\n127.8\n33.101\n14.478\n111.300\n101.6\n43\n235.7\n751.80\n333.2\n2079.963\n1744.7\n13755\n0.7073830\n0.8494059\n\n\nSangzhi\nZhangjiajie\n33916\n3920.0\n3081.3\n248.06\n1856.10\n5615.4\n14624\n1694.80\n2981.20\n3405.9\n1999\n267.150\n234.5\n139.8\n31.278\n18.993\n127.900\n122.8\n28\n256.9\n1803.30\n385.5\n3607.897\n17585.8\n45167\n0.6664073\n0.8777840\n\n\nShaodong\nShaoyang\n31507\n16184.0\n12214.0\n771.60\n2757.00\n22898.0\n25246\n29175.00\n7855.30\n10089.0\n3080\n724.310\n547.7\n310.0\n99.082\n59.009\n363.200\n297.8\n148\n524.9\n8576.30\n912.1\n5704.602\n4679.3\n18296\n0.5754851\n0.7561679\n\n\nShaoshan\nXiangtan\n33314\n2626.4\n4500.0\n258.64\n683.65\n4956.8\n55570\n9717.60\n1649.00\n14916.0\n488\n73.652\n62.0\n33.6\n5.910\n3.201\n27.147\n30.4\n48\n57.7\n1200.80\n92.3\n807.714\n1630.3\n24991\n0.6251354\n0.8417966\n\n\nShaoyang\nShaoyang\n31783\n8345.7\n7237.3\n376.42\n2780.80\n9031.2\n9653\n7887.80\n2425.30\n3499.3\n2294\n655.130\n569.2\n385.0\n71.417\n43.525\n265.400\n247.9\n65\n657.6\n3406.30\n942.3\n5518.299\n21656.5\n65431\n0.6978669\n0.8688352\n\n\nShimen\nChangde\n33261\n8334.4\n10531.0\n548.33\n2178.80\n16293.0\n27137\n17795.00\n6026.50\n6156.0\n2502\n392.050\n329.6\n193.8\n29.245\n26.104\n190.600\n184.7\n122\n399.2\n6490.70\n600.5\n5266.510\n6981.0\n19275\n0.6647794\n0.8407091\n\n\nShuangfeng\nLoudi\n33684\n11455.0\n7904.9\n470.59\n2657.50\n15225.0\n17755\n16665.00\n3914.00\n5470.3\n1862\n559.470\n488.5\n309.6\n57.966\n41.575\n244.300\n245.6\n129\n644.6\n4596.00\n859.4\n7943.893\n2613.1\n14994\n0.7500582\n0.8731478\n\n\nShuangpai\nYongzhou\n33302\n1918.0\n3572.0\n226.37\n881.96\n3728.0\n21942\n2646.30\n2056.40\n4568.1\n408\n86.264\n68.0\n46.2\n11.339\n6.890\n57.600\n39.5\n34\n111.6\n567.21\n174.1\n1866.171\n9092.1\n18479\n0.6410109\n0.7882778\n\n\nSuining\nShaoyang\n31750\n4307.1\n3605.6\n222.40\n1442.50\n5658.1\n16069\n11150.00\n1566.40\n4990.4\n802\n264.080\n208.9\n145.2\n26.200\n14.261\n108.800\n86.3\n54\n268.4\n1761.50\n352.9\n2064.499\n1413.5\n15004\n0.7605554\n0.7910482\n\n\nTaojiang\nYiyang\n35184\n8657.4\n8743.0\n417.37\n2276.80\n15162.0\n19509\n18691.00\n4656.80\n8687.9\n2504\n472.800\n411.4\n194.0\n48.047\n33.234\n260.900\n208.8\n153\n504.5\n5355.90\n779.7\n13878.842\n13439.3\n79214\n0.6470437\n0.8701354\n\n\nTaoyuan\nChangde\n31877\n11948.0\n8656.0\n710.08\n2625.10\n19603.0\n22879\n16529.00\n4735.00\n7682.6\n2070\n558.770\n479.9\n300.5\n44.429\n36.630\n274.500\n272.0\n60\n607.4\n8926.00\n857.1\n18328.460\n50619.0\n60461\n0.7086688\n0.8588507\n\n\nTongdao\nHuaihua\n35400\n2578.0\n1525.4\n165.59\n1046.50\n2653.2\n12781\n2514.50\n1021.00\n3696.4\n882\n144.490\n105.5\n82.2\n15.913\n7.776\n57.900\n49.7\n27\n154.2\n749.14\n208.1\n981.418\n644.2\n12424\n0.7409899\n0.7301543\n\n\nWangcheng\nChangsha\n45171\n12122.0\n48829.0\n2285.50\n3802.30\n37488.0\n70666\n148976.00\n10330.00\n16495.0\n1678\n361.480\n268.6\n131.2\n28.838\n24.815\n161.300\n154.8\n314\n266.6\n5623.30\n533.4\n5222.356\n6648.6\n27690\n0.4998125\n0.7430563\n\n\nWugang\nShaoyang\n30573\n8618.0\n7373.3\n486.85\n2346.00\n9046.7\n12112\n5346.00\n3852.00\n4864.4\n2250\n483.620\n402.5\n271.4\n70.758\n43.683\n243.900\n194.0\n52\n502.9\n3476.00\n752.3\n4613.704\n1734.7\n15126\n0.6684833\n0.8322650\n\n\nXiangtan\nXiangtan\n35274\n15516.0\n10121.0\n1236.60\n3050.10\n22728.0\n27060\n30730.00\n12217.00\n10135.0\n2022\n610.490\n551.9\n347.1\n46.556\n54.439\n248.590\n239.1\n187\n574.0\n4889.10\n845.2\n10688.618\n40758.0\n69261\n0.6791292\n0.9040279\n\n\nXiangxiang\nXiangtan\n33040\n13298.0\n9819.0\n975.59\n2942.80\n23175.0\n29361\n39630.00\n7900.30\n9264.3\n2451\n586.400\n492.0\n324.5\n47.743\n39.612\n231.710\n242.0\n189\n535.7\n5891.80\n787.8\n6852.943\n17531.9\n22297\n0.6799949\n0.8390177\n\n\nXiangyin\nYueyang\n33169\n5466.1\n14714.0\n520.53\n2318.80\n23265.0\n33983\n49507.00\n5222.90\n8824.5\n1550\n466.110\n357.4\n169.4\n44.878\n30.752\n193.800\n190.1\n152\n408.4\n4273.20\n686.9\n6000.857\n8175.0\n19945\n0.5945552\n0.7667718\n\n\nXinhua\nLoudi\n32496\n11075.0\n6725.3\n576.47\n3599.50\n14940.0\n13398\n12152.00\n6121.20\n3342.4\n1542\n755.140\n677.9\n451.6\n96.224\n57.670\n316.600\n313.8\n112\n817.4\n5743.50\n1116.7\n6919.849\n3145.3\n13834\n0.7319782\n0.8977143\n\n\nXinhuang\nHuaihua\n31891\n2373.1\n2075.8\n170.11\n1069.30\n3782.1\n15412\n3405.70\n1265.20\n3935.6\n1350\n149.710\n105.6\n104.0\n15.938\n8.781\n72.000\n72.5\n36\n178.6\n873.45\n246.0\n1130.322\n785.8\n12732\n0.7260163\n0.7053637\n\n\nXinning\nShaoyang\n32067\n6126.3\n5978.8\n390.67\n1830.60\n6064.6\n10732\n3857.70\n2899.90\n3287.7\n1565\n429.840\n347.8\n227.4\n41.633\n22.005\n171.400\n146.5\n38\n383.6\n1445.90\n566.7\n2415.712\n2364.9\n13031\n0.6769014\n0.8091383\n\n\nXinshao\nShaoyang\n34199\n7344.2\n8313.8\n384.19\n2229.20\n8590.9\n11514\n10829.00\n5042.50\n3986.4\n2319\n577.690\n477.4\n265.8\n68.131\n39.034\n234.100\n213.0\n79\n533.6\n2941.60\n749.0\n3003.553\n5679.2\n13778\n0.7124166\n0.8263948\n\n\nXintian\nYongzhou\n33609\n3851.6\n3401.9\n250.31\n1280.20\n4776.4\n14426\n3357.40\n1334.90\n2894.9\n1264\n236.520\n217.1\n116.9\n32.138\n15.970\n93.800\n107.1\n42\n226.6\n1329.80\n332.1\n2530.482\n3134.3\n16925\n0.6823246\n0.9178928\n\n\nXupu\nHuaihua\n29873\n8675.5\n6112.2\n457.86\n2452.00\n10314.0\n13863\n6720.40\n4588.00\n5453.1\n2106\n512.610\n400.9\n292.3\n53.793\n29.166\n226.100\n211.2\n71\n516.0\n3427.30\n745.9\n4308.431\n242.6\n16558\n0.6917817\n0.7820760\n\n\nYanling\nZhuzhou\n34156\n3274.4\n5835.0\n402.90\n1038.20\n4250.5\n21021\n5855.80\n2379.60\n3608.4\n545\n116.180\n99.0\n54.0\n10.838\n6.682\n52.200\n46.0\n75\n112.2\n1241.20\n202.2\n971.500\n6851.0\n18652\n0.5548961\n0.8521260\n\n\nYizhang\nChenzhou\n33508\n7938.8\n9992.5\n750.40\n2142.60\n10455.0\n17814\n19120.00\n3697.00\n3788.6\n2280\n348.830\n279.9\n128.8\n63.564\n25.843\n161.300\n142.5\n169\n363.4\n5037.50\n588.9\n2521.831\n3584.6\n19318\n0.6170827\n0.8023966\n\n\nYongshun\nHunan West\n31234\n4516.9\n2464.1\n220.66\n2021.70\n4142.1\n9590\n1061.00\n2839.90\n3963.1\n1801\n312.990\n259.4\n195.7\n38.686\n24.854\n115.700\n113.9\n23\n292.5\n2247.30\n433.3\n2018.756\n845.8\n12650\n0.6750519\n0.8287805\n\n\nYongxing\nChenzhou\n33278\n7097.6\n13456.0\n1294.50\n2476.00\n21382.0\n37651\n43700.00\n3053.70\n9856.1\n1969\n375.500\n304.9\n133.5\n52.440\n19.765\n172.500\n145.7\n175\n333.5\n4807.10\n562.6\n3174.984\n4540.5\n19960\n0.5927835\n0.8119840\n\n\nYou\nZhuzhou\n36791\n9541.6\n15611.0\n1533.30\n2803.00\n25153.0\n36264\n32738.00\n6316.20\n13021.0\n1992\n472.320\n418.0\n254.3\n42.124\n31.908\n186.400\n196.9\n248\n344.4\n7654.80\n693.7\n6071.620\n27443.0\n22732\n0.4964682\n0.8849932\n\n\nYuanjiang\nYiyang\n33302\n7763.4\n10486.0\n509.45\n2381.20\n17603.0\n26258\n21082.00\n6464.20\n10060.0\n1856\n401.220\n335.2\n203.3\n34.220\n27.932\n260.300\n161.0\n105\n366.7\n5125.10\n672.5\n6644.520\n5899.6\n20552\n0.5452788\n0.8354519\n\n\nYuanling\nHuaihua\n37762\n5627.0\n5466.8\n677.40\n2202.60\n14156.0\n24194\n14835.00\n2485.30\n4265.4\n2501\n382.530\n283.9\n210.2\n33.935\n21.278\n166.500\n155.9\n56\n397.0\n3092.50\n586.5\n2508.387\n637.8\n15165\n0.6768968\n0.7421640\n\n\nYueyang\nYueyang\n31470\n4946.6\n15084.0\n330.43\n1971.60\n18974.0\n26360\n36800.00\n3668.70\n10377.0\n1616\n411.260\n293.3\n173.0\n40.218\n30.051\n201.500\n150.9\n158\n435.3\n5836.60\n721.7\n11279.478\n15381.2\n88494\n0.6031592\n0.7131741\n\n\nZhijiang\nHuaihua\n33582\n4306.1\n2802.2\n356.96\n1470.00\n6992.5\n20518\n4491.80\n2477.30\n4535.1\n935\n223.750\n175.5\n116.1\n23.693\n14.726\n101.800\n94.3\n56\n247.6\n2133.30\n341.6\n2576.470\n90.8\n13589\n0.7248244\n0.7843575\n\n\nZhongfang\nHuaihua\n34941\n1296.3\n7594.6\n348.83\n1048.00\n7332.1\n30846\n8608.50\n968.44\n6082.5\n662\n170.250\n103.1\n89.3\n12.709\n8.563\n71.100\n70.9\n56\n173.8\n1064.90\n238.3\n2917.158\n1938.6\n37231\n0.7293328\n0.6055800\n\n\nZhuzhou\nZhuzhou\n37191\n5395.6\n4777.7\n507.04\n1408.80\n7962.1\n27589\n6768.90\n2970.20\n11407.0\n1032\n210.380\n177.0\n106.0\n12.436\n11.824\n92.200\n85.2\n82\n210.6\n2538.40\n289.6\n4236.370\n10883.0\n103228\n0.7272099\n0.8413347\n\n\nZixing\nChenzhou\n34163\n7873.2\n14891.0\n1556.00\n2679.00\n22261.0\n65706\n51921.00\n5014.70\n10838.0\n1159\n261.980\n177.9\n76.0\n22.316\n14.760\n114.000\n86.3\n155\n140.2\n4835.80\n340.2\n2761.164\n3636.3\n21600\n0.4121105\n0.6790595\n\n\n\n\n\n\n\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\ncolnames(hunan)\n\n[1] \"NAME_2\"     \"ID_3\"       \"NAME_3\"     \"ENGTYPE_3\"  \"Shape_Leng\"\n[6] \"Shape_Area\" \"County\"     \"geometry\"  \n\n\n\ncolnames(hunan2012)\n\n [1] \"County\"      \"City\"        \"avg_wage\"    \"deposite\"    \"FAI\"        \n [6] \"Gov_Rev\"     \"Gov_Exp\"     \"GDP\"         \"GDPPC\"       \"GIO\"        \n[11] \"Loan\"        \"NIPCR\"       \"Bed\"         \"Emp\"         \"EmpR\"       \n[16] \"EmpRT\"       \"Pri_Stu\"     \"Sec_Stu\"     \"Household\"   \"Household_R\"\n[21] \"NOIP\"        \"Pop_R\"       \"RSCG\"        \"Pop_T\"       \"Agri\"       \n[26] \"Service\"     \"Disp_Inc\"    \"RORP\"        \"ROREmp\"     \n\n\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "3.2 Visualising Regional Development Indicator",
    "text": "3.2 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", \n          size=0.3) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.9,\n            legend.text.size = 0.5)\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "4.1 Computing Contiguity Spatial Weights",
    "text": "4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\npoly2nb() of spdep package to compute contiguity weight matrices for the study area.\nThis function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options.\nDefault: Queen = TRUE, but if you change it to FALSE, you are using ROOK method.\nThe output that you will get is a list.\n\nThe code chunk below will be used to compute Queen contiguity weight matrix:\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nInterpretation\n\nThere are 88 area units in Hunan.\nMost connected area unit has 11 neighbours.\nThere are 2 area units with only 1 neighbour."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "4.2 Row-standardised weights matrix",
    "text": "4.2 Row-standardised weights matrix\n\nAssign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”).\nThis is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nStyle=“W” option used for this example for simplicity’s sake but more robust options are available, notably style=“B”.\n\nStyles:\n\nW: row standardised (sums over all links to n)\nB: basic binary coding\nC: globally standardised (sums over all links to n)\nU: equal to C divided by the number of neighbours (sums over all links to unity)\nS: variance-stabilizing coding scheme (sums over all links to n)\nminmax: divides the weights by min of the max row sums and max column sums of the input weights; similar to C/U\n\n\nThe input of *nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\n\nrswm_q &lt;- nb2listw(wm_q,\n                   style=\"W\",\n                   zero.policy = TRUE) \nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy = TRUE allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy = FALSE would return an error.\nIf zero policy = TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length = length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#computing-local-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#computing-local-morans-i",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "4.3 Computing Local Moran’s I",
    "text": "4.3 Computing Local Moran’s I\nlocalmoran() function of spdep computes \\(I_i\\) values, given a set of \\(z_i\\) values and a listw object providing neighbour weighting information for the polygon associated with the zi values\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\n\nhead(localMI,10) %&gt;% \n  kable() %&gt;% \n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                            fixed_thead = T)\n\n\n\n\n\nIi\nE.Ii\nVar.Ii\nZ.Ii\nPr(z != E(Ii))\n\n\n\n\n-0.0014685\n-0.0000282\n0.0004724\n-0.0662690\n0.9471636\n\n\n0.0258782\n-0.0006062\n0.0101666\n0.2626643\n0.7928094\n\n\n-0.0119876\n-0.0053666\n0.1133362\n-0.0196670\n0.9843090\n\n\n0.0010225\n-0.0000002\n0.0000051\n0.4525980\n0.6508382\n\n\n0.0148149\n-0.0000683\n0.0014499\n0.3908581\n0.6959021\n\n\n-0.0387938\n-0.0003860\n0.0064756\n-0.4772884\n0.6331568\n\n\n3.3688217\n-0.0775018\n1.5180283\n2.7971523\n0.0051555\n\n\n1.5606896\n-0.0738777\n0.8001247\n1.8273593\n0.0676458\n\n\n4.4219586\n-0.1106694\n1.3595930\n3.8872782\n0.0001014\n\n\n-0.3993226\n-0.0070111\n0.0703477\n-1.4791294\n0.1391057\n\n\n\n\n\n\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n4.3.1 Mapping the Local Moran’s I\n\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame.\nThe output SpatialPolygonDataFrame is called hunan.localMI\nThe code chunks below can be used to perform the task.\n\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nhunan.localMI\n\nSimple feature collection with 88 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC           Ii\n1   Changde 21098   Anxiang      County   Anxiang 23667 -0.001468468\n2   Changde 21100   Hanshou      County   Hanshou 20981  0.025878173\n3   Changde 21101    Jinshi County City    Jinshi 34592 -0.011987646\n4   Changde 21102        Li      County        Li 24473  0.001022468\n5   Changde 21103     Linli      County     Linli 25554  0.014814881\n6   Changde 21104    Shimen      County    Shimen 27137 -0.038793829\n7  Changsha 21109   Liuyang County City   Liuyang 63118  3.368821673\n8  Changsha 21110 Ningxiang      County Ningxiang 62202  1.560689600\n9  Changsha 21111 Wangcheng      County Wangcheng 70666  4.421958618\n10 Chenzhou 21112     Anren      County     Anren 12761 -0.399322576\n            E.Ii       Var.Ii        Z.Ii        Pr.Ii\n1  -2.815006e-05 4.723841e-04 -0.06626904 0.9471636332\n2  -6.061953e-04 1.016664e-02  0.26266425 0.7928093714\n3  -5.366648e-03 1.133362e-01 -0.01966705 0.9843089778\n4  -2.404783e-07 5.105969e-06  0.45259801 0.6508382339\n5  -6.829362e-05 1.449949e-03  0.39085814 0.6959020959\n6  -3.860263e-04 6.475559e-03 -0.47728835 0.6331568039\n7  -7.750185e-02 1.518028e+00  2.79715225 0.0051555232\n8  -7.387766e-02 8.001247e-01  1.82735933 0.0676457604\n9  -1.106694e-01 1.359593e+00  3.88727819 0.0001013746\n10 -7.011066e-03 7.034768e-02 -1.47912938 0.1391057404\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n4.3.2 Mapping local Moran’s I values\nPlot the local Moran’s I values by using choropleth mapping functions of tmap package.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n\n4.3.3 Mapping Local Moran’s I p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nLocalised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nGetis and Ord’s G-Statistics\n\nUsed to to detect spatial anomalies is the Getis and Ord’s G-statistics .\nLooks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n1. Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroidDetermine the cut-off distanceComputing fixed distance weight matrixComputing adaptive distance weight matrix\n\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\nThe output spatial weights object is called wm62_lw.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n2. Computing Gi statistics\n\nGi statistics using fixed distanceMapping Gi values with fixed distance weightsGi statistics using adaptive distanceMapping Gi values with adaptive distance weights\n\n\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nhunan.gi\n\nSimple feature collection with 88 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC      Z.GDPPC lag_GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667 -0.049205949  24847.20\n2   Changde 21100   Hanshou      County   Hanshou 20981 -0.228341158  22724.80\n3   Changde 21101    Jinshi County City    Jinshi 34592  0.679406172  24143.25\n4   Changde 21102        Li      County        Li 24473  0.004547952  27737.50\n5   Changde 21103     Linli      County     Linli 25554  0.076642204  27270.25\n6   Changde 21104    Shimen      County    Shimen 27137  0.182215933  21248.80\n7  Changsha 21109   Liuyang County City   Liuyang 63118  2.581867439  43747.00\n8  Changsha 21110 Ningxiang      County Ningxiang 62202  2.520777398  33582.71\n9  Changsha 21111 Wangcheng      County Wangcheng 70666  3.085260051  45651.17\n10 Chenzhou 21112     Anren      County     Anren 12761 -0.776550918  32027.62\n   gstat_fixed                       geometry\n1   0.43607584 POLYGON ((112.0625 29.75523...\n2  -0.26550565 POLYGON ((112.2288 29.11684...\n3  -0.07303367 POLYGON ((111.8927 29.6013,...\n4   0.41301703 POLYGON ((111.3731 29.94649...\n5   0.27307058 POLYGON ((111.6324 29.76288...\n6  -0.37751078 POLYGON ((110.8825 30.11675...\n7   2.86389882 POLYGON ((113.9905 28.5682,...\n8   2.79435042 POLYGON ((112.7181 28.38299...\n9   5.21612540 POLYGON ((112.7914 28.52688...\n10  0.22823660 POLYGON ((113.1757 26.82734...\n\n\nCode chunk above performs three tasks:\n\nas.matrix(): to convert the output vector (i.e. gi.fixed) into r matrix object by using .\ncbind(): to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nrename(): rename the field name of the gi values to gstat_fixed by using\n\n\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#mapping-both-local-morans-i-values-and-p-values",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#mapping-both-local-morans-i-values-and-p-values",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "Mapping both Local Moran’s I values and p-values",
    "text": "Mapping both Local Moran’s I values and p-values\nPlot both the local Moran’s I values map and its corresponding p-values map next to each other for easier comparison.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", #&lt;&lt;\n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.9,\n            legend.text.size = 0.8)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", #&lt;&lt;\n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.9,\n            legend.text.size = 0.8)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\nYou need to plot it together to draw any conclusions\nThen we need to decompose these relationshops using LISA Cluster"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-moran-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-moran-scatterplot",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "5.1 Plotting Moran scatterplot",
    "text": "5.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\npar(bg = '#E4D5C9')\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County),\n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\nInterpretation\n\nPlot is split in 4 quadrants.\n\nLH (Neg- ac, Outlier), HH (Pos+ ac, Cluster)\nLL (Pos+ ac, Cluster), HL (Neg- ac, Outlier)\nWz is neighbour (y axis), z is you/target (x axis)\n\nFor this plot, you need to standardise it by scaling it and have both to cutoff at 0.\nThe top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC.\n\nThis are the high-high locations in the lesson slide: “I’m high and my neighbours are high.”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "5.2 Plotting Moran scatterplot with standardised variable",
    "text": "5.2 Plotting Moran scatterplot with standardised variable\n\nUse scale() to centers and scales the variable.\nHere, centering is done by subtracting the mean (omitting NAs) the corresponding columns,\nand scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nPlot the Moran scatterplot again by using the code chunk below.\n\npar(bg = '#E4D5C9')\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\nInterpretation\n\nPlot is split in 4 quadrants.\n\nLH (Neg- ac, Outlier), HH (Pos+ ac, cluster)\nLL (Pos+ ac, Cluster), HL (Neg- ac, outlier)\nWz is neighbour (y axis), z is you/target (x axis)\n\nAfter scaling it, we can see that both is now cutoff at 0."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#preparing-lisa-map-classes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#preparing-lisa-map-classes",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "5.3 Preparing LISA map classes",
    "text": "5.3 Preparing LISA map classes\n\n5.3.1 Convert to Vector\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",\n                   length=nrow(localMI))\n\n\n\n5.3.2 Derive spatially lagged GDPPC\nNext, derive the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, \n                             hunan$GDPPC)\n\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\n\n5.3.3 Center variable around mean\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\n\n5.3.4 Set alpha value\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\n\n\n5.3.5 Define quadrants\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\n\n5.3.6 Place Moran\nLastly, place non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-lisa-map",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#plotting-lisa-map",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "5.4 Plotting LISA map",
    "text": "5.4 Plotting LISA map\n\n5.4.1 LISA Map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#eeeae2\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\nQuadrants\n\nHigh-High (Cluster): counties that have High GDPPC surrounded by counties with High GDPPC\nHigh-Low (Outlier): counties that have High GDPPC surrounded by counties with Low GDPPC\nLow-High (Outlier): counties that have low GDPPC surrounded by counties with High GDPPC\nLow-Low (Cluster): counties that have low GDPPC surrounded by counties with low GDPPC\n\n\n\n\n5.4.2 Local Moran’s I and p-values\nPlot both the local Moran’s I values map and its corresponding p-values map next to each other for easier comparison.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#eeeae2\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\nQuestion: What statistical observations can you draw from the LISA map above?\n\nWe should look at the original value to make sense of the previous map.\nFocusing on the Low-High, the original map does not show any high values.\nHighHigh cluster is definitely correct.\nBut the low-low cluster should be a Low-high outlier.\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\ntmap_arrange(localMI.map, pvalue.map, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#getis-and-ords-g-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#getis-and-ords-g-statistics",
    "title": "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation",
    "section": "6.1 Getis and Ord’s G-Statistics",
    "text": "6.1 Getis and Ord’s G-Statistics\nNOTE: If you have negative values, you cannot use Getis and Ord’s G Stats. It must be all positive. Must calculated the distance based matrix and not contiguity matrix.\n\nUsed to to detect spatial anomalies is the Getis and Ord’s G-statistics .\nLooks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n6.1.1 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n6.1.1.1 Deriving the centroid\n\nWe will need points to associate with each polygon before we can make our connectivity graph.\nIt will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work.\nUse mapping function: applies a given function to each element of a vector and returns a vector of the same length. The input vector is geometry column of us.bound. The function will be st_centroid(). We will be using map_dbl variation of map from the purrr package.\nTo get longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nDo the same for latitude with one key difference: We will access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nUse cbind() to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n6.1.1.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nResults above show that: - The largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour. - We will round up to 62 to ensure that all counties will have at least 1 nearest neighbour.\n\n\n6.1.1.3 Computing fixed distance weight matrix\nCompute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object. The input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”.\n\n\nB is the basic binary coding\n\n\nW is row standardised (sums over all links to n),\n\n\nC is globally standardised (sums over all links to n),\n\n\nU is equal to C divided by the number of neighbours (sums over all links to unity)\n\n\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\n\n\nThe output spatial weights object is called wm62_lw.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n6.1.1.4 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\nIn the example below, we fix the number of neighbours to 8.\n\nknn &lt;- knn2nb(knearneigh(coords, \n                         k=8)) #&lt;&lt;\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n6.1.2 Computing Gi statistics\n\n6.1.2.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nResults above show that:\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nJoin the Gi values to their corresponding hunan sf data frame by using the code chunk below.\nThe 3 sub tasks are:\n\nConvert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix().c\ncbind() is used to join hunan data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Field name of the gi values is renamed to gstat_fixed by using names().\n\n\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nhunan.gi\n\nSimple feature collection with 88 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC      Z.GDPPC lag_GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667 -0.049205949  24847.20\n2   Changde 21100   Hanshou      County   Hanshou 20981 -0.228341158  22724.80\n3   Changde 21101    Jinshi County City    Jinshi 34592  0.679406172  24143.25\n4   Changde 21102        Li      County        Li 24473  0.004547952  27737.50\n5   Changde 21103     Linli      County     Linli 25554  0.076642204  27270.25\n6   Changde 21104    Shimen      County    Shimen 27137  0.182215933  21248.80\n7  Changsha 21109   Liuyang County City   Liuyang 63118  2.581867439  43747.00\n8  Changsha 21110 Ningxiang      County Ningxiang 62202  2.520777398  33582.71\n9  Changsha 21111 Wangcheng      County Wangcheng 70666  3.085260051  45651.17\n10 Chenzhou 21112     Anren      County     Anren 12761 -0.776550918  32027.62\n   gstat_fixed                       geometry\n1   0.43607584 POLYGON ((112.0625 29.75523...\n2  -0.26550565 POLYGON ((112.2288 29.11684...\n3  -0.07303367 POLYGON ((111.8927 29.6013,...\n4   0.41301703 POLYGON ((111.3731 29.94649...\n5   0.27307058 POLYGON ((111.6324 29.76288...\n6  -0.37751078 POLYGON ((110.8825 30.11675...\n7   2.86389882 POLYGON ((113.9905 28.5682,...\n8   2.79435042 POLYGON ((112.7181 28.38299...\n9   5.21612540 POLYGON ((112.7914 28.52688...\n10  0.22823660 POLYGON ((113.1757 26.82734...\n\n\n\n\n6.1.2.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\nIn the left side, western region is the cold spot area while the hot spot area is in the east side.\nIf you plot the transportation line, you can see that it is mainly on the east side. So this might be one of the underlying reason why the hot spot areas are on the right side.\n\n\n\n\n6.1.2.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n6.1.2.4 Mapping Gi values with adaptive distance weights\nWe can also visualise the locations of hot spot and cold spot areas.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")+\n      tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\nGimap2 &lt;- tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 1.2,\n            legend.text.size = 1)\n\ntmap_arrange(gdppc, \n             Gimap2, \n             asp=1, \n             ncol=2)\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\nThis plot with the adaptive weights is actually smoother than the previous map with fixed weights\nThe range in the legend has also changed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-geospatial",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-geospatial",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.1 Importing geospatial",
    "text": "3.1 Importing geospatial\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", layer = \"myanmar_township_boundaries\")\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\n\n\nshan_sf &lt;- \n  shan_sf %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;% \n  select(c(2:7))\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-aspatial-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-aspatial-data-into-r-environment",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.2 Importing aspatial data into R environment",
    "text": "3.2 Importing aspatial data into R environment\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of 11 fields and 55 observation in the tibble data.frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#derive-new-variables-using-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#derive-new-variables-using-dplyr-package",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "3.3 Derive new variables using dplyr package",
    "text": "3.3 Derive new variables using dplyr package\n\nThe unit of measurement of the values are no. of household.\nUsing these values directly will be bias by the underlying total number of households.\nIn general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable using code chunk below\nThen, we use summary() to reveal the summary statistics of ict_derived data.frame\n\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nFrom the results above, we can see that there are 6 new fields that have been added into the data.frame: RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#statistical-graphics",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.1 Statistical Graphics",
    "text": "5.1 Statistical Graphics\n\n\n\n\n\n\nWe can also plot the distribution of the newly derived variables (i.e. Radio penetration rate)\n\n\n\n\n\n\n\nObservation\nDistribution of radio penetration rate has peaks and troughs and is less skewed compared to the no. of households owning radio.\n\n\n\n\n\n\n\n\nObservations\nPenetration rates of computer, internet, ll_phone are right skewed. TV, Radio and Mphone penetration rates are more normally distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#choropleth-map",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "5.2 Choropleth map",
    "text": "5.2 Choropleth map\n\n5.2.1 Joining geospatial data with aspatial data\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one\nThis can be done using the left_join() function of dplyr package.\nLeft: shan_sf simple feature data.frame as the base data object; Right: ict_derived data.frame will be used as the join table.\nThe unique identifier used to join both data objects is TS_PCODE\n\n\nshan_sf2 &lt;- left_join(shan_sf, # geospatial\n                     ict_derived, # aspatial\n                     by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n\n\nDT::datatable(shan_sf2,\n              filter = 'top',\n              class = \"compact\",\n              options = list(pageLength = 5, dom = 'tip'))\n\n\n\n\n\n\n\n\n5.2.2 Preparing a choropleth map\nqtm() function of tmap package to look at the distribution of Radio penetration rate of Shan State at township.\n\nqtm(shan_sf2, \"RADIO_PR\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.9,\n            legend.text.size = 0.7)\n\n\n\n\n\n\n5.2.3 Distribution of total number of households and radios\nTo reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create 2 choropleth maps: - one for the total number of households (TT_HOUSEHOLDS.map) and - one for the total number of household with Radio (RADIO.map)\n\n\nShow the code\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf2) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.8,\n            legend.text.size = 0.5)\n\n\nRADIO.map &lt;- tm_shape(shan_sf2) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.8,\n            legend.text.size = 0.5)\n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\nObservations\nTownships with relatively larger number of households are also showing relatively higher number of radio ownership.\n\n\n\n5.2.4 Distribution of total number of households and Radio penetration rate\n\n\nShow the code\ntm_shape(shan_sf2) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, \n            asp=0,\n            bg.color = \"#E4D5C9\",\n            frame = F,\n            legend.title.size = 0.8,\n            legend.text.size = 0.5)\n\n\n\n\n\n\nObservations\n\nWe can see that there are townships which have higher radio penetration rate compared to other townships which have higher total number of households.\nThis is indicated by the darker orange shade in RADIO_PR but lighter yellow shade in TT_HOUSEHOLDS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#prepare-variables",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#prepare-variables",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.1 Prepare variables",
    "text": "7.1 Prepare variables\n\n7.1.1 Extracting clustering variables\nHere, we extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf2 %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \n         \"RADIO_PR\", \n         \"TV_PR\", \n         \"LLPHONE_PR\", \n         \"MPHONE_PR\", \n         \"COMPUTER_PR\")\n\n\n\n\n\n\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\n\n\n7.1.2 Change row names\nNext, we can change the rows by township name instead of row number.\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\n\nDT::datatable(cluster_vars,\n              filter = 'top',\n              class = \"compact\",\n              options = list(pageLength = 5, dom = 'tip'))\n\n\n\n\n\n\n\n\n7.1.3 Delete TS.x field\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\n\nDT::datatable(shan_ict,\n              filter = 'top',\n              class = \"compact\",\n              options = list(pageLength = 5, dom = 'tip'))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-standardisation",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.2 Data Standardisation",
    "text": "7.2 Data Standardisation\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid cluster analysis result to be biased due to the clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n7.2.1 Min-Max standardisation\nIn the code chunk below we use:\n\nnormalize() of heatmaply package to standardise the clustering variables by using Min-Max method.\nsummary() is then used to display the summary statistics of the standardised clustering variables.\n\n\nshan_ict.std &lt;- normalize(shan_ict)\n\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nResults above show that values range of the Min-max standardised clustering variables are now 0-1.\n\n\n6.2.2 Z-score standardisation\nIn the code chunk below we use:\n\nscale() of Base R to perform Z-score standardisation\ndescribe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\n\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\nshan_ict.z &lt;- scale(shan_ict)\n\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nResults above show that the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\n\n\n6.2.3 Visualising the standardised clustering variables\n\nHistogramDensity Plot\n\n\n\n\nShow the code\n# Raw Values\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Raw values w/o standardisation\",\n       y = \"Frequency\",\n       x= \"\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n# Min-max standardisation\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Min-Max Standardisation\",\n       y = \"\",\n       x= \"Radio Penetration Rate\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_text(size = 10),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n# Z-Score standardisation\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Z-score Standardisation\",\n       y = \"\",\n       x = \"\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nShow the code\n# Raw Values\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Raw values w/o standardisation\",\n       y = \"Density\",\n       x= \"\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n# Min-max standardisation\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Min-Max Standardisation\",\n       y = \"\",\n       x= \"Radio Penetration Rate\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.x = element_text(size = 10),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n# Z-Score standardisation\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"Z-score Standardisation\",\n       y = \"\",\n       x = \"\") +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nOverall distribution of the clustering variables will change after the data standardisation.\nHence, it is advisable NOT to perform data standardisation if the values range of the clustering variables are not very large."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-proximity-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-proximity-matrix",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.3 Computing proximity matrix",
    "text": "7.3 Computing proximity matrix\n\nHere, we use dist() to calculate distance matrix then list the content of proxmat for visual inspection\ndist() supports 6 distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\n\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#hierarchical-clustering",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.4 Hierarchical clustering",
    "text": "7.4 Hierarchical clustering\n\n7.4.1 Compute hierarchical clustering\n\nHere, we use hclust() of R stats\nThe hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\nhclust() employed agglomeration method to compute the cluster. 8 clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\n\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\n\n7.4.2 Plot tree\n\nUse plot() of R Graphics to plot the tree\n\n\npar(bg = '#E4D5C9')\n\nplot(hclust_ward, \n     cex = 0.6)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#select-optimal-clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#select-optimal-clustering-algorithm",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.5 Select optimal clustering algorithm",
    "text": "7.5 Select optimal clustering algorithm\nOne of the challenges in performing hierarchical clustering is to identify stronger clustering structures.\nThe issue can be solved by using use agnes() of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nIn the code chunk below, we compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\nResults\n\nWard’s method provides the strongest clustering structure among the 4 methods assessed.\nHence, in the subsequent analysis,only Ward’s method will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#determining-optimal-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#determining-optimal-clusters",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.6 Determining Optimal Clusters",
    "text": "7.6 Determining Optimal Clusters\nThere are 3 commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n7.6.1 Gap Statistic Method\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data.\nThe estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic).\nThis means that the clustering structure is far away from the random uniform distribution of points.\n\n7.6.1.1 Compute gap statistic\nclusGap() of cluster package is used to compute gap statistic. hcut function used is from factoextra package.\n\nset.seed(12345)\n\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\n\n7.6.1.2 Visualise plot\nfviz_gap_stat() of factoextra package to visualise the plot:\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\nResults\n\nRecommended no. of cluster to retain is 1.\nHowever, it is not logical to retain only one cluster.\nBy examining the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\n\n\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interpreting-the-dendrograms",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interpreting-the-dendrograms",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.7 Interpreting the dendrograms",
    "text": "7.7 Interpreting the dendrograms\n\nIn the dendrogram displayed above, each leaf corresponds to 1 observation.\nAs we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between 2 observations. - The higher the height of the fusion, the less similar the observations are.\nNote: conclusions about the proximity of 2 observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of 2 observations along the horizontal axis as a criteria of their similarity.\n\nIn the code chunk below, we use rect.hclust() of R stats to draw the dendrogram with a border around the selected clusters. The argument border is used to specify the border colors for the rectangles.\n\npar(bg = '#E4D5C9')\n\nplot(hclust_ward, \n     cex = 0.6)\n\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visually-driven-hierarchical-clustering-analysis",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.8 Visually-driven hierarchical clustering analysis",
    "text": "7.8 Visually-driven hierarchical clustering analysis\nWith heatmaply package, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n7.8.1 Transforming the data frame into a matrix\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nUse data.matrix() of base R package\n\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\nshan_ict_mat\n\n            RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit    286.18517 554.1313  35.306182 260.69440   12.159391\nPindaya    417.46466 505.1300  19.835841 162.39170   12.881897\nYwangan    484.52147 260.5734  11.935906 120.28559    4.414650\nPinlaung   231.64994 541.7189  28.544542 249.49028   13.762547\nMabein     449.49027 708.6423  72.752549 392.60890   16.450417\nKalaw      280.76244 611.6204  42.064778 408.79514   29.631601\nPekon      318.61183 535.8494  39.832703 214.84764   18.970325\nLawksawk   387.10175 630.0035  31.513657 320.56863   21.766768\nNawnghkio  349.33590 547.9456  38.449603 323.02011   15.764647\nKyaukme    210.95485 601.1773  39.582672 372.49304   30.947094\nMuse       175.88008 842.5317 139.551634 712.92878   91.293779\nLaihka     153.35609 590.5575  65.529010 261.43345   27.758817\nMongnai    182.51928 515.9062   5.141388 267.51285   28.277635\nMawkmai     97.44231 234.5010   2.780095  36.41924    7.784265\nKutkai     238.71578 474.0161  62.897378 264.62088   21.070884\nMongton    193.51808 388.4453  25.129169 290.51198   21.841240\nMongyai    168.44238 364.2707  20.333133 135.12905    9.378752\nMongkaing  156.74749 116.0299   6.000490  50.75925    8.388440\nLashio     235.73893 680.7891  66.685148 463.83909   60.216842\nMongpan    228.74008 517.2477  21.582734 437.74211   46.485888\nMatman     244.12297 219.4093   8.438819  45.20796    6.027728\nTachileik  363.35354 759.4214  59.751756 735.43090   92.401937\nNarphan     75.27012 210.0886  42.187690 305.26891    3.277892\nMongkhet    79.37695 313.3956  29.034268 114.64174    6.853583\nHsipaw     198.12167 475.8613  32.316784 269.08669   14.588719\nMonghsat   107.67490 460.1169  34.508769 189.51537   22.817273\nMongmao    120.05744 512.6855  85.495452 424.98803   11.297271\nNansang    203.99724 585.6969  37.586810 314.63712   30.641998\nLaukkaing   53.26400 778.5117 134.354578 716.74513   35.556180\nPangsang    97.44765 490.3358  62.569694 440.83757   50.427456\nNamtu      240.01374 630.6159  35.220342 105.05970   19.929559\nMonghpyak  405.02839 503.3252  42.497972 381.83293   25.141930\nKonkyan     21.05456 287.0743 169.351886 316.73380   10.801904\nMongping   161.90476 330.8817  24.611033 190.75908   11.598303\nHopong     205.55645 455.8395  32.311550 209.96441   14.477515\nNyaungshwe 323.70878 554.4870  18.998921 351.19857   15.691701\nHsihseng   246.77306 505.5689  31.796405 145.09780    9.917305\nMongla      82.18126 673.1951  86.981567 555.10753   62.596006\nHseni      257.32235 628.8310  44.825537 431.87028   19.696069\nKunlong    121.92071 589.7806 181.485758 237.58661   20.785219\nHopang     127.60443 556.8737  81.746586 487.68817   24.523976\nNamhkan    134.98623 653.5462  91.796237 596.48877   30.162955\nKengtung   267.50939 637.7874  63.203895 487.32989   47.542234\nLangkho    227.46781 587.1483  74.391989 403.91035   32.308059\nMonghsu    235.95261 464.9495  11.629171 231.06184   12.389958\nTaunggyi   365.30919 755.2661  81.545688 586.66651   81.170403\nPangwaun    76.24025 366.7406  28.992770 518.14733    6.013315\nKyethi     268.62150 447.1408  22.357039  89.65285   12.807550\nLoilen     142.92267 552.6099  21.649390 253.00431   32.015411\nManton     194.32513 188.3379   8.069764  54.79630    3.644410\nMongyang    71.74622 569.3250 113.944066 469.01868   12.847119\nKunhing    161.48796 473.0853  73.085339 340.48140   26.039387\nMongyawng  278.08501 739.2953 121.978196 324.06383   15.326276\nTangyan    223.86318 453.2753  22.594047 105.23021   12.065335\nNamhsan    230.83668 390.5005  23.090976  97.77128    8.987943\n\n\n\nnormalize(shan_ict_mat)\n\n             RADIO_PR      TV_PR LLPHONE_PR  MPHONE_PR COMPUTER_PR\nMongmit    0.57205942 0.60302858 0.18200927 0.32084610  0.09965322\nPindaya    0.85531478 0.53558030 0.09544044 0.18021511  0.10775997\nYwangan    1.00000000 0.19895817 0.05123403 0.11997847  0.01275478\nPinlaung   0.45439140 0.58594353 0.14417253 0.30481757  0.11764114\nMabein     0.92441487 0.81570663 0.39155141 0.50956183  0.14779990\nKalaw      0.56035905 0.68216005 0.21982898 0.53271773  0.29569695\nPekon      0.64202484 0.57786439 0.20733875 0.25525812  0.17607406\nLawksawk   0.78980219 0.70746356 0.16078708 0.40650165  0.20745104\nNawnghkio  0.70831667 0.59451431 0.19959920 0.41000871  0.14010534\nKyaukme    0.40973861 0.66778546 0.20593963 0.48078425  0.31045720\nMuse       0.33405948 1.00000000 0.76534530 0.96780867  0.98756611\nLaihka     0.28546057 0.65316773 0.35112998 0.32190337  0.27468372\nMongnai    0.34838457 0.55041331 0.01321331 0.33060052  0.28050503\nMawkmai    0.16481814 0.16307060 0.00000000 0.00000000  0.05056292\nKutkai     0.46963702 0.49275332 0.33640391 0.32646329  0.19964300\nMongton    0.37211615 0.37496862 0.12506080 0.36350286  0.20828664\nMongyai    0.31801152 0.34169332 0.09822318 0.14121340  0.06845357\nMongkaing  0.29277803 0.00000000 0.01802067 0.02051469  0.05734196\nLashio     0.46321401 0.77736794 0.35759948 0.61146313  0.63887304\nMongpan    0.44811295 0.55225992 0.10521569 0.57412901  0.48480739\nMatman     0.48130384 0.14229751 0.03166505 0.01257306  0.03085402\nTachileik  0.73856185 0.88560204 0.31880166 1.00000000  1.00000000\nNarphan    0.11697828 0.12946800 0.22051677 0.38461400  0.00000000\nMongkhet   0.12583938 0.27166587 0.14691293 0.11190444  0.04012038\nHsipaw     0.38204908 0.49529324 0.16528121 0.33285203  0.12691106\nMonghsat   0.18689650 0.47362169 0.17754711 0.21901799  0.21923804\nMongmao    0.21361371 0.54598018 0.46285807 0.55588314  0.08997997\nNansang    0.39472652 0.64647734 0.19477119 0.39801608  0.30703392\nLaukkaing  0.06949675 0.91187905 0.73626365 0.97326831  0.36217261\nPangsang   0.16482966 0.51521670 0.33457025 0.57855734  0.52903303\nNamtu      0.47243758 0.70830658 0.18152893 0.09819645  0.18683697\nMonghpyak  0.82848163 0.53309615 0.22225304 0.49414582  0.24532143\nKonkyan    0.00000000 0.23543567 0.93210135 0.40101557  0.08442179\nMongping   0.30390563 0.29573466 0.12216142 0.22079723  0.09335764\nHopong     0.39809076 0.46773405 0.16525193 0.24827222  0.12566332\nNyaungshwe 0.65302227 0.60351828 0.09075720 0.45032058  0.13928687\nHsihseng   0.48702183 0.53618455 0.16236928 0.15547460  0.07449631\nMongla     0.13189011 0.76691505 0.47117406 0.74203095  0.66556802\nHseni      0.50978352 0.70584966 0.23527762 0.56572882  0.18421714\nKunlong    0.21763398 0.65209843 1.00000000 0.28778828  0.19643775\nHopang     0.22989746 0.60680342 0.44188018 0.64558140  0.23838778\nNamhkan    0.24582481 0.73986923 0.49811595 0.80123060  0.30165891\nKengtung   0.53176358 0.71817785 0.33811911 0.64506886  0.49665992\nLangkho    0.44536783 0.64847519 0.40072537 0.52572958  0.32572766\nMonghsu    0.46367507 0.48027349 0.04951760 0.27845401  0.10224026\nTaunggyi   0.74278145 0.87988242 0.44075600 0.78717895  0.87397863\nPangwaun   0.11907147 0.34509308 0.14668072 0.68915601  0.03069231\nKyethi     0.53416314 0.45576056 0.10954854 0.07615554  0.10692577\nLoilen     0.26294889 0.60093442 0.10558868 0.30984472  0.32244406\nManton     0.37385748 0.09952901 0.02959990 0.02629007  0.00411244\nMongyang   0.10937493 0.62394218 0.62205063 0.61887299  0.10736975\nKunhing    0.30300632 0.49147219 0.39341363 0.43498868  0.25539118\nMongyawng  0.55458208 0.85789929 0.66700796 0.41150185  0.13518668\nTangyan    0.43759030 0.46420446 0.11087479 0.09844038  0.09859789\nNamhsan    0.45263668 0.37779761 0.11365550 0.08776970  0.06406858\n\n\n\n\n7.8.2 Plotting interactive cluster heatmap using heatmaply()\nUse heatmaply() to build an interactive cluster heatmap.\n\ngg_back_box &lt;- theme(\n  panel.background = element_rect(fill = \"#E4D5C9\"),\n  plot.background = element_rect(fill = \"#E4D5C9\"),\n  legend.background = element_rect(fill = \"#E4D5C9\")\n)\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\",\n          heatmap_layers = gg_back_box\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-clusters-formed",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-clusters-formed",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "7.9 Mapping the clusters formed",
    "text": "7.9 Mapping the clusters formed\nUpon close examination of the dendrogram above, we have decided to retain 5 clusters.\n\n7.9.1 Derive 5-cluster model\n\nUse cutree() of R Base to derive a 5-cluster model.\n\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\n\n7.9.2 Append groups\nTo visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\n\nthe groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename() of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf2, \n                         as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\n\n6.9.3 Plot choropleth map\n\nqtm(shan_sf_cluster, \"CLUSTER\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\nObservations\n\nClusters are very fragmented\nThis is 1 of the major limitations when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#convert-into-spatialpolygonsdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#convert-into-spatialpolygonsdataframe",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "8.1 Convert into SpatialPolygonsDataFrame",
    "text": "8.1 Convert into SpatialPolygonsDataFrame\n\nFirst, we need to convert shan_sf2 into SpatialPolygonDataFrame.\n\nThis is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\n\nThen, we use as_Spatial() of sf package to convert shan_sf2 into a SpatialPolygonDataFrame called shan_sp.\n\n\nshan_sp &lt;- as_Spatial(shan_sf2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#neighbour-list",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#neighbour-list",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "8.2 Neighbour List",
    "text": "8.2 Neighbour List\n\n8.2.1 Compute Neighbour List\npoly2nd() of spdep package is used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\n\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\n\n8.2.2 Plot the neighbours list\n\nPlot the neighbours list on shan_sp\nSince we now can plot the community area boundaries as well, we plot this graph on top of the map\nThe 1st plot command gives the boundaries.\nThen, the next command gives plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons.\nThese are used as the nodes for the graph representation.\nWe also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\n\npar(bg = '#E4D5C9')\n\nplot(shan_sp, \n     border=grey(.5))\n\nplot(shan.nb, \n     coordinates(shan_sp), \n     col=\"#800200\", \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-minimum-spanning-tree",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#compute-minimum-spanning-tree",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "8.3 Compute minimum spanning tree",
    "text": "8.3 Compute minimum spanning tree\n\n8.3.1 Calculate edge costs\nnbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\n\nlcosts &lt;- nbcosts(shan.nb, \n                  shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the 5 variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, we will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nHere, we use nb2listw() of spdep package. We specify the style = B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\n\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n8.3.2 Computing minimum spanning tree\nMinimum spanning tree is computed by mean of the mstree() of spdep package.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nObservations\n\nThe dimension is 54 and not 55.\nThis is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\n\n\nWe then display the content of shan.mst by using head():\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\n\nPlot method for the MST include a way to show the observation numbers of the nodes in addition to the edge.\nAs before, we plot this together with the township boundaries.\nWe can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\n\npar(bg = '#E4D5C9')\n\nplot(shan_sp, \n     border=gray(.5))\n\nplot.mst(shan.mst, \n         coordinates(shan_sp), \n     col=\"#800200\", \n     cex.lab=0.7, \n     cex.circles=0.005, \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-spatially-constrained-clusters-using-skater-method",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-spatially-constrained-clusters-using-skater-method",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "8.4 Computing spatially constrained clusters using SKATER method",
    "text": "8.4 Computing spatially constrained clusters using SKATER method\n\nuse skater() of spdep package to compute the spatially constrained cluster\nskater() takes in 3 mandatory arguments:\n\nthe first 2 columns of the MST matrix (i.e. not the cost)\nthe data matrix (to update the costs as units are being grouped)\nthe no. of cuts. Note: It is set to one less than the no. of clusters.\n\nSo, the value specified is not the no. of clusters, but the no. of cuts in the graph, one less than the number of clusters.\n\n\n\n\n8.4.1 Compute the spatially constrained cluster\n\nclust6 &lt;- skater(shan.mst[,1:2], shan_ict, method = \"euclidean\", 5)\n\n\n\n8.4.2 Examine result\nExamine result of the skater() is an object of class skater contents\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary).\nThis is followed by a detailed summary for each of the clusters in the edges.groups list.\nSum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\n\n\n\n8.4.3 Check the cluster assignment\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\n\n8.4.4 Find out how many observations are in each cluster\n\nWe can find out how many observations are in each cluster by means of the table command.\nParenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups.\nFor example, the first list has node with dimension 12, which is also the no. of observations in the first cluster.\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\n\n\n8.4.5 Plot the pruned tree\nLastly, we can also plot the pruned tree that shows the 5 clusters on top of the townshop area.\n\npar(bg = '#E4D5C9')\n\nplot(shan_sp, \n     border=gray(.5))\n\nplot(clust6, \n     coordinates(shan_sp), \n     cex.lab=.7,\n     groups.colors=c(\"maroon\",\"green4\",\"navy\", \"purple4\", \"pink3\"), \n     cex.circles=0.005, \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-clusters-in-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-clusters-in-choropleth-map",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "8.5 Visualising the clusters in choropleth map",
    "text": "8.5 Visualising the clusters in choropleth map\nTo plot the newly derived clusters by using SKATER method:\n\ngroups_mat &lt;- as.matrix(clust6$groups)\n\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, \n                                as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\n\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)\n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#ward-like-hierarchical-clustering-clustgeo",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#ward-like-hierarchical-clustering-clustgeo",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "9.1 Ward-like hierarchical clustering: ClustGeo",
    "text": "9.1 Ward-like hierarchical clustering: ClustGeo\n\nhclustgeo() is used to perform a typical Ward-like hierarchical clustering just like hclust().\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix.\nThe dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist()\n\n\npar(bg = '#E4D5C9')\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\n\nplot(nongeo_cluster, \n     cex = 0.5)\n\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-clusters",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "9.2 Mapping clusters",
    "text": "9.2 Mapping clusters\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf2, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\") +\n  tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-hierarchical-clustering",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "9.3 Spatially Constrained Hierarchical Clustering",
    "text": "9.3 Spatially Constrained Hierarchical Clustering\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\nas.dist() is used to convert the data frame into matrix\n\n\ndist &lt;- st_distance(shan_sf2, shan_sf2)\ndistmat &lt;- as.dist(dist)\n\nchoicealpha() will be used to determine a suitable value for the mixing parameter alpha:\n\npar(bg = '#E4D5C9')\n\ncr &lt;- choicealpha(proxmat, \n                  distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, \n                  graph = TRUE)\n\n\n\n\n\n\n\nThe results above shows that alpha = 0.3 will be used.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf2 polygon feature data frame by using the code chunk below:\n\nshan_sf_Gcluster &lt;- cbind(shan_sf2, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nPlot the map of the newly delineated spatially constrained clusters:\n\nqtm(shan_sf_Gcluster, \"CLUSTER\") +\n    tm_layout(bg.color = \"#E4D5C9\",\n            frame = F)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-individual-clustering-variable",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-individual-clustering-variable",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "10.1 Visualising individual clustering variable",
    "text": "10.1 Visualising individual clustering variable\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster.\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, \n           y = RADIO_PR)) +\n  geom_boxplot() +\n  theme(\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    #axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    #strip.text = element_text(face= 'bold'),\n    #strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\n\nObservations\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#multivariate-visualisation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#multivariate-visualisation",
    "title": "Hands-on Exercise 6: Geographical Segmentation with Spatially Constrained Clustering Techniques",
    "section": "10.2 Multivariate Visualisation",
    "text": "10.2 Multivariate Visualisation\nParallel coordinate plot can be used to reveal clustering variables by cluster very effectively. ggparcoord() of GGally package is used in the code chunk below.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30,  hjust=1, size = 6),\n        panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n        panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n        plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n        panel.border = element_blank(),\n        panel.background = element_rect(fill = \"#ece6e1\"),\n        strip.text = element_text(face= 'bold'),\n        strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\"))\n\n\n\n\n\nInsights\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone.\nOn the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\n\nNote\nThe scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\n\nWe can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation using group_by() and summarise() of dplyr.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-polygon-feature-data-in-shapefile-format",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-polygon-feature-data-in-shapefile-format",
    "title": "In-class Exercise 1: WIP",
    "section": "4.1 Import polygon feature data in shapefile format",
    "text": "4.1 Import polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package:\n\nread simple features form file/database, or retrieve layer names and their geometry types(s)\nimports MPSZ-2019 shapefile into R as polygon feature data frame\ndsn = defines data path; layer = provide the shapefile name\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nInterpretation\n\nGeometry type = multipolygon features\n332 multipolygon features and 6 fields in simple feature data frame\nGeodetic CRS = WGS84 coordinates system\nBounding box provides x extend and y extend of the data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-gis-data-in-kml-format",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-gis-data-in-kml-format",
    "title": "In-class Exercise 1: WIP",
    "section": "4.3 Import GIS data in kml format",
    "text": "4.3 Import GIS data in kml format\n\n#preschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\n\nInterpretation\n\npreschool = point feature data frame\n2290 features and 2 fields\nGeodetic CRS = WGS84 coordinates system"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex01/data/geospatial/MPSZ-2019.html",
    "title": "we could go anywhere",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-master-plan-2014-subzone-boundary-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-master-plan-2014-subzone-boundary-data",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "4.1 Import Master Plan 2014 Subzone Boundary data",
    "text": "4.1 Import Master Plan 2014 Subzone Boundary data\n\nShapefileKMLHealth Check\n\n\nThe code chunk below uses st_read() function of sf package:\n\nread simple features form file/database, or retrieve layer names and their geometry types(s)\nimports MP14_SUBZONE_WEB_PL shapefile into R as polygon feature data frame\ndsn = defines data path; layer = provide the shapefile name\n\n\nmpsz14_shp &lt;- st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nclass(mpsz14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\nInterpretation\n\nGeometry type = multipolygon features\n323 multipolygon features and 15 fields in simple feature data frame\nProjected CRS = SVY21 coordinates system\nBounding box provides x extend and y extend of the data\n\n\n\n\n\nmpsz14_kml &lt;- st_write(mpsz14_shp,\n                       \"data/geospatial/MP14_SUBZONE_WEB_PL.kml\",\n                       delete_dsn = TRUE)\n\n\n\n\nst_crs(mpsz14_shp)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nMULTIPOLYGON (((31495.56 30...\n\n\n2\n1\nPEARL'S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nMULTIPOLYGON (((29092.28 30...\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nMULTIPOLYGON (((29932.33 29...\n\n\n4\n8\nHENDERSON HILL\nBMSZ08\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n3775D82C5DDBEFBD\n2014-12-05\n26782.83\n29933.77\n3313.625\n595428.9\nMULTIPOLYGON (((27131.28 30...\n\n\n5\n3\nREDHILL\nBMSZ03\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n85D9ABEF0A40678F\n2014-12-05\n26201.96\n30005.70\n2825.594\n387429.4\nMULTIPOLYGON (((26451.03 30...\n\n\n6\n7\nALEXANDRA HILL\nBMSZ07\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n9D286521EF5E3B59\n2014-12-05\n25358.82\n29991.38\n4428.913\n1030378.8\nMULTIPOLYGON (((25899.7 297..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-master-plan-2019-subzone-boundary-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-master-plan-2019-subzone-boundary-data",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "4.2 Import Master Plan 2019 Subzone Boundary data",
    "text": "4.2 Import Master Plan 2019 Subzone Boundary data\n\nShapefileKMLHealth Check\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/geospatial\", \n                  layer = \"MPSZ-2019\") %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nInterpretation\n\nmpsz19 = multipolygon feature data frame\n332 features and 2 fields\nGeodetic CRS = WGS84 coordinates system\n\nNote: WGS84 is in decimal degree. Geographical coordinate systems is distorted and requires conversion to projected coordinate systems (PCS) to SVY21 for Singapore.\n\n\n\n\nmpsz19_kml &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\n\n\nSUBZONE_N\nSUBZONE_C\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\ngeometry\n\n\n\n\nMARINA EAST\nMESZ01\nMARINA EAST\nME\nCENTRAL REGION\nCR\nMULTIPOLYGON (((33222.98 29...\n\n\nINSTITUTION HILL\nRVSZ05\nRIVER VALLEY\nRV\nCENTRAL REGION\nCR\nMULTIPOLYGON (((28481.45 30...\n\n\nROBERTSON QUAY\nSRSZ01\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nMULTIPOLYGON (((28087.34 30...\n\n\nJURONG ISLAND AND BUKOM\nWISZ01\nWESTERN ISLANDS\nWI\nWEST REGION\nWR\nMULTIPOLYGON (((14557.7 304...\n\n\nFORT CANNING\nMUSZ02\nMUSEUM\nMU\nCENTRAL REGION\nCR\nMULTIPOLYGON (((29542.53 31...\n\n\nMARINA EAST (MP)\nMPSZ05\nMARINE PARADE\nMP\nCENTRAL REGION\nCR\nMULTIPOLYGON (((35279.55 30..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-aspatial-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-aspatial-data",
    "title": "In-class Exercise 1",
    "section": "4.3 Import aspatial data",
    "text": "4.3 Import aspatial data\nNext, we will import respopagsex2000to2018.csv file into RStudio and save the file into an R dataframe called popdata. The task will be performed by using read_csv() function of readr package.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "we could go anywhere",
    "section": "",
    "text": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R\n\n\n\n\n\n\n\n\n\n\n\n\nSep 8, 2024\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 9a: Processing and Visualising Flow Data\n\n\n\n\n\n\n\n\n\n\n\n\nSep 8, 2024\n\n\n\n\n\n\n  \n\n\n\n\nIn-class Exercise 2: Importing Data for Thailand Road Accident Case Study\n\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2024\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 8: Geographically Weighted Predictive Models\n\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2024\n\n\n\n\n\n\n  \n\n\n\n\nHands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method\n\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-pre-school-locations",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-pre-school-locations",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "4.3 Import Pre-School Locations",
    "text": "4.3 Import Pre-School Locations\nPreSchoolsLocation is in kml format. Below code chunk used to import kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\") %&gt;% \n    st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nInterpretation\n\npreschool = point feature data frame\n2290 features and 2 fields\nGeodetic CRS = WGS84 coordinates system"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-population-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#import-population-data",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "4.4 Import Population Data",
    "text": "4.4 Import Population Data\nNext, we will import respopagsextod2023.csv file into RStudio and save the file into an R dataframe called popdata. The task will be performed by using read_csv() function of readr package.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2023.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#point-in-polygon-count",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "5.1 Point-in-Polygon count",
    "text": "5.1 Point-in-Polygon count\nThe code chunk below counts the number of pre-schools in each planning sub-zone using st_intersects to identify where 2 geometries intersects (i.e. any common points).\nlengths() returns the number of elements in a list/vector. In this case, it returns the number of pre-schools in each subzone of the mpsz19_shp shapefile.\n\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#computing-density",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#computing-density",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "5.2 Computing density",
    "text": "5.2 Computing density\nThe code chunk below performs the following functions:\n\nDerive the area of each planning sub-zone using st_area\nDrop the unit of measurement of the area (i.e. m^2)\nCalculate the density of pre-school at the planning sub-zone level.\n\n\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#extract-relevant-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#extract-relevant-data",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "7.1 Extract relevant data",
    "text": "7.1 Extract relevant data\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by(), and select() of dplyr package\n\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;% # Group by Planning Area, Subzone, Age Group\n  summarise(`POP`=sum(`Pop`)) %&gt;%  # Summarise by # of population \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;% \n  # Young: Aged 0 to 24\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24\n         +rowSums(.[14])) %&gt;% # Aged 5 - 9\n  \n  # Economic Active: Aged 25 to 64\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %&gt;%  # Aged 60 - 64\n  \n  # Aged: &gt; 65\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;% \n  \n  # Total: all age groups\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;% \n  \n  # Proportion of inactive population per working population\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %&gt;% \n  \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#joining-aspatial-and-geospatial-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#joining-aspatial-and-geospatial-data",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "7.2 Joining aspatial and geospatial data",
    "text": "7.2 Joining aspatial and geospatial data\ntoupper() converts elements of columns PA and SZ to upper case.\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) \n\nThe code chunk below uses left_join() to joins geospatial data mpsz19_shp with popdata2023. Keeping mpsz19_shp on the left allows us to retain geometry details.\n\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, \n                          by = c(\"SZ\" = \"SUBZONE_N\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#data-preparation",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#data-preparation",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "9.1 Data preparation",
    "text": "9.1 Data preparation\nThe code chunk below excludes records with NA by using the code chunk below.\n\nmpsz_pop2023 &lt;- mpsz_pop2023 %&gt;%\n  drop_na()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#defining-the-get.var-function",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#defining-the-get.var-function",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "9.2 Defining the get.var function",
    "text": "9.2 Defining the get.var function\nThe code chunk below defines a function to get the input data and field to be used for creating the percentile map.\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#percentile-mapping-function",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#percentile-mapping-function",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "9.3 Percentile mapping function",
    "text": "9.3 Percentile mapping function\nThe code chunk below creates a function for computing and plotting the percentile map.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(mpsz_pop2023) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"),\n            bg.color = \"#E4D5C9\",\n            frame = F)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#plotting-the-map",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#plotting-the-map",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "9.4 Plotting the map",
    "text": "9.4 Plotting the map\nThe code chunk below runs the percentile map function.\n\npercentmap(\"DEPENDENCY\", mpsz_pop2023)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#creating-boxbreaks-function",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#creating-boxbreaks-function",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "10.1 Creating boxbreaks function",
    "text": "10.1 Creating boxbreaks function\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  \n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  \n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  \n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  \n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#defining-the-get.var-function-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#defining-the-get.var-function-1",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "10.2 Defining the get.var function",
    "text": "10.2 Defining the get.var function\nThe R function below extracts a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#boxmap-function",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#boxmap-function",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "10.3 Boxmap function",
    "text": "10.3 Boxmap function\nThe code chunk below is an R function to create a box map.\n\narguments:\n\nvnam: variable name (as character, in quotes)\ndf: simple features polygon layer\nlegtitle: legend title\nmtitle: map title\nmult: multiplier for IQR\n\nreturns:\n\na tmap-element (plots a map)\n\n\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"Lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"Upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"),\n            bg.color = \"#E4D5C9\",\n            frame = F)\n}"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#plotting-the-map-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#plotting-the-map-1",
    "title": "In-class Exercise 1: Geospatial Data Science with R",
    "section": "10.4 Plotting the map",
    "text": "10.4 Plotting the map\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\nboxmap(\"DEPENDENCY\", mpsz_pop2023)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#import-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#import-geospatial-data",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.1 Import geospatial data",
    "text": "4.1 Import geospatial data\nHere, we import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\nShapefile consists of URA Master Plan 2014’s planning subzone boundaries with polygon features used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nObservations\n\nmpsz* = simple feature object.\nGeometry type is multipolygon.\nIt is also important to note that mpsz simple feature object does not have EPSG information."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#update-crs-information",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#update-crs-information",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.2 Update CRS information",
    "text": "4.2 Update CRS information\nst_transform() updates the newly imported mpsz with the correct ESPG code (i.e. 3414). Subsequently, we can use st_crs() to verify newly transformed mpsz_svy21.\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nResults above show that the EPSG: is indicated as 3414 now."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#reveal-the-extent-of-mpsz_svy21",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#reveal-the-extent-of-mpsz_svy21",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "4.3 Reveal the extent of mpsz_svy21",
    "text": "4.3 Reveal the extent of mpsz_svy21\nThe code below reveals the extent of mpsz_svy21 using st_bbox() of sf package\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#import-the-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#import-the-aspatial-data",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.1 Import the aspatial data",
    "text": "5.1 Import the aspatial data\nThe code chunk below performs the following purposes: - read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale - glimpse() to display the data structure\n\ncondo_resale &lt;- read_csv(\"data/aspatial/Condo_resale_2015.csv\")\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\n\n\n\n\n\n\nDisplay summary statistics of condo_resale:\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#convert-aspatial-data-frame-into-a-sf-object",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#convert-aspatial-data-frame-into-a-sf-object",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.2 Convert aspatial data frame into a sf object",
    "text": "5.2 Convert aspatial data frame into a sf object\nHere, we use:\n\nst_as_sf() of sf package to convert aspatial data frame to sf object and\nst_transform() of sf package to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\n\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#eda-using-statistical-graphics",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.1 EDA using statistical graphics",
    "text": "6.1 EDA using statistical graphics\n\n6.1.1 Plot distribution\nPlot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA):\n\n\nShow the code\ndistri &lt;- function(data, x) {\n  ggplot(data = data, aes(x = {{x}})) +\n  geom_histogram(bins=20, \n                 color=\"white\", \n                 fill=\"#800200\") +\n  labs(title = \"\",\n       y = \"Freq\")+\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n}\n\ndistri(condo_resale.sf, SELLING_PRICE)\n\n\n\n\n\n\nObservations\n\nA right skewed distribution.\nThis means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed distribution can be normalised by using log transformation which we will be doing in the next section.\n\n\n\n\n6.1.2 Normalise using Log Transformation\nHere, we will:\n\nDerive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE.\nIt is performed using mutate() of dplyr package.\n\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\n\n6.1.3 Plot Histogram of Count by LOG_SELLING_PRICE\n\n\nShow the code\ndistri(condo_resale.sf, LOG_SELLING_PRICE)\n\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\n6.1.4 Multiple Histogram Plots distribution of variables\nHere, we will:\n\nFirst create 12 histograms. Then,\nUse ggarrnage() of ggpubr package to organise these histogram into a 3 columns by 4 rows small multiple plot.\n\n\n\nShow the code\nAREA_SQM &lt;- distri(condo_resale.sf, AREA_SQM)\nAGE &lt;- distri(condo_resale.sf, AGE)\nPROX_CBD &lt;- distri(condo_resale.sf, PROX_CBD)\nPROX_CHILDCARE &lt;- distri(condo_resale.sf, PROX_CHILDCARE)\nPROX_ELDERLYCARE &lt;- distri(condo_resale.sf, PROX_ELDERLYCARE)\nPROX_URA_GROWTH_AREA &lt;- distri(condo_resale.sf, PROX_URA_GROWTH_AREA)\nPROX_HAWKER_MARKET &lt;- distri(condo_resale.sf, PROX_HAWKER_MARKET)\nPROX_KINDERGARTEN &lt;- distri(condo_resale.sf, PROX_KINDERGARTEN)\nPROX_MRT &lt;- distri(condo_resale.sf, PROX_MRT)\nPROX_PARK &lt;- distri(condo_resale.sf, PROX_PARK)\nPROX_PRIMARY_SCH &lt;- distri(condo_resale.sf, PROX_PRIMARY_SCH)\nPROX_TOP_PRIMARY_SCH &lt;- distri(condo_resale.sf, PROX_TOP_PRIMARY_SCH)\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#drawing-statistical-point-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#drawing-statistical-point-map",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.2 Drawing Statistical Point Map",
    "text": "6.2 Drawing Statistical Point Map\nHere, we will reveal the geospatial distribution condominium resale prices in Singapore.\n\nThe map will be prepared by using tmap package.\n\ntmap_mode(\"view\") to use the interactive mode of tmap\n\nThen, create an interactive point symbol map\n\ntm_dots() is used instead of tm_bubbles()\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\n\nLastly, tmap_mode(\"plot\") to display plot mode\n\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#simple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#simple-linear-regression-method",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.1 Simple Linear Regression Method",
    "text": "7.1 Simple Linear Regression Method\n\n7.1.1 Build Simple Linear Regression model\n\nBuild a simple linear regression model by using:\n\nSELLING_PRICE as the dependent variable and\nAREA_SQM as the independent variable.\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nsummary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\nThe generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, \n                data = condo_resale.sf)\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\n\nObservations\n\nSELLING_PRICE can be explained by using the formula:\n\n\\(y = -258121.1 + 14719x1\\)\n\nR-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE.\nThis will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and AREA_SQM are smaller than 0.001.\nIn view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected.\nAs a result, we will be able to infer that the B0 and B1 are good parameter estimates.\n\n\n\n\n7.1.2 Visualise best fit curve\nNext, we visualise the best fit curve on a scatterplot using lm() as a method function in ggplot’s geometry.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8, face= 'bold'),\n    axis.title.x = element_text(size = 8, face= 'bold'),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#multiple-linear-regression-method---visualise-relationships-of-independent-variables",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#multiple-linear-regression-method---visualise-relationships-of-independent-variables",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.2 Multiple Linear Regression Method - Visualise relationships of independent variables",
    "text": "7.2 Multiple Linear Regression Method - Visualise relationships of independent variables\n\nIt is important to ensure that the independent variables used are not highly correlated to each other.\nIf these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised.\nThis phenomenon is known as multicollinearity in statistics.\n\nCorrelation matrix is commonly used to visualise the relationships between the independent variables.\n\nBeside the pairs() of R, there are many packages that support the display of a correlation matrix.\nIn this section, the corrplot package will be used.\nTo plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\nMatrix reorder is very important for mining the hidden structure and pattern in the matrix.\nThere are 4 methods in corrplot (parameter order),\n\nnamely “AOE”, “FPC”, “hclust”, “alphabet”.\n\nAlphabet order is used to order the variables alphabetically.\n\n\ncolnames(condo_resale)\n\n [1] \"LATITUDE\"             \"LONGITUDE\"            \"POSTCODE\"            \n [4] \"SELLING_PRICE\"        \"AREA_SQM\"             \"AGE\"                 \n [7] \"PROX_CBD\"             \"PROX_CHILDCARE\"       \"PROX_ELDERLYCARE\"    \n[10] \"PROX_URA_GROWTH_AREA\" \"PROX_HAWKER_MARKET\"   \"PROX_KINDERGARTEN\"   \n[13] \"PROX_MRT\"             \"PROX_PARK\"            \"PROX_PRIMARY_SCH\"    \n[16] \"PROX_TOP_PRIMARY_SCH\" \"PROX_SHOPPING_MALL\"   \"PROX_SUPERMARKET\"    \n[19] \"PROX_BUS_STOP\"        \"NO_Of_UNITS\"          \"FAMILY_FRIENDLY\"     \n[22] \"FREEHOLD\"             \"LEASEHOLD_99YR\"      \n\n\n\npar(bg = '#E4D5C9')\n\ncorrplot(cor(condo_resale[, 5:23]), \n         diag = FALSE, \n         order = \"AOE\",\n         tl.pos = \"td\",\n         tl.srt = 45,\n         tl.cex = 0.5, \n         method = \"number\", \n         type = \"upper\",\n         bg = \"#eeeae2\")\n\n\n\n\n\nObservations\n\nFreehold is highly correlated to LEASE_99YEAR.\nThus, it is wiser to only include either one of them in the subsequent model building.\nAs a result, LEASE_99YEAR is excluded in the subsequent model building. -PROX_CHILDCARE and PROX_BUS_STOP also has a high correlation"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.3 Build a hedonic pricing model using multiple linear regression method",
    "text": "7.3 Build a hedonic pricing model using multiple linear regression method\n\n7.3.1 Calibrate the multiple linear regression model\nUse lm() to calibrate the multiple linear regression model.\n\n\nShow the code\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM \n                + AGE  \n                + PROX_CBD \n                + PROX_CHILDCARE \n                + PROX_ELDERLYCARE  \n                + PROX_URA_GROWTH_AREA \n                + PROX_HAWKER_MARKET  \n                + PROX_KINDERGARTEN  \n                + PROX_MRT  \n                + PROX_PARK  \n                + PROX_PRIMARY_SCH \n                + PROX_TOP_PRIMARY_SCH \n                + PROX_SHOPPING_MALL  \n                + PROX_SUPERMARKET \n                + PROX_BUS_STOP  \n                + NO_Of_UNITS \n                + FAMILY_FRIENDLY \n                + FREEHOLD, \n                #+ LEASEHOLD_99YR\n                data=condo_resale.sf)\n\nsummary(condo.mlr)\n\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\nObservations\n\nNot all the independent variables are statistically significant.\n\nExample: PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_TOP_PRIMARY_SCH, PROX_SUPERMARKET, ** value is high\n\nWe will revise the model by removing those variables which are not statistically significant.\nHere, by adding more variables, the adjusted r square actually improved.\n\nFrom the previous 0.45 increased to close to 0.64 percent.\n\nHow to interpret?\n\nIf you hold the rest of the independent variables constant (AGE onwards), means that for 1 unit increase of AREA_SQM, the price will increase by +12708\nSimilarly, for 1 unit increase of AGE, the resale price will drop by -24440 if we hold the other independent variables constant\n\n\n\n\n\n7.3.2 Calibrate the revised model\n\n\nShow the code\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM \n                + AGE  \n                + PROX_CBD \n                + PROX_CHILDCARE \n                + PROX_ELDERLYCARE  \n                + PROX_URA_GROWTH_AREA \n                #+ PROX_HAWKER_MARKET  \n                #+ PROX_KINDERGARTEN  \n                + PROX_MRT  \n                + PROX_PARK  \n                + PROX_PRIMARY_SCH \n                #+ PROX_TOP_PRIMARY_SCH \n                + PROX_SHOPPING_MALL  \n                #+ PROX_SUPERMARKET \n                + PROX_BUS_STOP  \n                + NO_Of_UNITS \n                + FAMILY_FRIENDLY \n                + FREEHOLD, \n                #+ LEASEHOLD_99YR\n                data=condo_resale.sf)\n\nols_regress(condo.mlr1)\n\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nHere, our condo.mlr1 will contain the coefficients, residuals, effects and fitted values. We will be using the residuals and extract it as a dataframe later on to examine it closely."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-gtsummary-method",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#preparing-publication-quality-table-gtsummary-method",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.4 Preparing Publication Quality Table: gtsummary method",
    "text": "7.4 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\nRegression ResultsWith Statistical Tests\n\n\n\n\nShow the code\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\nShow the code\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n\n\n7.4.1 Checking for multicollinearity\nWhen performing OLS regression, we can use olsrr, which provides a collection of very useful methods for building better multiple linear regression models: - comprehensive regression output - residual diagnostics - measures of influence - heteroskedasticity tests - collinearity diagnostics - model fit assessment - variable contribution assessment - variable selection procedures - the ols_vif_tol() of olsrr package is used to check if there are any strong signs of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\n\nObservations\nThere are no signs of multicollinearity among the independent variables as the VIF of the independent variables are less than 10.\n\n\n\n7.4.2 Test for Non-Linearity\n\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nHere, we use ols_plot_resid_fit() of olsrr package to perform linearity assumption test.\n\n\n\nShow the code\nols_plot_resid_fit(condo.mlr1) +\n    theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\n\n\n\n\nResults above show that:\n\nMost of the data points are scattered around the 0 line.\nHence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n\n7.4.3 Test for Normality Assumption\nUse ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\n\nShow the code\nols_plot_resid_hist(condo.mlr1) +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\n\n\n\n\n\nObservations\nReveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\n\nFor formal statistical test methods, the ols_test_normality() of olsrr package can be used as well:\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\n\nObservations\n\np-values of the four tests are way smaller than the alpha value of 0.05.\nHence we will reject the null hypothesis that the residual does NOT resemble normal distribution.\n\n\n\n\n7.4.4 Test for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes. Hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf simple into a SpatialPointsDataFrame.\n\n7.4.4.1 Export residual of hedonic pricing model\nExtract the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\n\n\n7.4.4.2 Join with condo_resale.sf object\nJoin the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\n  rename(`MLR_RES` = `condo.mlr1.residuals`)\n\nMLR_RES will be used for mapping purposes or for Moran I.\n\n\n7.4.4.3 Convert to SpatialPointsDataFrame\nConvert condo_resale.res.sf simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\n\n7.4.4.4 Display interactive point symbol map\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.4) +\n  tm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          palette = \"plasma\",\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nObservations\n\nThere is signs of spatial autocorrelation.\nTo prove that our observation is indeed true, the Moran’s I test will be performed"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#compute-the-distance-based-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#compute-the-distance-based-weight-matrix",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.1 Compute the distance-based weight matrix",
    "text": "8.1 Compute the distance-based weight matrix\nCompute the distance-based weight matrix by using dnearneigh() of spdep package\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), \n                 0, #lower distance bound\n                 1500, #upper distance bound\n                 longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#convert-to-a-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#convert-to-a-spatial-weights",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.2 Convert to a spatial weights",
    "text": "8.2 Convert to a spatial weights\nnb2listw() of spdep package will be used to convert the output neighbours lists (i.e. nb) into a spatial weights\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#perform-morans-i-test-for-residual-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#perform-morans-i-test-for-residual-spatial-autocorrelation",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.3 Perform Moran’s I test for residual spatial autocorrelation",
    "text": "8.3 Perform Moran’s I test for residual spatial autocorrelation\nUse lm.morantest() of spdep package\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\n\nObservations\n\np-value is less than 0.00000000000000022 which is less than the alpha value of 0.05.\nHence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.1 Build Fixed Bandwidth GWR Model",
    "text": "9.1 Build Fixed Bandwidth GWR Model\n\n9.1.1 Compute fixed bandwith\n\nbw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model.\n\nNotice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\n\nThere are 2 possible approaches to determine the stopping rule, they are:\n\nCV cross-validation approach and\nAIC corrected (AICc) approach.\n\nWe define the stopping rule using approach argument.\n\n\n\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ \n                     AREA_SQM + \n                     AGE + \n                     PROX_CBD + \n                     PROX_CHILDCARE + \n                     PROX_ELDERLYCARE + \n                     PROX_URA_GROWTH_AREA + \n                     PROX_MRT + \n                     PROX_PARK + \n                     PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + \n                     PROX_BUS_STOP + \n                     NO_Of_UNITS + \n                     FAMILY_FRIENDLY + \n                     FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\n\nObservations\n\nThe CV score is becoming smaller and smaller.\nThe recommended bandwidth is 971.3793 metres as it converged and stabilised here with the CV score of 4.721292e+14.\nThe projection coordinated system is SVY21 which is in metres. That’s why the results is showing in metres.\n\n\n\n\n9.1.2 Construct the fixed bandwidth gwr model\n\nTo calibrate the gwr model using fixed bandwidth and gaussian kernel.\nThe output is saved in a list of class “gwrm”.\nWe then display the model output\n\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ \n                         AREA_SQM + \n                         AGE  + \n                         PROX_CBD + \n                         PROX_CHILDCARE + \n                         PROX_ELDERLYCARE  + \n                         PROX_URA_GROWTH_AREA + \n                         PROX_MRT  + \n                         PROX_PARK  + \n                         PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL  + \n                         PROX_BUS_STOP  + \n                         NO_Of_UNITS + \n                         FAMILY_FRIENDLY + \n                         FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-08-28 15:07:17.141932 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-08-28 15:07:18.043429 \n\n\n\nObservations\nThe adjusted r-square of the gwr is 0.8430417 which is significantly better than the global multiple linear regression model of 0.6472."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#build-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.2 Build Adaptive Bandwidth GWR Model",
    "text": "9.2 Build Adaptive Bandwidth GWR Model\nCalibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n9.2.1 Compute adaptive bandwidth\n\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nNote: adaptive argument set to TRUE.\n\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ \n                     AREA_SQM + \n                     AGE + \n                     PROX_CBD + \n                     PROX_CHILDCARE + \n                     PROX_ELDERLYCARE + \n                     PROX_URA_GROWTH_AREA + \n                     PROX_MRT + \n                     PROX_PARK + \n                     PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + \n                     PROX_BUS_STOP + \n                     NO_Of_UNITS + \n                     FAMILY_FRIENDLY + \n                     FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive = TRUE, \n                   longlat = FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n::: {.lightbox .light data-latex=“light”} Observations\n\n30 is the recommended data points to be used\nYou can further improve this by transforming it into a function and making the approach, kernel, adaptive as input parameters\nWhen you have explicit projection, you set it longlat to FALSE.\n\nIf you set it to true, the algo will auto calculate it as Great Circle distances\n\n:::\n\n\n\n9.2.2 Construct the adaptive bandwidth gwr model\n\nCalibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel\nThen display the model output\n\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ \n                         AREA_SQM + \n                         AGE  + \n                         PROX_CBD + \n                         PROX_CHILDCARE + \n                         PROX_ELDERLYCARE  + \n                         PROX_URA_GROWTH_AREA + \n                         PROX_MRT  + \n                         PROX_PARK  + \n                         PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL  + \n                         PROX_BUS_STOP  + \n                         NO_Of_UNITS + \n                         FAMILY_FRIENDLY + \n                         FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.adaptive, \n                       kernel = 'gaussian', \n                       adaptive = TRUE,\n                       longlat = FALSE)\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-08-28 15:07:24.034888 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-08-28 15:07:24.938073 \n\n\n\nObservations\n\nThe adjusted r-square of the gwr is 0.8561185 which is significantly better than the global multiple linear regression model of 0.6472\nThe AICc the adaptive-bandwidth GWR model is 41982.22 which is even smaller than the AICc of the fixed-bandwidth GWR model, which is 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-sdf-into-sf-data.frame",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#converting-sdf-into-sf-data.frame",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "10.1 Converting SDF into sf data.frame",
    "text": "10.1 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\n\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf,\n                                  as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-local-r2",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-local-r2",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "10.2 Visualising local R2",
    "text": "10.2 Visualising local R2\n\nTo create an interactive point symbol map\nNote: currently, it is in plot mode\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-coefficient-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#visualising-coefficient-estimates",
    "title": "Hands-on Exercise 7: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "10.3 Visualising coefficient estimates",
    "text": "10.3 Visualising coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sf-data-frame-to-spatialpointdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#converting-sf-data-frame-to-spatialpointdataframe",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.1 Converting sf data frame to SPatialPointDataFrame",
    "text": "7.1 Converting sf data frame to SPatialPointDataFrame\nFirst, we need to convert our sf data frame to a SpatialPointDataFrame. This is because the functions in the GWmodel package require data in this format. We use the as_Spatial() function from the sf package to perform this conversion.\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#compute-adaptive-bandwidth",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#compute-adaptive-bandwidth",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.2 Compute adaptive bandwidth",
    "text": "7.2 Compute adaptive bandwidth\nNext, bw.gwr() of GWmodel package will be used to determine the optimal bandwidth to be used for the GWR model. The band.width is a parameter of the GWR model that determines the extent of the geographical area that influences a given location’s estimate\n\ncolnames(mdata)\n\n [1] \"resale_price\"             \"floor_area_sqm\"          \n [3] \"storey_order\"             \"remaining_lease_mths\"    \n [5] \"PROX_CBD\"                 \"PROX_ELDERLYCARE\"        \n [7] \"PROX_HAWKER\"              \"PROX_MRT\"                \n [9] \"PROX_PARK\"                \"PROX_GOOD_PRISCH\"        \n[11] \"PROX_MALL\"                \"PROX_CHAS\"               \n[13] \"PROX_SUPERMARKET\"         \"WITHIN_350M_KINDERGARTEN\"\n[15] \"WITHIN_350M_CHILDCARE\"    \"WITHIN_350M_BUS\"         \n[17] \"WITHIN_1KM_PRISCH\"        \"geometry\"                \n\n\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ \n                        floor_area_sqm +\n                        storey_order + \n                        remaining_lease_mths +\n                        PROX_CBD + \n                        PROX_ELDERLYCARE + \n                        PROX_HAWKER +\n                        PROX_MRT + \n                        PROX_PARK + \n                        #PROX_GOOD_PRISCH +\n                        PROX_MALL +\n                        #PROX_CHAS +\n                        PROX_SUPERMARKET + \n                        WITHIN_350M_KINDERGARTEN +\n                        WITHIN_350M_CHILDCARE + \n                        WITHIN_350M_BUS +\n                        WITHIN_1KM_PRISCH,\n                      data=train_data_sp,\n                      approach=\"CV\",\n                      kernel=\"gaussian\",\n                      adaptive=TRUE,\n                      longlat=FALSE)\n\n\nObservations\nIn the adaptive approach, the bandwidth is not a fixed distance but is determined based on the number of nearest neighbor points. This approach is particularly useful in areas where the density of data points varies.\nIn regions where data points are densely clustered, the adaptive bandwidth will be smaller, allowing the model to capture local variations more accurately. Conversely, in regions where data points are sparse, the adaptive bandwidth will be larger, ensuring that the model has enough data points to make reliable predictions.\nThe result from the bw.gwr() function indicates that the optimal bandwidth for this dataset is 40 neighbor points. This means that when estimating the parameters for a given location, the model will consider the 40 nearest neighbors."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#construct-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#construct-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.3 Construct adaptive bandwidth GWR model",
    "text": "7.3 Construct adaptive bandwidth GWR model\nNext, let us call the save bandwidth by using the code chunk below.\n\nwrite_rds(bw_adaptive, \"data/aspatial/bw_adaptive.rds\")\n\n\nbw_adaptive &lt;- read_rds(\"data/aspatial/bw_adaptive.rds\")\nbw_adaptive\n\n[1] 40\n\n\nThe code chunk below calibrates gwr-based hedonic pricing model using adaptive bandwidth and Gaussian kernel.\n\ngwr_adaptive &lt;- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + \n                            storey_order +\n                            remaining_lease_mths + \n                            PROX_CBD + \n                            PROX_ELDERLYCARE + \n                            PROX_HAWKER +\n                            PROX_MRT + \n                            PROX_PARK +\n                            #PROX_GOOD_PRISCH +\n                            PROX_MALL + \n                            #PROX_CHAS +\n                            PROX_SUPERMARKET + \n                            WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + \n                            WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data = train_data_sp,\n                          bw = bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive = TRUE,\n                          longlat = FALSE)\n\nThe code chunk below will be used to save the model in rds format for future use.\n\nwrite_rds(gwr_adaptive, \"data/aspatial/gwr_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#retrieve-gwr-output-object",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#retrieve-gwr-output-object",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.4 Retrieve GWR output object",
    "text": "7.4 Retrieve GWR output object\nThe code chunk below will be used to retrieve the save gwr model object.\n\ngwr_adaptive &lt;- read_rds(\"data/aspatial/gwr_adaptive.rds\")\n\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-09-01 00:05:34.593548 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\n   storey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2478e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2195e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1632e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1823e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2411e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5188e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0231e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.9 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209.1 \n   Residual sum of squares: 4.829191e+12 \n   R-square value:  0.967657 \n   Adjusted R-square value:  0.9611534 \n\n   ***********************************************************************\n   Program stops at: 2024-09-01 00:07:49.648943"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#convert-test-data-from-sf-data-frame-to-spatialpointdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#convert-test-data-from-sf-data-frame-to-spatialpointdataframe",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.5 Convert test data from sf data frame to SpatialPointDataFrame",
    "text": "7.5 Convert test data from sf data frame to SpatialPointDataFrame\nWe need to convert our test data from an sf data frame to a SpatialPointDataFrame. This is because the functions in the GWmodel package require data in this format. We use the as_Spatial() function from the sf package to perform this conversion.\n\ntest_data_sp &lt;- test_data %&gt;%\n  as_Spatial()\n\ntest_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-adaptive-bandwidth-for-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-adaptive-bandwidth-for-test-data",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.6 Computing adaptive bandwidth for test data",
    "text": "7.6 Computing adaptive bandwidth for test data\nNext, similar to the process performed for training data, we use the bw.gwr() function from the GWmodel package to determine the optimal bandwidth for our GWR model on the test data.\n\ngwr_bw_test_adaptive &lt;- bw.gwr(resale_price ~ \n                                 floor_area_sqm +\n                                 storey_order + \n                                 remaining_lease_mths +\n                                 PROX_CBD + \n                                 PROX_ELDERLYCARE + \n                                 PROX_HAWKER +\n                                 PROX_MRT + \n                                 PROX_PARK + \n                                 #PROX_GOOD_PRISCH +\n                                 PROX_MALL + \n                                 #PROX_CHAS +\n                                 PROX_SUPERMARKET + \n                                 WITHIN_350M_KINDERGARTEN +\n                                 WITHIN_350M_CHILDCARE + \n                                 WITHIN_350M_BUS +\n                                 WITHIN_1KM_PRISCH,\n                               data = test_data_sp,\n                               approach = \"CV\",\n                               kernel = \"gaussian\",\n                               adaptive = TRUE,\n                               longlat = FALSE)\n\n\nwrite_rds(gwr_bw_test_adaptive, \"data/aspatial/gwr_bw_test_adaptive.rds\")\n\n\ngwr_bw_test_adaptive &lt;- read_rds(\"data/aspatial/gwr_bw_test_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-predicted-values-of-the-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#computing-predicted-values-of-the-test-data",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "7.7 Computing predicted values of the test data",
    "text": "7.7 Computing predicted values of the test data\nFinally, we use the gwr.predict() function from the GWmodel package to compute the predicted values of the test data based on our GWR model. We specify our formula, training data, test data, bandwidth, kernel type, and set adaptive=TRUE and longlat=FALSE.\n\ngwr_pred &lt;- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extracting-coordinates-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#extracting-coordinates-data",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "8.1 Extracting coordinates data",
    "text": "8.1 Extracting coordinates data\nThe code chunk below extract the x, y coordinates of the full, training and test data sets using st_coordinates() function from the sf package.\n\ncoords &lt;- st_coordinates(mdata)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\nSave the output into rds for future use.\n\ncoords_train &lt;- write_rds(coords_train, \"data/geospatial/coords_train.rds\")\ncoords_test &lt;- write_rds(coords_test, \"data/geospatial/coords_test.rds\")\n\n\ncoords_train &lt;- read_rds(\"data/geospatial/coords_train.rds\")\ncoords_test &lt;- read_rds(\"data/geospatial/coords_test.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#dropping-geometry-field",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#dropping-geometry-field",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "8.2 Dropping geometry field",
    "text": "8.2 Dropping geometry field\nNext, we drop the geometry column from the sf data frame. This is because the geometry column is not needed for our upcoming analysis. We use the st_drop_geometry() function from the sf package to perform this operation.\n\ntrain_data &lt;- train_data %&gt;% \n  st_drop_geometry()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#calibrating-using-training-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#calibrating-using-training-data",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "10.1 Calibrating using training data",
    "text": "10.1 Calibrating using training data\nIn this section, we will calibrate a model to predict HDB resale prices using the grf() function from the SpatialML package. This function fits a geographically weighted random forest model, which is a type of model that takes into account the spatial relationships between observations.\n\nset.seed(1234)\n\ngwRF_adaptive &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n\nwrite_rds(gwRF_adaptive, \"data/aspatial/gwRF_adaptive.rds\")\n\n\ngwRF_adaptive &lt;- read_rds(\"data/aspatial/gwRF_adaptive.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#predicting-by-using-test-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#predicting-by-using-test-data",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "10.2 Predicting by using test data",
    "text": "10.2 Predicting by using test data\n\n10.2.1 Preparing the test data\nFirst, combine the test data with the corresponding coordinates data. None of the rows from our data sets were sorted, so using cbind() is sufficient, st_drop_geometry() function is used to remove the geometry column.\n\ntest_data &lt;- cbind(test_data, coords_test) %&gt;%\n  st_drop_geometry()\n\n\n\n10.2.2 Predicting with test data\nThe function predict.grf() of SpatialML will be used to predict the resale value which uses the test data and gwRF_adaptive model calibrated earlier.\n\ngwRF_pred &lt;- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nGRF_pred &lt;- write_rds(gwRF_pred, \"data/aspatial/GRF_pred.rds\")\n\n\n\n10.2.3 Converting predictive output into data frame\nThe output of the predict.grf() function is a vector of predicted values. For further visualization and analysis, it’s useful to convert it into a data frame.\n\nGRF_pred &lt;- read_rds(\"data/aspatial/GRF_pred.rds\")\nGRF_pred_df &lt;- as.data.frame(GRF_pred)\n\nWe then use cbind() to append the predicted values into the test data.\n\ntest_data_p &lt;- cbind(test_data, GRF_pred_df)\n\n\nwrite_rds(test_data_p, \"data/aspatial/test_data_p.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#calculating-root-mean-square-error-rmse",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#calculating-root-mean-square-error-rmse",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "10.3 Calculating Root Mean Square Error (RMSE)",
    "text": "10.3 Calculating Root Mean Square Error (RMSE)\nRMSE measures how far the predicted values are from the observed values in a regression analysis. The Metrics package contains the rmse() function which can be used to compute RMSE.\n\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n\n[1] 27302.9\n\n\nThe lower the RMSE value, the better the predictive model is."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-predicted-values",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-predicted-values",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "10.4 Visualising Predicted Values",
    "text": "10.4 Visualising Predicted Values\nThe individual prices can be plotted in the scatterplot, where plots further away from the regression line were not as well predicted than plot prices closer to the regression line.\n\ntest_data_p &lt;- test_data_p[, !(names(test_data_p) %in% c(\"X.1\", \"Y.1\"))]\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point(alpha=0.5) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"solid\") +\n  theme(panel.background=element_rect(fill='grey96'),\n        plot.background=element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8: Geographically Weighted Predictive Models",
    "section": "",
    "text": "Predictive modelling utilises statistical or machine learning techniques to predict outcomes. A set of known outcomes and predictors are used to calibrate predictive models.\nGeospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.\n\nLearning Outcome\nThis exercise aims to build predictive models using geographical random forest. Along the way, the intended acquired skills are:\n\nPreparing training and test data sets using sampling methods\nCalibrating predictive models using both geospatial statistical learning and machine learning methods\nComparing and selecting the best model for predicting the future outcome and,\nPredicting future outcomes using the best calibrated model"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-automatic-bandwidth-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02a.html#working-with-different-automatic-bandwidth-methods",
    "title": "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods",
    "section": "6.2 Working with different automatic bandwidth methods",
    "text": "6.2 Working with different automatic bandwidth methods\nBeside bw.diggle(), there are 3 other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using:\n\nbw.CvL()bw.scott()bw.ppl()bw.diggle()\n\n\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.159749 1.396455 \n\n\n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.3066986 \n\n\n\n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm as it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThis will be used to compare the output of using bw.diggle() and bw.ppl() methods.\n\npar(bg = '#E4D5C9')\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\n\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 2: Importing Data for Thailand Road Accident Case Study",
    "section": "",
    "text": "Reminders\nCheck units of measurement in projected coordinates system"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#traffic-accident-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#traffic-accident-data",
    "title": "In-class Exercise 2: Importing Data for Thailand Road Accident Case Study",
    "section": "2.1 Traffic Accident Data",
    "text": "2.1 Traffic Accident Data\n\nrdacc_sf &lt;- read_csv(\"data/geospatial/thai_road_accident_2019_2022.csv\") %&gt;%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude !=\"\") %&gt;% \n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs = 4326) %&gt;% \n  st_transform(crs = 32647)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#administrative-boundary",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#administrative-boundary",
    "title": "In-class Exercise 2: Importing Data for Thailand Road Accident Case Study",
    "section": "2.1 Administrative Boundary",
    "text": "2.1 Administrative Boundary\n\nadminboundary &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"geoBoundaries-THA-ADM0\")\n\nReading layer `geoBoundaries-THA-ADM0' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34381 ymin: 5.612851 xmax: 105.6368 ymax: 20.46483\nGeodetic CRS:  WGS 84\n\n\n\npar(bg = '#E4D5C9')\n\nplot(adminboundary)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#thai-roads",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#thai-roads",
    "title": "In-class Exercise 2: Importing Data for Thailand Road Accident Case Study",
    "section": "2.3 Thai Roads",
    "text": "2.3 Thai Roads\n\nroads &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"hotosm_tha_roads_lines_shp\")\n\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\kytjy\\ISSS626-GAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "",
    "text": "Road traffic injuries pose a significant public health issue in Thailand, with a high number of fatalities, injuries, and disabilities each year. These incidents have a profound impact not only on the victims and their families but also on society and the nation as a whole. According to the World Health Organization (WHO), approximately 20,000 people lose their lives in road accidents annually, equating to about 56 deaths each day.\nDespite numerous government initiatives to reduce road casualties, the situation has seen minimal improvement. These issues underscore the need for a deeper understanding of road traffic accidents, which can be largely attributed to two primary factors: behavioral and environmental.\nBehavioral factors, such as driver behavior and performance, are significant contributors to traffic accidents. These factors include driving style and skills, as well as direct and indirect driving behaviors. Environmental factors encompass conditions such as poor visibility during adverse weather (e.g., heavy rain or fog) and challenging road features (e.g., sharp bends, slippery slopes, and blind spots).\nPrevious studies have highlighted the value of Spatial Point Patterns Analysis in examining road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, neglecting the influence of temporal factors such as season, day of the week, or time of day.\nIn light of this, it is essential to investigate the factors affecting road traffic accidents in the Bangkok Metropolitan Region (BMR) using both spatial and spatio-temporal point patterns analysis methods. This approach aims to identify the leading causes of accidents and provide insights that can guide the development of effective policies and interventions to enhance road safety."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\nIn this exercise, we will be using the following packages:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nsf\nFor importing, managing, and handling geospatial data\n\n\nspatstat\nFor point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n\n\nsfdep\nUsed to compute spatial weights\n\n\ntmap\nFor thematic mapping\n\n\nleaflet\nFor interactive maps\n\n\ntidyverse\nFor non-spatial data wrangling\n\n\nDT, knitr, kableExtra, gtsummary\nFor building tables\n\n\nplotly\nTo create interactive plots\n\n\n\n\n\n\n\nThe following code chunk uses p_load() of pacman package to check if the aforementioned packages are installed in the computer. If they are, the libraries will be called into R.\n\npacman::p_load(sf, sfdep, spatstat,\n               tmap, leaflet, \n               raster,\n               tidyverse,\n               DT, knitr, kableExtra, gtsummary,\n               plotly)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-data",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "2.2 The Data",
    "text": "2.2 The Data\n\n\n\n\n\n\n\n\nFile\nSource\nScreenshot\n\n\n\n\nThailand - SubnationalAdministrativeBoundaries, in SHP file format\nThere are 3 administrative levels in the shapefile: 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries. We will use level 1 to filter for the Bangkok Metropolitan Region.\nHumanitarian Data Exchange\n\n\n\nThailand Roads (OpenStreetMap Export), in SHP file format\nHumanitarian Data Exchange\n\n\n\n\nThailand Road Accident [2019-2022], in CSV format\nThis dataset provides a comprehensive statistics on recorded road accidents in Thailand from 2019 to 2022, including time location, accident type, weather condition, and road characteristics.\nKaggle\n\n\n\n\n\n2.2.1 Traffic Accident Data\nread_csv() of the readr package allows us to import csv files into R Studio.\n\naccidents &lt;- read_csv(\"data/geospatial/thai_road_accident_2019_2022.csv\")\n\n\nglimpse(accidents)\n\nRows: 81,735\nColumns: 18\n$ acc_code                    &lt;dbl&gt; 571905, 3790870, 599075, 571924, 599523, 5…\n$ incident_datetime           &lt;dttm&gt; 2019-01-01 00:00:00, 2019-01-01 00:03:00,…\n$ report_datetime             &lt;dttm&gt; 2019-01-02 06:11:00, 2020-02-20 13:48:00,…\n$ province_th                 &lt;chr&gt; \"ลพบุรี\", \"อุบลราชธานี\", \"ประจวบคีรีขันธ์\", \"เชียงใ…\n$ province_en                 &lt;chr&gt; \"Loburi\", \"Ubon Ratchathani\", \"Prachuap Kh…\n$ agency                      &lt;chr&gt; \"department of rural roads\", \"department o…\n$ route                       &lt;chr&gt; \"แยกทางหลวงหมายเลข 21 (กม.ที่ 31+000) - บ้านวั…\n$ vehicle_type                &lt;chr&gt; \"motorcycle\", \"private/passenger car\", \"mo…\n$ presumed_cause              &lt;chr&gt; \"driving under the influence of alcohol\", …\n$ accident_type               &lt;chr&gt; \"other\", \"rollover/fallen on straight road…\n$ number_of_vehicles_involved &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, …\n$ number_of_fatalities        &lt;dbl&gt; 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 0, 0, …\n$ number_of_injuries          &lt;dbl&gt; 2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 1, 1, …\n$ weather_condition           &lt;chr&gt; \"clear\", \"clear\", \"clear\", \"clear\", \"clear…\n$ latitude                    &lt;dbl&gt; 14.959105, 15.210738, 12.374259, 18.601721…\n$ longitude                   &lt;dbl&gt; 100.87346, 104.86269, 99.90795, 98.80420, …\n$ road_description            &lt;chr&gt; \"straight road\", \"straight road\", \"wide cu…\n$ slope_description           &lt;chr&gt; \"no slope\", \"no slope\", \"slope area\", \"no …\n\n\nA quick look into the data using glimpse() of the dplyr package reveals that there are 18 variables in the data, including:\n\n\n\n\n\n\n\nColumn Name\nDescription\n\n\n\n\nacc_code\nThe accident code or identifier.\n\n\nincident_datetime\nThe date and time of the accident occurrence.\n\n\nreport_datetime\nThe date and time when the accident was reported.\n\n\nprovince_th\nThe name of the province in Thailand, written in Thai.\n\n\nprovince_en\nThe name of the province in Thailand, written in English.\n\n\nagency\nThe government agency responsible for the road and traffic management.\n\n\nroute\nThe route or road segment where the accident occurred.\n\n\nvehicle_type\nThe type of vehicle involved in the accident.\n\n\npresumed_cause\nThe presumed cause or reason for the accident.\n\n\naccident_type\nThe type of nature of the accident.\n\n\nnumber_of_vehicles_involved\nThe number of vehicles involved in the accident.\n\n\nnumber_of_fatalities\nThe number of fatalities resulting from the accident.\n\n\nnumber_of_injuries\nThe number of injuries resulting from the accident.\n\n\nweather_condition\nThe weather condition at the time of the accident.\n\n\nlatitude\nThe latitude coordinate of the accident location.\n\n\nlongitude\nThe longitude coordinate of the accident location.\n\n\nroad_description\nThe description of the road type or configuration where the accident occurred.\n\n\nslope_description\nThe description of the slope condition at the accident location.\n\n\n\nSince the province_th and route columns are in Thai, I will remove them. The province column is already available in English, and the route information can be projected using the latitude and longitude columns. Additionally, I will remove the report_datetime column and use incident_datetime for our analysis.\n\naccidents &lt;- accidents %&gt;% \n  select(-c(province_th, \n            route, \n            report_datetime))\n\nThe gtsummary package provides us with descriptive statistics of the dataset and also includes the amount of missingness in each variable.\n\n\n\n\n\n\n  Table of Variable Summary\n  \n    \n    \n      Characteristic\n      N\n      N = 81,7351\n    \n  \n  \n    acc_code\n81,735\n3,824,084 (3,789,460, 5,831,089)\n    incident_datetime\n81,735\n2019-01-01 to 2022-12-31 23:55:00\n    province_en\n81,735\n\n        Amnat Charoen\n\n196 (0.2%)\n        Ang Thong\n\n1,125 (1.4%)\n        Bangkok\n\n6,439 (7.9%)\n        buogkan\n\n583 (0.7%)\n        Buri Ram\n\n327 (0.4%)\n        Chachoengsao\n\n1,407 (1.7%)\n        Chai Nat\n\n692 (0.8%)\n        Chaiyaphum\n\n471 (0.6%)\n        Chanthaburi\n\n1,360 (1.7%)\n        Chiang Mai\n\n3,407 (4.2%)\n        Chiang Rai\n\n858 (1.0%)\n        Chon Buri\n\n4,120 (5.0%)\n        Chumphon\n\n1,039 (1.3%)\n        Kalasin\n\n659 (0.8%)\n        Kamphaeng Phet\n\n822 (1.0%)\n        Kanchanaburi\n\n1,165 (1.4%)\n        Khon Kaen\n\n1,224 (1.5%)\n        Krabi\n\n741 (0.9%)\n        Lampang\n\n1,018 (1.2%)\n        Lamphun\n\n744 (0.9%)\n        Loburi\n\n1,036 (1.3%)\n        Loei\n\n742 (0.9%)\n        Mae Hong Son\n\n308 (0.4%)\n        Maha Sarakham\n\n832 (1.0%)\n        Mukdahan\n\n668 (0.8%)\n        Nakhon Nayok\n\n386 (0.5%)\n        Nakhon Pathom\n\n891 (1.1%)\n        Nakhon Phanom\n\n462 (0.6%)\n        Nakhon Ratchasima\n\n3,330 (4.1%)\n        Nakhon Sawan\n\n1,403 (1.7%)\n        Nakhon Si Thammarat\n\n1,363 (1.7%)\n        Nan\n\n931 (1.1%)\n        Narathiwat\n\n477 (0.6%)\n        Nong Bua Lam Phu\n\n288 (0.4%)\n        Nong Khai\n\n297 (0.4%)\n        Nonthaburi\n\n827 (1.0%)\n        Pathum Thani\n\n1,923 (2.4%)\n        Pattani\n\n395 (0.5%)\n        Phangnga\n\n328 (0.4%)\n        Phatthalung\n\n1,068 (1.3%)\n        Phayao\n\n543 (0.7%)\n        Phetchabun\n\n1,704 (2.1%)\n        Phetchaburi\n\n873 (1.1%)\n        Phichit\n\n226 (0.3%)\n        Phitsanulok\n\n800 (1.0%)\n        Phra Nakhon Si Ayutthaya\n\n1,571 (1.9%)\n        Phrae\n\n1,466 (1.8%)\n        Phuket\n\n444 (0.5%)\n        Prachin Buri\n\n809 (1.0%)\n        Prachuap Khiri Khan\n\n1,141 (1.4%)\n        Ranong\n\n140 (0.2%)\n        Ratchaburi\n\n497 (0.6%)\n        Rayong\n\n770 (0.9%)\n        Roi Et\n\n721 (0.9%)\n        Sa Kaeo\n\n699 (0.9%)\n        Sakon Nakhon\n\n973 (1.2%)\n        Samut Prakan\n\n2,241 (2.7%)\n        Samut Sakhon\n\n1,015 (1.2%)\n        Samut Songkhram\n\n524 (0.6%)\n        Saraburi\n\n1,158 (1.4%)\n        Satun\n\n321 (0.4%)\n        Si Sa Ket\n\n739 (0.9%)\n        Sing Buri\n\n448 (0.5%)\n        Songkhla\n\n1,231 (1.5%)\n        Sukhothai\n\n1,305 (1.6%)\n        Suphan Buri\n\n3,056 (3.7%)\n        Surat Thani\n\n1,983 (2.4%)\n        Surin\n\n843 (1.0%)\n        Tak\n\n1,859 (2.3%)\n        Trang\n\n784 (1.0%)\n        Trat\n\n469 (0.6%)\n        Ubon Ratchathani\n\n751 (0.9%)\n        Udon Thani\n\n946 (1.2%)\n        unknown\n\n34 (&lt;0.1%)\n        Uthai Thani\n\n503 (0.6%)\n        Uttaradit\n\n949 (1.2%)\n        Yala\n\n343 (0.4%)\n        Yasothon\n\n504 (0.6%)\n    agency\n81,735\n\n        department of highways\n\n75,304 (92%)\n        department of rural roads\n\n5,115 (6.3%)\n        expressway authority of thailand\n\n1,316 (1.6%)\n    vehicle_type\n81,735\n\n        4-wheel pickup truck\n\n28,445 (35%)\n        6-wheel truck\n\n3,019 (3.7%)\n        7-10-wheel truck\n\n2,364 (2.9%)\n        bicycle\n\n257 (0.3%)\n        large passenger vehicle\n\n421 (0.5%)\n        large truck with trailer\n\n6,257 (7.7%)\n        motorcycle\n\n14,874 (18%)\n        motorized tricycle\n\n294 (0.4%)\n        other\n\n3,513 (4.3%)\n        passenger pickup truck\n\n325 (0.4%)\n        pedestrian\n\n219 (0.3%)\n        private/passenger car\n\n20,814 (25%)\n        three-wheeled vehicle\n\n28 (&lt;0.1%)\n        tractor/agricultural vehicle\n\n63 (&lt;0.1%)\n        van\n\n842 (1.0%)\n    presumed_cause\n81,735\n\n        abrupt lane change\n\n134 (0.2%)\n        aggressive driving/overtaking\n\n12 (&lt;0.1%)\n        brake/anti-lock brake system failure\n\n55 (&lt;0.1%)\n        cutting in closely by people/vehicles/animals\n\n6,724 (8.2%)\n        dangerous curve\n\n61 (&lt;0.1%)\n        debris/obstruction on the road\n\n294 (0.4%)\n        disabled vehicle without proper signals\n\n37 (&lt;0.1%)\n        disabled vehicle without proper signals/signs\n\n5 (&lt;0.1%)\n        driving in the wrong lane\n\n37 (&lt;0.1%)\n        driving under the influence of alcohol\n\n1,464 (1.8%)\n        driving without headlights/illumination\n\n20 (&lt;0.1%)\n        external disturbance\n\n2 (&lt;0.1%)\n        failure to signal enter/exit parking\n\n43 (&lt;0.1%)\n        failure to yield right of way\n\n133 (0.2%)\n        failure to yield/signal\n\n215 (0.3%)\n        falling asleep\n\n4,700 (5.8%)\n        ignoring stop sign while leaving intersection\n\n79 (&lt;0.1%)\n        illegal overtaking\n\n445 (0.5%)\n        inadequate visibility\n\n13 (&lt;0.1%)\n        insufficient light\n\n69 (&lt;0.1%)\n        internal disturbance\n\n1 (&lt;0.1%)\n        loss of control\n\n49 (&lt;0.1%)\n        medical condition\n\n40 (&lt;0.1%)\n        narrow road\n\n10 (&lt;0.1%)\n        navigation equipment failure\n\n1 (&lt;0.1%)\n        no presumed cause related to driver\n\n1 (&lt;0.1%)\n        no presumed cause related to road conditions\n\n4 (&lt;0.1%)\n        no presumed cause related to vehicle conditions\n\n1 (&lt;0.1%)\n        no road divider lines\n\n1 (&lt;0.1%)\n        no traffic light system\n\n1 (&lt;0.1%)\n        no traffic signs\n\n9 (&lt;0.1%)\n        obstruction in sight\n\n7 (&lt;0.1%)\n        other\n\n1,576 (1.9%)\n        overloaded vehicle\n\n176 (0.2%)\n        repair/construction on the road\n\n6 (&lt;0.1%)\n        reversing vehicle\n\n70 (&lt;0.1%)\n        road in poor condition\n\n7 (&lt;0.1%)\n        running red lights/traffic signals\n\n911 (1.1%)\n        slippery road\n\n85 (0.1%)\n        speeding\n\n60,373 (74%)\n        straddling lanes\n\n31 (&lt;0.1%)\n        sudden stop\n\n48 (&lt;0.1%)\n        tailgating\n\n181 (0.2%)\n        traffic light system failure\n\n3 (&lt;0.1%)\n        turn signal system failure\n\n2 (&lt;0.1%)\n        unfamiliarity with the route/unskilled driving\n\n677 (0.8%)\n        using mobile phone while driving\n\n33 (&lt;0.1%)\n        using psychoactive substances\n\n1 (&lt;0.1%)\n        vehicle electrical system failure\n\n11 (&lt;0.1%)\n        vehicle equipment failure\n\n2,747 (3.4%)\n        worn-out/tire blowout\n\n127 (0.2%)\n        เส้นแบ่งทิศทางจราจรชำรุด\n\n1 (&lt;0.1%)\n        ป้ายจราจรชำรุด\n\n1 (&lt;0.1%)\n        มึนเมาจากแอลกอฮอล์\n\n1 (&lt;0.1%)\n    accident_type\n81,735\n\n        collision at intersection corner\n\n1,067 (1.3%)\n        collision during overtaking\n\n83 (0.1%)\n        collision with obstruction (on road surface)\n\n2,742 (3.4%)\n        head-on collision (not overtaking)\n\n3,944 (4.8%)\n        other\n\n4,188 (5.1%)\n        pedestrian collision\n\n945 (1.2%)\n        rear-end collision\n\n24,901 (30%)\n        rollover/fallen on curved road\n\n10,443 (13%)\n        rollover/fallen on straight road\n\n33,046 (40%)\n        side collision\n\n336 (0.4%)\n        turning/retreating collision\n\n40 (&lt;0.1%)\n    number_of_vehicles_involved\n81,735\n1.00 (1.00, 2.00)\n    number_of_fatalities\n81,735\n0.00 (0.00, 0.00)\n    number_of_injuries\n81,735\n0.00 (0.00, 1.00)\n    weather_condition\n81,735\n\n        clear\n\n69,943 (86%)\n        dark\n\n368 (0.5%)\n        foggy\n\n544 (0.7%)\n        land slide\n\n1 (&lt;0.1%)\n        natural disaster\n\n47 (&lt;0.1%)\n        other\n\n162 (0.2%)\n        rainy\n\n10,670 (13%)\n    latitude\n81,376\n14.5 (13.5, 16.6)\n        NA\n\n359\n    longitude\n81,376\n100.56 (99.89, 101.29)\n        NA\n\n359\n    road_description\n81,735\n\n        bridge (across river/canal)\n\n5 (&lt;0.1%)\n        connecting to private area\n\n463 (0.6%)\n        connecting to public/commercial area\n\n1,001 (1.2%)\n        connecting to school area\n\n121 (0.1%)\n        four-way intersection\n\n348 (0.4%)\n        grade-separated intersection/ramps\n\n184 (0.2%)\n        lane-changing area\n\n7 (&lt;0.1%)\n        merge lane\n\n19 (&lt;0.1%)\n        motorcycle lane\n\n1 (&lt;0.1%)\n        other\n\n7,614 (9.3%)\n        pedestrian path\n\n1 (&lt;0.1%)\n        roundabout\n\n11 (&lt;0.1%)\n        sharp curve\n\n616 (0.8%)\n        straight road\n\n58,183 (71%)\n        t-intersection\n\n414 (0.5%)\n        u-turn area\n\n10 (&lt;0.1%)\n        wide curve\n\n12,552 (15%)\n        y-intersection\n\n184 (0.2%)\n        zebra crossing/pedestrian crossing\n\n1 (&lt;0.1%)\n    slope_description\n81,735\n\n        no slope\n\n65,797 (81%)\n        other\n\n11,575 (14%)\n        slope area\n\n4,363 (5.3%)\n  \n  \n  \n    \n      1 Median (IQR); Range; n (%)\n    \n  \n\n\n\n\n\nObservations\n\nIn terms of data health, we can see that there are 359 missing records in the latitude and longitude columns. Since these missing records make up &lt;5% of the 81,735 total road accidents recorded, we can remove these from our data set.\nWe can use latitude and longitude columns to convert the data into a sf object and transform the coordinates into CRS. The EPSG code for latitude-longitude projection is 4326.\nThailand adopts EPSG 32647, which is in metres.\nSince the Bangkok Metropolitan Region is made up of 6 provinces – Bangkok, Nonthaburi, Nakhon Pathom, Pathum Thani, Samut Prakan, and Samut Sakhon, we can use the province_en column to filter for these provinces.\n\n\nThe code chunk performs several functions for preparing and transforming the dataset:\n\nThe filter() function from the dplyr package is used to remove rows with missing or empty longitude and latitude values, ensuring that the dataset contains only valid spatial data.\nThe sf package’s st_as_sf() function converts the data frame into a spatial object (simple feature) using the longitude and latitude columns, setting the coordinate reference system (CRS) to EPSG 4326.\nThe spatial data is reprojected to EPSG 32647 (a local UTM projection used in Thailand) using st_transform() from the sf package.\nThe filter() function is also applied to retain data exclusively from the Bangkok Metropolitan Region (BMR) by filtering for specific provinces.\n\n\naccidents_bmr &lt;- accidents %&gt;% \n  \n  # Removes rows with missing longitude and latitude values\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude !=\"\") %&gt;% \n  \n  # Converts data to an sf object using longitude and latitude \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  \n  # Transforms to the projection used in Thailand\n  st_transform(crs = 32647) %&gt;% \n  \n  # Filter for BMR data\n  filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")) \n\nLet’s perform a check for duplicated records before we move on. The code chunk below identifies all rows in the accidents_bmr dataframe that have an exact duplicate (i.e., another row with the same values in all columns) using group_by_all().\n\nduplicate &lt;- accidents_bmr %&gt;% \n  group_by_all() %&gt;% \n  filter(n()&gt;1) %&gt;% \n  ungroup()\n  \nduplicate\n\nSimple feature collection with 0 features and 13 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 0 × 14\n# ℹ 14 variables: acc_code &lt;dbl&gt;, incident_datetime &lt;dttm&gt;, province_en &lt;chr&gt;,\n#   agency &lt;chr&gt;, vehicle_type &lt;chr&gt;, presumed_cause &lt;chr&gt;,\n#   accident_type &lt;chr&gt;, number_of_vehicles_involved &lt;dbl&gt;,\n#   number_of_fatalities &lt;dbl&gt;, number_of_injuries &lt;dbl&gt;,\n#   weather_condition &lt;chr&gt;, road_description &lt;chr&gt;, slope_description &lt;chr&gt;,\n#   geometry &lt;GEOMETRY [m]&gt;\n\n\nResults confirm that there are no duplicated records found.\n\nwrite_rds(accidents_bmr, \"data/rds/accidents_bmr.rds\")\n\n\naccidents_bmr &lt;- read_rds(\"data/rds/accidents_bmr.rds\")\n\nLet’s take a quick glance at the points:\n\ntmap_mode('plot')\n\ntm_shape(accidents_bmr) +\n  tm_dots(col = \"#800200\",\n          alpha=0.4, \n          size=0.05) +\n  tm_layout(main.title = \"Accidents\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n2.2.2 Administrative Boundary\nThe adminboundary dataset, which we downloaded from HDX, is in ESRI shapefile format. To use this data in an R-environment, we need to import it as an sf object. We can do this using the st_read() function of the sf package. This function reads the shapefile data and returns an sf object that can be used for further analysis.\nIn the code chunk below, we use %&gt;% operator is used to pipe the output of st_read() to the st_transform() function. Since the dataset we are using is the Thailand boundary, we need to assign the standard coordinate reference system for Thailand, which is EPSG 32647. st_transform() function transforms the coordinate reference system of the sf object to 32647.\n\nadminboundary &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"tha_admbnda_adm1_rtsd_20220121\") %&gt;% \n  st_transform(crs = 32647)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(adminboundary)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nPreliminary look into the adminboundary data shows that ADM1_EN can be used to filter for the 6 regions in BMR.\n\nglimpse(adminboundary)\n\nRows: 77\nColumns: 17\n$ Shape_Leng &lt;dbl&gt; 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area &lt;dbl&gt; 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    &lt;chr&gt; \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    &lt;chr&gt; \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE &lt;chr&gt; \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    &lt;chr&gt; \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    &lt;chr&gt; \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE &lt;chr&gt; \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       &lt;date&gt; 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    &lt;date&gt; 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    &lt;date&gt; -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n\n\n\nadminboundary_bmr &lt;- adminboundary %&gt;% \n  select(\"ADM1_EN\") %&gt;% \n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n\n\nwrite_rds(adminboundary_bmr, \"data/rds/adminboundary_bmr.rds\")\n\n\nadminboundary_bmr &lt;- read_rds(\"data/rds/adminboundary_bmr.rds\")\n\nAfter importing the dataset, we will plot it to see how it looks using tmap.\n\ntmap_mode('plot')\n\ntm_shape(adminboundary_bmr)+\n  tm_fill(col =\"#f4e9e8\", \n          alpha = 0.6) +\n  tm_borders(col = \"#ddafa1\",\n             lwd = 0.1,  \n             alpha = 1) +\n  tm_layout(main.title = \"BMR Administrative Boundary\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\nLet’s plot out the administrative boundaries together with the points of accidents:\n\ntmap_mode('plot')\n\ntm_shape(adminboundary_bmr) +\n  tm_fill(col =\"#f4e9e8\", \n          alpha = 0.6) +\n  tm_borders(col = \"#ddafa1\",\n             lwd = 0.1,  \n             alpha = 1) +\ntm_shape(accidents_bmr) +\n  tm_dots(col = \"#800200\",\n          alpha=0.4, \n          size=0.05) +\n  tm_layout(main.title = \"BMR Administrative Boundary and Accidents\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            bg.color = \"#E4D5C9\",\n            frame = F)\n\n\n\n\n\n\n2.2.3 Road Lines\nThe code chunk below imports MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nroads &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"hotosm_tha_roads_lines_shp\")\n\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n\n\n\nObservations\n\nThe geometry of our data is in multi-linestrings. To convert to individual linestrings, we use st_cast().\nNote that roads does not have crs information. The st_set_crs() function allows us to assign coordinate reference system for the data based on latitude and longitude seen under the Bounding Box variable which is decimal degrees. After assigning the CRS, st_transform() is used to reproject the data to the local CRS. Finally, we can use st_crs() to verify that the correct CRS has been applied.\n\n\n\nroads_sf &lt;- st_set_crs(roads, 4326) %&gt;% \n  st_transform(crs = 32647) %&gt;% \n  st_cast(\"LINESTRING\")\n\n\nst_crs(roads_sf)\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\nResults above show that the EPSG is indicated as 32647 now.\n\nglimpse(roads_sf)\n\nRows: 2,792,591\nColumns: 15\n$ name       &lt;chr&gt; \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ name_en    &lt;chr&gt; \"Chalong Krung Road\", \"Soi Chalong Krung 1/1\", NA, NA, \"Cha…\n$ highway    &lt;chr&gt; \"secondary\", \"residential\", \"secondary_link\", \"service\", \"s…\n$ surface    &lt;chr&gt; \"paved\", NA, NA, NA, \"concrete\", NA, NA, \"unpaved\", NA, NA,…\n$ smoothness &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ width      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ lanes      &lt;chr&gt; NA, NA, NA, NA, \"2\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ oneway     &lt;chr&gt; \"yes\", NA, \"yes\", NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ bridge     &lt;chr&gt; NA, NA, NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ layer      &lt;chr&gt; NA, NA, NA, NA, \"1\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ source     &lt;chr&gt; NA, NA, NA, NA, \"Bing\", NA, NA, \"GPS\", NA, NA, NA, NA, NA, …\n$ name_th    &lt;chr&gt; \"ถนนฉลองกรุง\", \"ซอยฉลองกรุง 1/1\", NA, NA, \"ถนนฉลองกรุง\", NA, \"…\n$ osm_id     &lt;dbl&gt; 1125681229, 594401607, 472283206, 594401608, 116847248, 317…\n$ osm_type   &lt;chr&gt; \"ways_line\", \"ways_line\", \"ways_line\", \"ways_line\", \"ways_l…\n$ geometry   &lt;LINESTRING [m]&gt; LINESTRING (693686.1 151979..., LINESTRING (6933…\n\n\nNext, we will look at the classification of road networks in the data.\n\nunique(roads_sf$highway)\n\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"tertiary\"       \"path\"           \"footway\"        \"track\"         \n [9] \"unclassified\"   \"trunk\"          \"trunk_link\"     \"primary\"       \n[13] \"primary_link\"   \"steps\"          \"motorway_link\"  \"cycleway\"      \n[17] \"pedestrian\"     \"tertiary_link\"  \"motorway\"       \"construction\"  \n[21] \"road\"           \"raceway\"        \"corridor\"       \"living_street\" \n[25] \"escape\"         \"proposed\"       \"busway\"         \"bridleway\"     \n[29] \"abandoned\"      \"parth\"          \"barrier\"        \"paved\"         \n\n\nUpon reviewing the road classifications against the highway descriptions by OpenStreetMap, we observe that not all categories are relevant to our analysis, which focuses primarily on driving networks. We will keep the 13 types of road segments below for the scope of our study.\n\n\n\nName\nDescription\n\n\n\n\nPrimary, Primary_Link\nMajor highway linking large towns\n\n\nSecondary, Secondary_Link\nHighways which are not part of major routes, but nevertheless form a link in the national route network\n\n\nTertiary, Tertiary_Link\nRoads connecting smaller settlements, and within large settlements for roads connecting local centres\n\n\nTrunk, Trunk_Link\nMajor highway that don’t meet the requirements for motorways, and their link roads (sliproads and ramps).\n\n\nMotorway, Motorway_Link\nHighest-performance roads within a territory, generally referred to as motorways, freeways, or expressways.\n\n\nResidential\nRoad generally used for local traffic within the settlement. Primarily used for access to residential properties but may include access to some non-residential properties (e.g. a corner shop or convenience store).\n\n\nUnclassified\nRoads with the lowest priority in the interconnecting road network\n\n\nService\nProvides access to a building service station, beach, campsite, industrial estate, business park, etc.\n\n\n\nIn the code chunk below, we will first specify the road classes that we want to retain. Next, we will filter roads_sf object to remove all the rows that does not have our desired highway attribute value.\n\nhighwaytypes &lt;- c(\"primary\",\n                  \"primary_link\", \n                  \"secondary\", \n                  \"secondary_link\", \n                  \"tertiary\", \n                  \"tertiary_link\",\n                  \"trunk\",\n                  \"trunk_link\",\n                  \"motorway\",\n                  \"motorway_link\",\n                  \"residential\",\n                  \"unclassified\",\n                  \"service\") \n\nroads_sf_filtered &lt;- roads_sf %&gt;%\n  select(\"highway\") %&gt;% \n  filter(highway %in% highwaytypes)\n\nunique(roads_sf_filtered$highway)\n\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"tertiary\"       \"unclassified\"   \"trunk\"          \"trunk_link\"    \n [9] \"primary\"        \"primary_link\"   \"motorway_link\"  \"tertiary_link\" \n[13] \"motorway\"      \n\n\nSince the roads dataset includes areas outside BMR and our analysis is focused on the region within the BMR, we will need to remove unnecessary rows. To do so, we will use st_intersection().\n\nroads_bmr &lt;- st_intersection(roads_sf_filtered,\n                            adminboundary_bmr)\n\n\nwrite_rds(roads_bmr, \"data/rds/roads_bmr.rds\")\n\n\nroads_bmr &lt;- read_rds(\"data/rds/roads_bmr.rds\")\n\nNow that we have scoped out the dataset, we will now plot to see the BMR road network.\n\ntmap_mode(\"plot\")\n\ntm_shape(adminboundary_bmr) +\n  tm_polygons() \n\n\n\n#tm_shape(roads_bmr) +\n#  tm_lines(col=\"highway\", palette =\"viridis\") +\n#  tm_layout(main.title = \"Road Network in Singapore\",\n#            main.title.position = \"center\",\n#            main.title.size = 1.2,\n#            legend.outside = TRUE,\n#            frame = TRUE) +\n#  tm_borders(alpha = 0.5)\n\n\npar(bg = '#E4D5C9', mar = c(0,0,1,0))\n\nplot(st_geometry(adminboundary_bmr),\n     col = \"#eeeae2\",\n     main = \"Road Network in BMR\")\nplot(st_geometry(roads_bmr),\n     add=T,\n     col='#800200')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#aspatial",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#aspatial",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "3.1 Aspatial",
    "text": "3.1 Aspatial\n\n\n\n\n\n\n\n\nStep\nDescription\nScreenshot\n\n\n\n\n1.\nUnder Dynamic Datasets of the LTA DataMall, click on ‘Request API Access’. Fill up the request accordingly.\n\n\n\n2.\nFollow instructions from LTA DataMall API User Guide to download and install Postman. Launch Postman app once completed.\n\n\n\n2.\nFrom LTA DataMall API User Guide & Documentation, search for Passenger Volume by Origin Destination Bus Stops. Copy the URL indicated in the table.\n\n\n\n3.\nIn the Postman app, paste URL copied in the field beside ‘GET’. Under ‘Params’ tab, enter the following details:\n\nKey: Date\nValue: 202407, or whichever YYYYMM you are looking for. Do note that the passenger volume for previous month data will be generated by the 15th of every month, and only files up to the last 3 months is available. For our exercise, Jul 2024 will be the latest file we can use.\n\n\n\n\n4.\nUnder ‘Headers’, enter the following details:\n\nKey: AccountKey\nValue: This is the API Account Key that can be found from the LTA DataMall Welcome Email when you applied for API access.\n\nClick ‘Send’.\n\n\n\n5.\nA URL will be generated.\nPress Ctrl + Click to download the dataset. This will be in a .zip file format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#geospatial",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#geospatial",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "3.2 Geospatial",
    "text": "3.2 Geospatial\nTwo geospatial data will be used. They are:\n\n\n\n\n\n\n\n\nName\nDetails\nScreenshot\n\n\n\n\nBusStop, from LTA DataMall &gt; Static Datasets\n\nProvides locations of bus stops as at Jun 2024\nFormat: SHP (ESRI Shapefile)\n\n\n\n\nMPSZ-2019\n\nProvides sub-zone boundary of URA Master Plan 2019\nFormat: SHP (ESRI Shapefile)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#importing-od-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#importing-od-data",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "4.1 Importing OD data",
    "text": "4.1 Importing OD data\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202407.csv\")\n\n\nglimpse(odbus)\n\nRows: 5,476,662\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2024-07\", \"2024-07\", \"2024-07\", \"2024-07\", \"2024-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKDAY\", \"WEEKEND…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 17, 14, 14, 10, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 5, 4, 3, 1, 1, 1, 14, 3, 2, 2, 1, 4, 5, 1, 1, 4, 1…\n\n\nodbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE) \n\nRecheck to confirm that the 2 variables have indeed been updated:\n\nglimpse(odbus)\n\nRows: 5,476,662\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2024-07\", \"2024-07\", \"2024-07\", \"2024-07\", \"2024-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKDAY\", \"WEEKEND…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 17, 14, 14, 10, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 5, 4, 3, 1, 1, 1, 14, 3, 2, 2, 1, 4, 5, 1, 1, 4, 1…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#extracting-study-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#extracting-study-data",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "4.2 Extracting study data",
    "text": "4.2 Extracting study data\nFor our study, we will extract commuting flows on weekday and between 6 and 9 o’clock.\n\nodbus6_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nWe can use the datatable package for interactive tables:\n\n\nShow the code\ndatatable(\n  odbus6_9,\n  filter='top')\n\n\n\n\n\n\n\nWe will save the output in rds format for future use, and reimport the saved rds file into R environment:\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\nodbus6_9 &lt;- read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#importing-geospatial-data",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "5.1 Importing geospatial data",
    "text": "5.1 Importing geospatial data\n\n5.1.1 Polygon data\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414.\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\nsummary(mpsz)\n\n  SUBZONE_N          SUBZONE_C          PLN_AREA_N         PLN_AREA_C       \n Length:332         Length:332         Length:332         Length:332        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n   REGION_N           REGION_C                  geometry  \n Length:332         Length:332         MULTIPOLYGON :332  \n Class :character   Class :character   epsg:3414    :  0  \n Mode  :character   Mode  :character   +proj=tmer...:  0  \n\nunique(mpsz$PLN_AREA_N)\n\n [1] \"MARINA EAST\"             \"RIVER VALLEY\"           \n [3] \"SINGAPORE RIVER\"         \"WESTERN ISLANDS\"        \n [5] \"MUSEUM\"                  \"MARINE PARADE\"          \n [7] \"SOUTHERN ISLANDS\"        \"BUKIT MERAH\"            \n [9] \"DOWNTOWN CORE\"           \"STRAITS VIEW\"           \n[11] \"QUEENSTOWN\"              \"OUTRAM\"                 \n[13] \"MARINA SOUTH\"            \"ROCHOR\"                 \n[15] \"KALLANG\"                 \"TANGLIN\"                \n[17] \"NEWTON\"                  \"CLEMENTI\"               \n[19] \"BEDOK\"                   \"PIONEER\"                \n[21] \"JURONG EAST\"             \"ORCHARD\"                \n[23] \"GEYLANG\"                 \"BOON LAY\"               \n[25] \"BUKIT TIMAH\"             \"NOVENA\"                 \n[27] \"TOA PAYOH\"               \"TUAS\"                   \n[29] \"JURONG WEST\"             \"SERANGOON\"              \n[31] \"BISHAN\"                  \"TAMPINES\"               \n[33] \"BUKIT BATOK\"             \"HOUGANG\"                \n[35] \"CHANGI BAY\"              \"PAYA LEBAR\"             \n[37] \"ANG MO KIO\"              \"PASIR RIS\"              \n[39] \"BUKIT PANJANG\"           \"TENGAH\"                 \n[41] \"SELETAR\"                 \"SUNGEI KADUT\"           \n[43] \"YISHUN\"                  \"MANDAI\"                 \n[45] \"PUNGGOL\"                 \"CHOA CHU KANG\"          \n[47] \"SENGKANG\"                \"CHANGI\"                 \n[49] \"CENTRAL WATER CATCHMENT\" \"SEMBAWANG\"              \n[51] \"WESTERN WATER CATCHMENT\" \"WOODLANDS\"              \n[53] \"NORTH-EASTERN ISLANDS\"   \"SIMPANG\"                \n[55] \"LIM CHU KANG\"           \n\nunique(mpsz$REGION_N)\n\n[1] \"CENTRAL REGION\"    \"WEST REGION\"       \"EAST REGION\"      \n[4] \"NORTH-EAST REGION\" \"NORTH REGION\"     \n\n\n\npar(bg = '#E4D5C9')\n\npar(mar = c(0,0,0,0))\nplot(st_geometry(mpsz))\n\n\n\n\n\nObservations\nThere are 332 subzones across 5 regions.\nIn the plot, we can also see that the MPSZ data includes outer islands of Singapore such as Sudong, Semakau, Southern Group, and North-Eastern islands. Since it’s unlikely to catch a bus to/from these islands, I’ll remove them from our data.\n\n\nouterislands &lt;- c(\"SEMAKAU\", \"SUDONG\", \"NORTH-EASTERN ISLANDS\", \"SOUTHERN GROUP\")\n\n# remove rows where 'SUBZONE_N' is in the list\nmpsz &lt;- mpsz %&gt;%\n  filter(!str_trim(SUBZONE_N) %in% str_trim(outerislands))\n\nWe’ll plot the mpsz again to ensure the outer islands have been removed.\n\npar(bg = '#E4D5C9')\n\npar(mar = c(0,0,0,0))\nplot(st_geometry(mpsz))\n\n\n\n\n\nmpsz &lt;- write_rds(mpsz, \"data/rds/mpsz.rds\")\n\n\n\n5.1.2 Point Data\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nduplicate &lt;- busstop %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  ungroup()\n\nduplicate\n\nSimple feature collection with 36 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 13488.02 ymin: 31863.63 xmax: 44144.57 ymax: 47934\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 36 × 4\n   BUS_STOP_N BUS_ROOF_N LOC_DESC                       geometry\n   &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;                       &lt;POINT [m]&gt;\n 1 58031      UNK        OPP CANBERRA DR     (27111.07 47517.77)\n 2 47201      UNK        &lt;NA&gt;                (22616.75 47793.68)\n 3 58031      UNK        OPP CANBERRA DR      (27089.69 47570.9)\n 4 62251      B03        Bef Blk 471B        (35500.54 39943.41)\n 5 22501      B02        Blk 662A             (13489.09 35536.4)\n 6 82221      B01        BLK 3A               (35323.6 33257.05)\n 7 68091      B01        AFT BAKER ST        (32164.11 42695.98)\n 8 43709      B06        BLK 644              (18963.42 36762.8)\n 9 82221      B01        Blk 3A              (35308.74 33335.17)\n10 97079      B14        OPP ST. JOHN'S CRES  (44055.75 38908.5)\n# ℹ 26 more rows\n\n\n\nObservations\nThere are duplicated bus stop numbers, but with different roof IDs and geometry. Some of them could be temporary bus stops within the month.\nIn the plot below, we can also see that some bus stop fall outside the Singapore administrative boundaries.\n\n\ntm_shape(mpsz) +\n  tm_polygons(col = \"#f5f5f5\") +\ntm_shape(busstop) +\n  tm_dots(col=\"#800200\") +\ntm_layout(bg.color = \"#E4D5C9\",\n            frame = F)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "5.2 Geospatial data wrangling",
    "text": "5.2 Geospatial data wrangling\n\n5.2.1 Combine Busstop and mpsz\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\nObservations\nNumber of bus stop dropped from 5166 (busstop) to 5161 (busstop_mpsz) due to the 5 busstops outside MPSZ boundary (ie in Malaysia).\n\n\ndatatable(busstop_mpsz, \n          options = list(pageLength = 5))\n\n\n\n\n\n\nSave the output in rds format for future use:\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")  \n\n\n\n5.2.2 Append planning subzone code from busstop_mpsz onto odbus6_9\n\nod_data &lt;- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\n\nObservations\nThe number of records before the join is 238,490.\nThis increased to 239,372 after performing the left join.\n\n\n\n5.2.3 Duplicates Check\nCheck for duplicates to prevent double counting:\n\nduplicate2 &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate2\n\n# A tibble: 1,470 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 09047     02029         2 ORSZ02   \n 2 09047     02029         2 ORSZ02   \n 3 09047     02049        54 ORSZ02   \n 4 09047     02049        54 ORSZ02   \n 5 09047     02089        35 ORSZ02   \n 6 09047     02089        35 ORSZ02   \n 7 09047     02151        98 ORSZ02   \n 8 09047     02151        98 ORSZ02   \n 9 09047     02161        35 ORSZ02   \n10 09047     02161        35 ORSZ02   \n# ℹ 1,460 more rows\n\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\nod_data &lt;- unique(od_data)\n\n\nObservations\nThere are 1,470 duplicated records in our data, i.e. 735 pairs.\nBefore removing duplicates: 239,372 After removal: 238,637\n\n\n\n5.2.4 Update od_data with planning subzone codes\n\nod_data &lt;- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\nBefore: 238,637 After: 239,812\n\nduplicate3 &lt;- od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate3\n\n# A tibble: 1,844 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ SUBZONE_C\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    \n 1 01013     51071         8 RCSZ10    CCSZ01   \n 2 01013     51071         8 RCSZ10    CCSZ01   \n 3 01112     51071        72 RCSZ10    CCSZ01   \n 4 01112     51071        72 RCSZ10    CCSZ01   \n 5 01112     53041         6 RCSZ10    BSSZ01   \n 6 01112     53041         6 RCSZ10    BSSZ01   \n 7 01113     51071         6 DTSZ01    CCSZ01   \n 8 01113     51071         6 DTSZ01    CCSZ01   \n 9 01113     82221         1 DTSZ01    GLSZ05   \n10 01113     82221         1 DTSZ01    GLSZ05   \n# ℹ 1,834 more rows\n\n\nRetain unique records:\n\nod_data &lt;- unique(od_data)\n\nBefore: 239,812 After: 238,890\n\n\n5.2.5 Aggregate Data\n\nod_data &lt;- od_data %&gt;%\n  \n  # Rename column for better clarity\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  \n  # Remove NAs (where there are missing subzones due to time diff between busstop & ridership info)\n  drop_na() %&gt;% \n  \n  # Group and summarise number of trips at each O/D level \n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nod_data\n\n# A tibble: 20,849 × 3\n# Groups:   ORIGIN_SZ [309]\n   ORIGIN_SZ DESTIN_SZ MORNING_PEAK\n   &lt;chr&gt;     &lt;chr&gt;            &lt;dbl&gt;\n 1 AMSZ01    AMSZ01            2435\n 2 AMSZ01    AMSZ02           10418\n 3 AMSZ01    AMSZ03           15578\n 4 AMSZ01    AMSZ04            2862\n 5 AMSZ01    AMSZ05            7938\n 6 AMSZ01    AMSZ06            2357\n 7 AMSZ01    AMSZ07            1513\n 8 AMSZ01    AMSZ08            2551\n 9 AMSZ01    AMSZ09            2358\n10 AMSZ01    AMSZ10             291\n# ℹ 20,839 more rows\n\n\nBefore: 238,890 After: 20,849\nSave the output in rds format for future use, and reimport into R environment:\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\nod_data &lt;- read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#remove-intra-zonal-flows",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#remove-intra-zonal-flows",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "6.1 Remove intra-zonal flows",
    "text": "6.1 Remove intra-zonal flows\nWe will not plot the intra-zonal flows, i.e. where the origin and destination are the same (eg origin = AMSZ01 and destination = AMSZ01)\nThe code chunk below will be used to remove intra-zonal flows.\n\nod_data1 &lt;- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\nBefore: 20,849 After: 20,558\n\nThe comma , after the condition is significant. In R’s data frame syntax, the format for subsetting is [rows, columns]. When you place a condition before the comma, it applies to rows. The comma itself then implies that you’re not applying any specific filter to the columns – meaning you want all columns."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#create-desired-lines",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#create-desired-lines",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "6.2 Create desired lines",
    "text": "6.2 Create desired lines\n\nflowLine &lt;- od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\nflowLine\n\nSimple feature collection with 20558 features and 3 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 5105.594 ymin: 25813.33 xmax: 46654.41 ymax: 49552.79\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   ORIGIN_SZ DESTIN_SZ MORNING_PEAK                       geometry\n1     AMSZ01    AMSZ02        10418 LINESTRING (29501.77 39419....\n2     AMSZ01    AMSZ03        15578 LINESTRING (29501.77 39419....\n3     AMSZ01    AMSZ04         2862 LINESTRING (29501.77 39419....\n4     AMSZ01    AMSZ05         7938 LINESTRING (29501.77 39419....\n5     AMSZ01    AMSZ06         2357 LINESTRING (29501.77 39419....\n6     AMSZ01    AMSZ07         1513 LINESTRING (29501.77 39419....\n7     AMSZ01    AMSZ08         2551 LINESTRING (29501.77 39419....\n8     AMSZ01    AMSZ09         2358 LINESTRING (29501.77 39419....\n9     AMSZ01    AMSZ10          291 LINESTRING (29501.77 39419....\n10    AMSZ01    AMSZ11          739 LINESTRING (29501.77 39419....\n\n\n\nArguments of od2line\n\nflow: data frame representing origin-destination data. The first two columns of this data frame should correspond to the first column of the data in the zones. Thus in cents_sf(), the first column is geo_code. This corresponds to the first two columns of flow().\nzones: spatial object representing origins (and destinations if no separate destinations object is provided) of travel.\ndestinations: spatial object representing destinations of travel flows.\nzone_code: name of the variable in zones containing the ids of the zone. By default this is the first column names in the zones.\norigin_code: Name of the variable in flow containing the ids of the zone of origin. By default this is the first column name in the flow input dataset.\ndest_code: name of the variable in flow containing the ids of the zone of destination. By default this is the second column name in the flow input dataset or the first column name in the destinations if that is set.\nzone_code_d: Name of the variable in destinations containing the ids of the zone. By default this is the first column names in the destinations.\nsilent: TRUE by default, setting it to TRUE will show you the matching columns"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#visualise-desired-lines",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09a.html#visualise-desired-lines",
    "title": "Hands-on Exercise 9a: Processing and Visualising Flow Data",
    "section": "6.3 Visualise desired lines",
    "text": "6.3 Visualise desired lines\n\nArguments of tm_lines\ntm_lines\n\ncol: color of the lines. Either a color value or a data variable name.\nlwd: line width. Either a numeric value or a data variable.\nalpha: transparency number between 0 (totally transparent) and 1 (not transparent).\nscale: line width multiplier number.\nn: preferred number of color scale classes. Only applicable when lwd is the name of a numeric variable.\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, eg: flow &gt;= 5000.\n\ntmap_mode('view')\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, we will learn how to build hedonic pricing models by using GWR methods.\nHedonic pricing models help us understand various factors influence the price of a condo. In essence, it breaks down the price into components that are related to the attributes of the property. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-geospatial-data",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.1 Importing geospatial data",
    "text": "5.1 Importing geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nObservation: - mpsz = A simple feature object.\n\nThe geometry type is multipolygon\nMPSZ simple feature object does not have EPSG information."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#updating-crs-information",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#updating-crs-information",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "5.2 Updating CRS information",
    "text": "5.2 Updating CRS information\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNext, we will reveal the extent (rectangular boundary) of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-the-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-the-aspatial-data",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "6.1 Importing the aspatial data",
    "text": "6.1 Importing the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale &lt;- read_csv('data/aspatial/Condo_resale_2015.csv')\n\nThe codes chunks below uses glimpse() to display the data structure.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nSee the x-y coordinates column:\n\nhead(condo_resale[, c(\"LONGITUDE\", \"LATITUDE\")], n=5)\n\n# A tibble: 5 × 2\n  LONGITUDE LATITUDE\n      &lt;dbl&gt;    &lt;dbl&gt;\n1      104.     1.29\n2      104.     1.33\n3      104.     1.31\n4      104.     1.31\n5      104.     1.32\n\n\nNext, summary() of base R is used to display the summary statistics of condo_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n6.2 Converting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c('LONGITUDE', 'LATITUDE'),\n                            crs = 4326) %&gt;% # World Geodetic System; represents coords in lat and lon; global standard\n  st_transform(crs= 3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#eda-using-statistical-graphics",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.1 EDA using statistical graphics",
    "text": "7.1 EDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\n\nShow the code\nggplot(data=condo_resale.sf, \n       aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  scale_x_continuous(labels = scales::comma)\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed distribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;% \n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, we can plot the LOG_SELLING_PRICE using the code chunk below.\n\n\nShow the code\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") \n\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#multiple-histogram-plots-distribution-of-variables",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#multiple-histogram-plots-distribution-of-variables",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.2 Multiple Histogram Plots distribution of variables",
    "text": "7.2 Multiple Histogram Plots distribution of variables\nIn this section, we will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\n\nShow the code\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#drawing-statistical-point-map",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#drawing-statistical-point-map",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "7.3 Drawing Statistical Point Map",
    "text": "7.3 Drawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\n\ntmap_mode(\"plot\")\n#tmap_mode(\"view\")\n\n#tm_basemap(\"OneMapSG.Grey\") +\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\n  tm_fill(alpha=0.6)+\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#simple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#simple-linear-regression-method",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.1 Simple Linear Regression Method",
    "text": "8.1 Simple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, \n                data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\n\nattributes(condo.slr)\n\n$names\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\n$class\n[1] \"lm\"\n\n\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nSummaryANOVA\n\n\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n*y = -258121.1 + 14719x1*\nR-squared of 0.4518: the independent variable is able to explain about 45% of the variation in the dependent variable, resale prices.\np-value: is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\n\n\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df     Sum Sq    Mean Sq F value    Pr(&gt;F)    \nAREA_SQM     1 1.0504e+15 1.0504e+15    1182 &lt; 2.2e-16 ***\nResiduals 1434 1.2743e+15 8.8861e+11                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n    scale_y_continuous(labels = scales::comma)+\n  geom_smooth(method = lm)\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#multiple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#multiple-linear-regression-method",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.2 Multiple Linear Regression Method",
    "text": "8.2 Multiple Linear Regression Method\n\n8.2.1 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. We will be using the corrplot package.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\nnames(condo_resale)\n\n [1] \"LATITUDE\"             \"LONGITUDE\"            \"POSTCODE\"            \n [4] \"SELLING_PRICE\"        \"AREA_SQM\"             \"AGE\"                 \n [7] \"PROX_CBD\"             \"PROX_CHILDCARE\"       \"PROX_ELDERLYCARE\"    \n[10] \"PROX_URA_GROWTH_AREA\" \"PROX_HAWKER_MARKET\"   \"PROX_KINDERGARTEN\"   \n[13] \"PROX_MRT\"             \"PROX_PARK\"            \"PROX_PRIMARY_SCH\"    \n[16] \"PROX_TOP_PRIMARY_SCH\" \"PROX_SHOPPING_MALL\"   \"PROX_SUPERMARKET\"    \n[19] \"PROX_BUS_STOP\"        \"NO_Of_UNITS\"          \"FAMILY_FRIENDLY\"     \n[22] \"FREEHOLD\"             \"LEASEHOLD_99YR\"      \n\n\ncor(condo_resale[,5:23]) gives a matrix array of the correlation values between each pair of variables.\n\ncorrplot(cor(condo_resale[, 5:23]), \n         diag = FALSE, # whether display the correlation coefficients on the principal diagonal.\n         order = \"AOE\", # ordering method of the correlation matrix (original, angular order/AOE, FPC, hclust, alphabet)\n         tl.pos = \"td\", # position of text labels\n         tl.cex = 0.5, # size of text label (variable names)\n         tl.col=\"black\",\n         tl.srt=45,\n         method = \"number\", # other visualisation methods: color, pie, circle\n         type = \"upper\") # layouts: full, upper, lower\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE” (angular order), “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.3 Building a hedonic pricing model using multiple linear regression method",
    "text": "8.3 Building a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model, LEASE_99YEAR has been excluded.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\nStatistically insignificant (&gt;0.05): PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_TOP_PRIMARY_SCH, PROX_SUPERMARKET."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#preparing-publication-quality-table-olsrr-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#preparing-publication-quality-table-olsrr-method",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.4 Preparing Publication Quality Table: olsrr method",
    "text": "8.4 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing variables above which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#preparing-publication-quality-table-gtsummary-method",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#preparing-publication-quality-table-gtsummary-method",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.5 Preparing Publication Quality Table: gtsummary method",
    "text": "8.5 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note( # Adds customised options, eg adjusted R2, AIC, p-values, alpha\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n8.5.1 Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n\n\n\n\nVIF Interpretation\n\n\n\n&lt;5: low correlation of that predictor with other predictors.\n5-10: moderate correlation\n&gt;10: high, not tolerable correlation of model predictors\n\n\n\n\n8.5.2 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nObservations: Most of the data points are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n8.5.3 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#testing-for-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#testing-for-spatial-autocorrelation",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "8.5.4 Testing for Spatial Autocorrelation",
    "text": "8.5.4 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\n\ntmap_mode(\"view\")\n\ntm_basemap(\"OpenStreetMap\")  +\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1438876 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-fixed-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-fixed-bandwidth-gwr-model",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.1 Building Fixed Bandwidth GWR Model",
    "text": "9.1 Building Fixed Bandwidth GWR Model\n\n9.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\n2 approaches to determine the stopping rule: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres.\n\n\n9.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\nThe output is saved in a list of class “gwrm”. The code below can be used to display the model output.\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-09-08 17:28:43.218334 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-09-08 17:28:44.458335"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-adaptive-bandwidth-gwr-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#building-adaptive-bandwidth-gwr-model",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.2 Building Adaptive Bandwidth GWR Model",
    "text": "9.2 Building Adaptive Bandwidth GWR Model\n\n9.2.1 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE,# Changed to TRUE\n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n9.2.2 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-09-08 17:28:54.867248 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-09-08 17:28:56.481442 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-gwr-output",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-gwr-output",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.3 Visualising GWR Output",
    "text": "9.3 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#converting-sdf-into-sf-data.frame",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#converting-sdf-into-sf-data.frame",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.4 Converting SDF into sf data.frame",
    "text": "9.4 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\nNext, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-local-r2",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-local-r2",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.5 Visualising local R2",
    "text": "9.5 Visualising local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-coefficient-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-coefficient-estimates",
    "title": "Hands-on Exercise 9b: Calibrating Hedonic Pricing Model for Private Highrise Property with GWR Method",
    "section": "9.6 Visualising coefficient estimates",
    "text": "9.6 Visualising coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9.6.1 By URS Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#converting-from-sf-data.table-to-spatialpolygonsdataframe",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "4.1 Converting from sf data.table to SpatialPolygonsDataFrame",
    "text": "4.1 Converting from sf data.table to SpatialPolygonsDataFrame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp.\nPast experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\nFirst as.Spatial() will be used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\nmpsz_sp &lt;- as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 328 \nextent      : 2667.538, 55941.94, 21448.47, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#computing-distance-matrix-1",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#computing-distance-matrix-1",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "4.2 Computing Distance Matrix",
    "text": "4.2 Computing Distance Matrix\nNext, spDists() of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\ndist &lt;- spDists(mpsz_sp, \n                longlat = FALSE)\n\n\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]     [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.96  2989.9839  1431.330  6391.342\n [2,]  3926.003     0.0000   305.737 16513.86   951.8314  5254.066  4975.002\n [3,]  3939.108   305.7370     0.000 16412.06  1045.9088  5299.849  4669.295\n [4,] 20252.964 16513.8648 16412.062     0.00 17450.3044 21665.795 15469.566\n [5,]  2989.984   951.8314  1045.909 17450.30     0.0000  4303.232  5226.873\n [6,]  1431.330  5254.0664  5299.849 21665.79  4303.2323     0.000  7707.091\n [7,]  6391.342  4975.0021  4669.295 15469.57  5226.8731  7707.091     0.000\n [8,]  4716.445  3176.1592  2873.497 16142.96  3341.2116  6103.071  1893.049\n [9,]  3593.009  2345.1741  2074.691 16922.15  2264.2014  5007.197  3068.627\n[10,]  2434.850  3455.5791  3277.921 18597.24  2890.8696  3699.242  4009.437\n           [,8]      [,9]     [,10]\n [1,]  4716.445  3593.009  2434.850\n [2,]  3176.159  2345.174  3455.579\n [3,]  2873.497  2074.691  3277.921\n [4,] 16142.960 16922.153 18597.236\n [5,]  3341.212  2264.201  2890.870\n [6,]  6103.071  5007.197  3699.242\n [7,]  1893.049  3068.627  4009.437\n [8,]     0.000  1200.264  2532.383\n [9,]  1200.264     0.000  1709.443\n[10,]  2532.383  1709.443     0.000\n\n\nNotice that the output dist is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes. We need to carry out additional data preparation steps to tidy this data up."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#labelling-column-and-row-headers-of-distance-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#labelling-column-and-row-headers-of-distance-matrix",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "4.3 Labelling Column and Row Headers of Distance Matrix",
    "text": "4.3 Labelling Column and Row Headers of Distance Matrix\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\nsz_names &lt;- mpsz$SUBZONE_C\n\nNext we will attach SUBZONE_C to row and column for distance matrix matching ahead\n\ncolnames(dist) &lt;- paste0(sz_names)\nrownames(dist) &lt;- paste0(sz_names)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#pivoting-distance-value-by-subzone_c",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#pivoting-distance-value-by-subzone_c",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "4.4 Pivoting Distance Value by SUBZONE_C",
    "text": "4.4 Pivoting Distance Value by SUBZONE_C\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\ndistPair &lt;- melt(dist) %&gt;%\n  rename(dist = value)\n\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  SISZ01 MESZ01  6391.342\n8  BMSZ17 MESZ01  4716.445\n9  DTSZ10 MESZ01  3593.009\n10 SVSZ01 MESZ01  2434.850\n\n\nNotice that the within zone distance is 0."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#updating-intra-zonal-distances",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#updating-intra-zonal-distances",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "4.5 Updating Intra-zonal Distances",
    "text": "4.5 Updating Intra-zonal Distances\nIn this section, we are going to append a constant value to replace the intra-zonal distance of 0. First, we will select and find out the minimum value of the distance by using summary().\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   327   MESZ01 :   327   Min.   :  173.8  \n RVSZ05 :   327   RVSZ05 :   327   1st Qu.: 7019.9  \n SRSZ01 :   327   SRSZ01 :   327   Median :11731.2  \n WISZ01 :   327   WISZ01 :   327   Mean   :12029.5  \n MUSZ02 :   327   MUSZ02 :   327   3rd Qu.:16203.5  \n MPSZ05 :   327   MPSZ05 :   327   Max.   :44892.8  \n (Other):105294   (Other):105294                    \n\n\nNext, a constant distance value of 50m is added into intra-zones distance.\n\ndistPair$dist &lt;- ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   328   MESZ01 :   328   Min.   :   50  \n RVSZ05 :   328   RVSZ05 :   328   1st Qu.: 6969  \n SRSZ01 :   328   SRSZ01 :   328   Median :11706  \n WISZ01 :   328   WISZ01 :   328   Mean   :11993  \n MUSZ02 :   328   MUSZ02 :   328   3rd Qu.:16189  \n MPSZ05 :   328   MPSZ05 :   328   Max.   :44893  \n (Other):105616   (Other):105616                  \n\n\nThe code chunk below is used to rename the origin and destination fields.\n\ndistPair &lt;- distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nLastly, the code chunk below is used to save the dataframe into rds file format\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#separating-intra-flow-from-passenger-volume-df",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#separating-intra-flow-from-passenger-volume-df",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "5.1 Separating intra-flow from passenger volume df",
    "text": "5.1 Separating intra-flow from passenger volume df\nCode chunk below is used to add two new fields in flow_data dataframe namely FlowNoIntra and offset.\n\nflow_data$FlowNoIntra &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, \n  flow_data$TRIPS)\n\nflow_data$offset &lt;- ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, \n  1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#combining-passenger-volume-data-with-distance-value",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#combining-passenger-volume-data-with-distance-value",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "5.2 Combining passenger volume data with distance value",
    "text": "5.2 Combining passenger volume data with distance value\nBefore we can join flow_data and distPair, we need to convert data value type of ORIGIN_SZ and DESTIN_SZ fields of flow_data dataframe into factor data type.\n\nflow_data$ORIGIN_SZ &lt;- as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ &lt;- as.factor(flow_data$DESTIN_SZ)\n\nNow, left_join() of dplyr will be used to flow_data dataframe and distPair dataframe. The output is called flow_data1.\n\nflow_data1 &lt;- flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-population-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#importing-population-data",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "6.1 Importing population data",
    "text": "6.1 Importing population data\nFirstly, we will import the population data.\n\npop &lt;- read_csv(\"data/aspatial/pop.csv\")\n\nNext, we will do a left_join to pop data frame with mpsz. The output will be a sf object where each polygon in mpsz will be assigned a population value.\n\npop &lt;- pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\nNext, we will need to do another left_join() with flow_data1 that we have prepared earlier to prepare both origin and destination attributes.\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;% #&lt;&lt; ORIGIN_SZ\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\nflow_data1 &lt;- flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;% #&lt;&lt; DESTIN_SZ\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nWe will called the output data file SIM_data. it is in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/flow_data_6-9.rds\")\nSIM_data &lt;- read_rds(\"data/rds/flow_data_6-9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-the-dependent-variables",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#visualising-the-dependent-variables",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.1 Visualising the Dependent Variables",
    "text": "7.1 Visualising the Dependent Variables\nFirstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram() +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\n\nNotice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.\nNext, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )\n\n\n\n\n\nNotice that their relationship hardly resemble linear relationship.\nOn the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.\n\n\nShow the code\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  theme(\n    plot.title = element_text(face= 'bold', size = 10),\n    panel.grid.major = element_line(colour = \"#ede5de\", linetype = 1, linewidth = 0.5),\n    panel.grid.minor = element_line(colour = \"#ede5de\", linetype = 1, linewidth= 0.5),\n    plot.background = element_rect(fill=\"#E4D5C9\",colour=\"#E4D5C9\"),\n    panel.border = element_blank(),\n    panel.background = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title.y = element_text(hjust=1, angle=0, size = 8),\n    axis.title.x = element_text(size = 8),\n    strip.text = element_text(face= 'bold'),\n    strip.background = element_rect(color=\"#E4D5C9\", fill=\"#E4D5C9\")\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#log-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#log-transformation",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.2 Log Transformation",
    "text": "7.2 Log Transformation\nSince Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.\nIn the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in SIM_data data frame.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:20849       Length:20849       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    16   1st Qu.:    15.0  \n Mode  :character   Mode  :character   Median :    85   Median :    79.0  \n                                       Mean   :  1149   Mean   :   954.7  \n                                       3rd Qu.:   438   3rd Qu.:   403.0  \n                                       Max.   :339548   Max.   :216167.0  \n     offset              dist       ORIGIN_AGE7_12   ORIGIN_AGE13_24\n Min.   :0.000001   Min.   :   50   Min.   :   0.0   Min.   :    0  \n 1st Qu.:1.000000   1st Qu.: 3361   1st Qu.:  50.0   1st Qu.:  100  \n Median :1.000000   Median : 6155   Median : 510.0   Median : 1130  \n Mean   :0.986043   Mean   : 6979   Mean   : 887.6   Mean   : 1952  \n 3rd Qu.:1.000000   3rd Qu.: 9884   3rd Qu.:1360.0   3rd Qu.: 2950  \n Max.   :1.000000   Max.   :26136   Max.   :6340.0   Max.   :16380  \n ORIGIN_AGE25_64 DESTIN_AGE7_12   DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :    0   Min.   :   0.0   Min.   :    0   Min.   :    0  \n 1st Qu.:  730   1st Qu.:  10.0   1st Qu.:   60   1st Qu.:  630  \n Median : 5730   Median : 510.0   Median : 1100   Median : 5710  \n Mean   : 9088   Mean   : 852.4   Mean   : 1890   Mean   : 8805  \n 3rd Qu.:14180   3rd Qu.:1200.0   3rd Qu.: 2920   3rd Qu.:13650  \n Max.   :74610   Max.   :6340.0   Max.   :16380   Max.   :74610  \n\n\nThe print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64, DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.\nIn view of this, code chunk below will be used to replace zero values to 0.99.\n\nSIM_data$DESTIN_AGE7_12 &lt;- ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, \n  SIM_data$DESTIN_AGE7_12)\n\nSIM_data$DESTIN_AGE13_24 &lt;- ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, \n  SIM_data$DESTIN_AGE13_24)\n\nSIM_data$DESTIN_AGE25_64 &lt;- ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, \n  SIM_data$DESTIN_AGE25_64)\n\nSIM_data$ORIGIN_AGE7_12 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, \n  SIM_data$ORIGIN_AGE7_12)\n\nSIM_data$ORIGIN_AGE13_24 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, \n  SIM_data$ORIGIN_AGE13_24)\n\nSIM_data$ORIGIN_AGE25_64 &lt;- ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, \n  SIM_data$ORIGIN_AGE25_64)\n\nLet’s summarise the new data:\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS         FlowNoIntra      \n Length:20849       Length:20849       Min.   :     1   Min.   :     0.0  \n Class :character   Class :character   1st Qu.:    16   1st Qu.:    15.0  \n Mode  :character   Mode  :character   Median :    85   Median :    79.0  \n                                       Mean   :  1149   Mean   :   954.7  \n                                       3rd Qu.:   438   3rd Qu.:   403.0  \n                                       Max.   :339548   Max.   :216167.0  \n     offset              dist       ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :0.000001   Min.   :   50   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1.000000   1st Qu.: 3361   1st Qu.:  50.00   1st Qu.:  100.00  \n Median :1.000000   Median : 6155   Median : 510.00   Median : 1130.00  \n Mean   :0.986043   Mean   : 6979   Mean   : 887.84   Mean   : 1952.55  \n 3rd Qu.:1.000000   3rd Qu.: 9884   3rd Qu.:1360.00   3rd Qu.: 2950.00  \n Max.   :1.000000   Max.   :26136   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.:  730.00   1st Qu.:  10.00   1st Qu.:   60.00   1st Qu.:  630.00  \n Median : 5730.00   Median : 510.00   Median : 1100.00   Median : 5710.00  \n Mean   : 9087.96   Mean   : 852.59   Mean   : 1890.03   Mean   : 8805.49  \n 3rd Qu.:14180.00   3rd Qu.:1200.00   3rd Qu.: 2920.00   3rd Qu.:13650.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\nNotice that all the 0 values have been replaced by 0.99."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#unconstrained-spatial-interaction-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#unconstrained-spatial-interaction-model",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.3 Unconstrained Spatial Interaction Model",
    "text": "7.3 Unconstrained Spatial Interaction Model\nIn this section, we will calibrate an unconstrained spatial interaction model by using glm() function. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. ORIGIN_AGE25_64) and distance between origin and destination in km (i.e. dist).\n\nuncSIM &lt;- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\n\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            10.51560               0.26534               0.02819  \n           log(dist)  \n            -0.72945  \n\nDegrees of Freedom: 20848 Total (i.e. Null);  20845 Residual\nNull Deviance:      102700000 \nResidual Deviance: 60630000     AIC: 60770000\n\n\n\n7.3.1 R-squared function\nIn order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.\n\nCalcRSquared &lt;- function(observed,estimated){\n  r &lt;- cor(observed,estimated)\n  R2 &lt;- r^2\n  R2\n}\n\nNext, we will compute the R-squared of the unconstrained SIM by using the code chunk below.\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1951635\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.409\n  adj. R2: 0.409"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#origin-constrained-spatial-interaction-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#origin-constrained-spatial-interaction-model",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.4 Origin Constrained Spatial Interaction Model",
    "text": "7.4 Origin Constrained Spatial Interaction Model\nIn this section, we will calibrate an origin constrained SIM. For origin constrained SIM, only explanatory variables representing the attractiveness at the destinations will be used. This is because such models emphasize the limitations or capacities of the origins rather than the demand or attractiveness of the destinations. The capacity or limitation at the origin sites determines the potential for generating interactions or flows.\n\norcSIM &lt;- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\n\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)           1.249e+01  3.153e-03  3963.125  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       1.059e+00  3.700e-03   286.348  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       5.866e-01  3.791e-03   154.729  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -4.110e-02  4.266e-03    -9.634  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -1.968e-01  4.852e-03   -40.565  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       3.212e-01  4.402e-03    72.972  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.203e+00  7.440e-03  -161.703  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -8.599e-01  6.930e-03  -124.080  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       1.910e-01  4.569e-03    41.811  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       4.601e-01  4.014e-03   114.626  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.468e+00  9.049e-03  -162.172  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.559e+00  9.123e-03  -170.923  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.002e+00  3.660e-03   273.818  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       4.894e-01  4.227e-03   115.786  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       9.607e-01  3.745e-03   256.566  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       1.711e+00  3.273e-03   522.847  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       6.961e-01  3.738e-03   186.199  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       9.371e-01  3.768e-03   248.676  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -1.008e+00  6.985e-03  -144.324  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -8.857e-01  6.728e-03  -131.649  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -3.528e-01  5.370e-03   -65.706  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       4.323e-01  4.257e-03   101.557  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       7.078e-01  3.957e-03   178.873  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -7.670e-02  4.915e-03   -15.607  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -9.955e-02  4.705e-03   -21.159  &lt; 2e-16 ***\nORIGIN_SZBKSZ06       2.934e-02  4.872e-03     6.021 1.73e-09 ***\nORIGIN_SZBKSZ07       7.640e-01  3.684e-03   207.356  &lt; 2e-16 ***\nORIGIN_SZBKSZ08       6.920e-02  4.368e-03    15.844  &lt; 2e-16 ***\nORIGIN_SZBKSZ09       4.699e-02  4.572e-03    10.277  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.352e+00  1.055e-02  -128.111  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -2.144e+00  1.587e-02  -135.047  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -3.269e+00  3.422e-02   -95.539  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.816e+00  1.618e-02  -112.215  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       1.304e-01  4.006e-03    32.562  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.204e+00  5.746e-03  -209.516  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -3.589e-01  4.572e-03   -78.504  &lt; 2e-16 ***\nORIGIN_SZBMSZ04       1.720e-02  4.033e-03     4.263 2.01e-05 ***\nORIGIN_SZBMSZ05      -1.327e+00  6.195e-03  -214.135  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -1.826e+00  9.733e-03  -187.649  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -4.338e-01  4.557e-03   -95.191  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -4.782e-01  4.532e-03  -105.519  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.151e+00  5.838e-03  -197.209  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.229e+00  6.220e-03  -197.635  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -8.715e-01  5.405e-03  -161.247  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.183e+00  7.269e-03  -162.746  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -7.287e-02  4.475e-03   -16.285  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -6.203e-01  5.321e-03  -116.562  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -3.498e-01  4.818e-03   -72.594  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.315e+00  6.208e-03  -211.798  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.780e+00  9.537e-03  -186.685  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       1.962e-01  4.512e-03    43.469  &lt; 2e-16 ***\nORIGIN_SZBPSZ02       1.751e-01  5.029e-03    34.818  &lt; 2e-16 ***\nORIGIN_SZBPSZ03       4.120e-01  4.665e-03    88.322  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       4.980e-01  4.102e-03   121.392  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       5.585e-01  3.803e-03   146.871  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.016e+00  6.738e-03  -150.756  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -8.616e-01  6.688e-03  -128.817  &lt; 2e-16 ***\nORIGIN_SZBSSZ01      -1.342e-02  4.384e-03    -3.061   0.0022 ** \nORIGIN_SZBSSZ02       3.874e-01  3.946e-03    98.168  &lt; 2e-16 ***\nORIGIN_SZBSSZ03       2.957e-01  3.898e-03    75.877  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       2.073e-02  4.326e-03     4.793 1.64e-06 ***\nORIGIN_SZBTSZ02      -9.811e-01  6.128e-03  -160.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -9.794e-02  4.573e-03   -21.419  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -8.325e-01  7.975e-03  -104.395  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.568e+00  8.698e-03  -180.279  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -7.266e-01  5.746e-03  -126.454  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -1.974e+00  9.180e-03  -215.080  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.178e+00  7.125e-03  -165.399  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -1.751e+00  1.131e-02  -154.914  &lt; 2e-16 ***\nORIGIN_SZCHSZ01      -1.183e+00  9.458e-03  -125.098  &lt; 2e-16 ***\nORIGIN_SZCHSZ02      -6.343e-01  6.796e-03   -93.334  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       5.968e-01  4.679e-03   127.546  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       3.745e-01  4.096e-03    91.428  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       8.855e-01  4.092e-03   216.399  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       9.006e-01  3.736e-03   241.036  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.365e+00  3.791e-03   359.919  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       1.077e+00  4.395e-03   245.092  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       1.292e+00  4.175e-03   309.531  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -4.418e-01  5.804e-03   -76.113  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.653e+00  1.067e-02  -154.865  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -4.454e-01  5.413e-03   -82.283  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       8.566e-01  3.622e-03   236.520  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.701e+00  1.058e-02  -160.702  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       8.556e-01  3.509e-03   243.842  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -1.857e-01  4.475e-03   -41.498  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       3.329e-01  4.867e-03    68.389  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.770e+00  1.390e-02  -127.288  &lt; 2e-16 ***\nORIGIN_SZDTSZ01      -1.730e+00  6.972e-03  -248.070  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -1.593e+00  6.529e-03  -243.931  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -2.794e+00  1.303e-02  -214.461  &lt; 2e-16 ***\nORIGIN_SZDTSZ04      -4.246e+00  1.187e-01   -35.767  &lt; 2e-16 ***\nORIGIN_SZDTSZ05      -3.123e+00  2.223e-02  -140.470  &lt; 2e-16 ***\nORIGIN_SZDTSZ06      -2.942e+00  1.720e-02  -171.002  &lt; 2e-16 ***\nORIGIN_SZDTSZ07      -2.082e+00  1.988e-02  -104.738  &lt; 2e-16 ***\nORIGIN_SZDTSZ08      -2.397e+00  9.915e-03  -241.762  &lt; 2e-16 ***\nORIGIN_SZDTSZ09      -3.023e+00  2.058e-02  -146.870  &lt; 2e-16 ***\nORIGIN_SZDTSZ10      -2.239e+00  1.075e-02  -208.330  &lt; 2e-16 ***\nORIGIN_SZDTSZ11      -2.373e+00  1.080e-02  -219.608  &lt; 2e-16 ***\nORIGIN_SZDTSZ12      -3.467e+00  2.369e-02  -146.326  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.423e+00  1.246e-02  -194.391  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.381e+00  7.253e-03  -190.392  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       1.921e-01  4.087e-03    47.015  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       1.909e-01  4.069e-03    46.924  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       9.414e-01  3.434e-03   274.148  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       6.514e-01  3.621e-03   179.913  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       2.314e-01  4.013e-03    57.649  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       6.052e-01  3.859e-03   156.850  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       2.649e-01  4.231e-03    62.603  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       9.243e-01  3.596e-03   257.013  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.247e+00  3.536e-03   352.717  &lt; 2e-16 ***\nORIGIN_SZHGSZ06       7.758e-02  4.308e-03    18.008  &lt; 2e-16 ***\nORIGIN_SZHGSZ07       7.093e-01  3.730e-03   190.183  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       1.983e-01  4.310e-03    46.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -5.470e-01  5.820e-03   -93.993  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -3.655e+00  3.904e-02   -93.627  &lt; 2e-16 ***\nORIGIN_SZJESZ01       3.619e-01  4.152e-03    87.174  &lt; 2e-16 ***\nORIGIN_SZJESZ02       2.474e-01  4.139e-03    59.780  &lt; 2e-16 ***\nORIGIN_SZJESZ03       2.392e-01  4.372e-03    54.712  &lt; 2e-16 ***\nORIGIN_SZJESZ04      -1.194e+00  7.807e-03  -152.922  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.042e+00  1.203e-02  -169.679  &lt; 2e-16 ***\nORIGIN_SZJESZ06       3.185e-01  4.061e-03    78.441  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.784e+00  9.420e-03  -189.428  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -6.383e-01  8.460e-03   -75.453  &lt; 2e-16 ***\nORIGIN_SZJESZ09       4.333e-01  4.225e-03   102.547  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -2.043e+00  1.706e-02  -119.703  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -2.129e+00  1.705e-02  -124.901  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       2.500e-01  5.421e-03    46.110  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       8.518e-01  3.806e-03   223.792  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.247e+00  3.534e-03   352.929  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       1.331e+00  3.587e-03   371.005  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.336e+00  1.064e-02  -125.601  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -1.082e+00  8.856e-03  -122.201  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.722e+00  2.313e-02  -117.725  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       1.938e+00  3.444e-03   562.704  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.849e+00  3.274e-03   564.679  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       1.724e-01  3.934e-03    43.818  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -4.691e-01  4.916e-03   -95.421  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -4.563e-01  4.913e-03   -92.879  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -1.701e+00  7.133e-03  -238.440  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -9.591e-01  6.692e-03  -143.325  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.925e-01  4.621e-03  -128.235  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -9.390e-01  6.052e-03  -155.149  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -8.177e-01  5.286e-03  -154.692  &lt; 2e-16 ***\nORIGIN_SZKLSZ09      -1.555e+00  6.666e-03  -233.195  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -3.144e+00  3.138e-02  -100.181  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -2.390e+00  2.165e-02  -110.385  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -1.105e+00  9.805e-03  -112.726  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.814e+00  1.333e-02  -136.054  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -1.043e+00  6.616e-03  -157.671  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -5.017e-01  5.396e-03   -92.981  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       9.798e-02  4.286e-03    22.859  &lt; 2e-16 ***\nORIGIN_SZMSSZ01      -8.790e+00  5.774e-01   -15.225  &lt; 2e-16 ***\nORIGIN_SZMUSZ01      -1.278e+00  5.864e-03  -217.983  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.199e+00  1.508e-02  -212.130  &lt; 2e-16 ***\nORIGIN_SZMUSZ03      -1.859e+00  6.896e-03  -269.625  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.371e+00  2.539e-02   -93.365  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -2.678e+00  1.430e-02  -187.274  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -8.217e-01  5.910e-03  -139.032  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -3.086e+00  3.681e-02   -83.854  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -3.480e+00  4.117e-02   -84.526  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       6.222e-01  3.576e-03   174.005  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -4.850e-01  4.908e-03   -98.813  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -1.138e+00  6.105e-03  -186.411  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -1.341e+00  7.156e-03  -187.457  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.592e+00  1.333e-02  -194.516  &lt; 2e-16 ***\nORIGIN_SZORSZ01      -2.926e+00  2.704e-02  -108.241  &lt; 2e-16 ***\nORIGIN_SZORSZ02      -1.247e+00  5.849e-03  -213.260  &lt; 2e-16 ***\nORIGIN_SZORSZ03      -1.701e+00  6.994e-03  -243.285  &lt; 2e-16 ***\nORIGIN_SZOTSZ01      -1.707e+00  7.271e-03  -234.799  &lt; 2e-16 ***\nORIGIN_SZOTSZ02      -1.752e+00  8.125e-03  -215.586  &lt; 2e-16 ***\nORIGIN_SZOTSZ03      -8.029e-01  5.301e-03  -151.463  &lt; 2e-16 ***\nORIGIN_SZOTSZ04      -7.437e-01  8.307e-03   -89.520  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -7.216e-01  9.296e-03   -77.619  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -3.412e-01  5.675e-03   -60.112  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       1.139e+00  3.636e-03   313.334  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.229e+00  3.635e-03   338.242  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       4.388e-01  4.535e-03    96.768  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -5.164e-01  7.882e-03   -65.514  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -1.422e+00  1.136e-02  -125.152  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -2.962e+00  3.150e-02   -94.020  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.561e+00  3.713e-02   -68.962  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -2.215e+00  1.717e-02  -128.966  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.514e+00  3.830e-03   395.240  &lt; 2e-16 ***\nORIGIN_SZPNSZ02      -5.651e-01  9.775e-03   -57.807  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.941e+00  1.725e-02  -112.539  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.605e+00  2.486e-02  -104.808  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -1.791e+00  1.781e-02  -100.565  &lt; 2e-16 ***\nORIGIN_SZPRSZ01      -7.687e-01  9.568e-03   -80.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ02       1.057e+00  3.815e-03   277.009  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       8.494e-01  3.812e-03   222.816  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -2.751e-01  6.179e-03   -44.527  &lt; 2e-16 ***\nORIGIN_SZPRSZ05       1.279e+00  3.636e-03   351.679  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -5.141e-01  6.870e-03   -74.835  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.565e+00  1.709e-02  -150.036  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       1.155e-01  5.028e-03    22.967  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -4.434e-01  5.419e-03   -81.814  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -7.177e-01  5.071e-03  -141.517  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -2.192e-01  4.605e-03   -47.590  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.216e+00  6.380e-03  -190.643  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -2.460e-01  4.629e-03   -53.133  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -6.079e-01  5.311e-03  -114.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.609e+00  7.926e-03  -202.991  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -3.407e-01  4.864e-03   -70.045  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -5.850e-01  5.418e-03  -107.967  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -4.832e-01  5.414e-03   -89.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.363e+00  7.880e-03  -172.991  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -8.072e-01  6.660e-03  -121.197  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -1.359e-01  4.889e-03   -27.794  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.378e+00  7.243e-03  -190.293  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -7.662e-01  8.389e-03   -91.335  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -6.511e-01  5.320e-03  -122.393  &lt; 2e-16 ***\nORIGIN_SZRCSZ02      -2.302e+00  1.519e-02  -151.558  &lt; 2e-16 ***\nORIGIN_SZRCSZ03      -1.487e+00  7.473e-03  -198.987  &lt; 2e-16 ***\nORIGIN_SZRCSZ04      -2.264e+00  1.142e-02  -198.187  &lt; 2e-16 ***\nORIGIN_SZRCSZ05      -2.852e+00  1.395e-02  -204.500  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -4.847e-01  6.998e-03   -69.267  &lt; 2e-16 ***\nORIGIN_SZRCSZ08      -2.701e+00  1.696e-02  -159.243  &lt; 2e-16 ***\nORIGIN_SZRCSZ09      -1.979e+00  1.218e-02  -162.421  &lt; 2e-16 ***\nORIGIN_SZRCSZ10      -1.814e+00  6.961e-03  -260.529  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -2.924e+00  1.381e-02  -211.798  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -1.247e+00  6.825e-03  -182.764  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -1.986e+00  1.024e-02  -194.024  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -1.956e+00  1.446e-02  -135.317  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.334e+00  1.301e-02  -179.333  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       8.094e-01  4.404e-03   183.770  &lt; 2e-16 ***\nORIGIN_SZSBSZ02      -5.981e-01  6.511e-03   -91.864  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       9.692e-01  3.866e-03   250.676  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       8.023e-01  4.374e-03   183.402  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -1.164e-01  5.535e-03   -21.025  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.658e+00  1.366e-02  -121.375  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -8.111e-01  9.288e-03   -87.327  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.018e+00  9.606e-03  -105.978  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -4.647e-01  7.091e-03   -65.531  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.129e+00  3.612e-03   312.605  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.266e+00  3.468e-03   364.995  &lt; 2e-16 ***\nORIGIN_SZSESZ04       9.950e-01  3.944e-03   252.294  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -1.600e-01  4.861e-03   -32.917  &lt; 2e-16 ***\nORIGIN_SZSESZ06       9.714e-01  3.773e-03   257.433  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.192e+00  1.401e-02  -156.422  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -9.081e-01  6.942e-03  -130.802  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.121e+00  8.242e-03  -136.001  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       2.957e-01  4.310e-03    68.610  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       3.137e-01  3.974e-03    78.934  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.706e+00  8.608e-03  -198.143  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       4.110e-01  3.784e-03   108.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -5.318e-01  5.001e-03  -106.342  &lt; 2e-16 ***\nORIGIN_SZSKSZ01      -1.875e-01  6.551e-03   -28.626  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       2.968e-01  4.819e-03    61.597  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -4.481e-01  6.175e-03   -72.566  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -2.421e+00  2.210e-02  -109.528  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -1.178e+00  1.220e-02   -96.532  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -3.191e+00  2.594e-02  -123.005  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -3.569e-01  5.839e-03   -61.120  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -1.609e+00  7.335e-03  -219.281  &lt; 2e-16 ***\nORIGIN_SZSRSZ02      -1.802e+00  7.294e-03  -247.088  &lt; 2e-16 ***\nORIGIN_SZSRSZ03      -2.852e+00  1.575e-02  -181.121  &lt; 2e-16 ***\nORIGIN_SZSVSZ01      -2.793e+00  2.818e-02   -99.109  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -3.163e+00  5.294e-02   -59.752  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.531e+00  1.250e-02  -122.477  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.909e+00  2.509e-02  -115.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -1.759e+00  1.152e-02  -152.645  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       9.814e-01  4.123e-03   238.018  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.210e+00  3.182e-03   694.536  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.473e+00  3.403e-03   432.821  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       9.293e-01  3.912e-03   237.539  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -3.070e-01  6.257e-03   -49.070  &lt; 2e-16 ***\nORIGIN_SZTNSZ01      -1.213e+00  6.224e-03  -194.863  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.086e+00  5.885e-03  -184.612  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -1.618e+00  7.881e-03  -205.292  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -7.424e-01  5.668e-03  -130.978  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -6.483e-01  5.130e-03  -126.371  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       4.440e-01  3.626e-03   122.443  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -5.077e-01  5.183e-03   -97.963  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -2.901e-01  4.842e-03   -59.906  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -2.393e-01  5.031e-03   -47.566  &lt; 2e-16 ***\nORIGIN_SZTPSZ06       2.111e-01  5.031e-03    41.961  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -1.719e-01  5.057e-03   -33.998  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -7.438e-01  6.660e-03  -111.688  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -5.087e-01  5.378e-03   -94.589  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -3.941e-01  5.422e-03   -72.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ11       2.500e-01  4.233e-03    59.058  &lt; 2e-16 ***\nORIGIN_SZTPSZ12      -5.277e-01  5.332e-03   -98.959  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -3.376e+00  3.881e-02   -86.987  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       5.017e-01  5.840e-03    85.906  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       5.258e-01  5.880e-03    89.425  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       5.202e-01  6.017e-03    86.453  &lt; 2e-16 ***\nORIGIN_SZTSSZ05      -9.979e-01  1.152e-02   -86.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ06      -1.205e+00  1.400e-02   -86.054  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       2.115e-01  5.900e-03    35.847  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -2.919e+00  2.780e-02  -105.000  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -4.669e+00  1.401e-01   -33.336  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.450e+00  3.462e-03   419.015  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       1.094e+00  3.941e-03   277.563  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       2.218e+00  3.368e-03   658.639  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.165e+00  4.118e-03   282.874  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       5.627e-01  4.172e-03   134.882  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       1.265e+00  3.822e-03   330.935  &lt; 2e-16 ***\nORIGIN_SZWDSZ07       4.847e-02  5.877e-03     8.247  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -3.533e-01  6.566e-03   -53.810  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.737e+00  3.541e-03   490.615  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -7.839e-02  4.671e-03   -16.784  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       9.726e-01  4.154e-03   234.118  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.971e+00  3.468e-03   568.377  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       9.231e-01  3.740e-03   246.851  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       1.667e-01  4.618e-03    36.094  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -7.774e-01  7.463e-03  -104.159  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -5.435e-01  7.184e-03   -75.656  &lt; 2e-16 ***\nORIGIN_SZYSSZ08      -2.803e-02  5.144e-03    -5.449 5.06e-08 ***\nORIGIN_SZYSSZ09       1.388e+00  3.573e-03   388.457  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  2.695e-02  6.755e-05   398.928  &lt; 2e-16 ***\nlog(dist)            -7.131e-01  1.031e-04 -6917.129  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 102725286  on 20848  degrees of freedom\nResidual deviance:  44624132  on 20538  degrees of freedom\nAIC: 44756335\n\nNumber of Fisher Scoring iterations: 7\n\n\nLet’s check the R-square values of origin constrained SIM model this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.3886462\n\n\nNotably, R-squared improves from the unconstrained SIM model."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#destination-constrained-spatial-interaction-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#destination-constrained-spatial-interaction-model",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.5 Destination Constrained Spatial Interaction Model",
    "text": "7.5 Destination Constrained Spatial Interaction Model\nIn this section, we will calibrate an destination constrained SIM. For destination constrained SIM, only explanatory variables which represent how propulsive the origins are will be used. This is because such models emphasize the demand or attractiveness of the destinations rather than the limitations or capacities of the origins. The demand or attractiveness of the destination sites determines the potential for generating interactions or flows.\n\ndecSIM &lt;- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          11.1867022  0.0027974  3998.965  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.2157520  0.0035355    61.024  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.2435289  0.0034884    69.811  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -0.9023616  0.0051831  -174.097  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -0.9484973  0.0048931  -193.844  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -0.7571980  0.0047785  -158.458  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.8444727  0.0085349  -216.110  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.9299210  0.0054401  -170.937  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -0.9908230  0.0052101  -190.174  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.4562387  0.0035574   128.250  &lt; 2e-16 ***\nDESTIN_SZAMSZ11       0.1019878  0.0061208    16.662  &lt; 2e-16 ***\nDESTIN_SZAMSZ12      -0.1309597  0.0044830   -29.212  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       0.5260496  0.0032088   163.940  &lt; 2e-16 ***\nDESTIN_SZBDSZ02      -0.1623807  0.0040830   -39.770  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.0142683  0.0036127     3.949 7.83e-05 ***\nDESTIN_SZBDSZ04       1.0129906  0.0029404   344.511  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.4240820  0.0032733   129.560  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.1356215  0.0036775    36.879  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.9548822  0.0074517  -128.142  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.4063187  0.0075549  -186.146  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0781080  0.0053701  -200.761  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.1825131  0.0043597   -41.864  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.4468506  0.0045296   -98.652  &lt; 2e-16 ***\nDESTIN_SZBKSZ04       0.0702745  0.0039971    17.582  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.6713685  0.0046264  -145.116  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9025531  0.0052372  -172.334  &lt; 2e-16 ***\nDESTIN_SZBKSZ07       0.2745051  0.0033978    80.789  &lt; 2e-16 ***\nDESTIN_SZBKSZ08      -1.0320480  0.0057424  -179.724  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.2317999  0.0040906   -56.667  &lt; 2e-16 ***\nDESTIN_SZBLSZ01      -0.3307294  0.0058398   -56.634  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6534505  0.0056360   115.943  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.4781734  0.0060542   244.157  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0790456  0.0107855     7.329 2.32e-13 ***\nDESTIN_SZBMSZ01      -0.1559248  0.0037381   -41.712  &lt; 2e-16 ***\nDESTIN_SZBMSZ02      -0.4971169  0.0039272  -126.584  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -0.9102203  0.0048043  -189.461  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -0.5705684  0.0041013  -139.118  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -0.5949305  0.0049705  -119.692  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -1.6558842  0.0084636  -195.648  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.1676643  0.0036334   -46.145  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.1095628  0.0048276  -229.837  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -2.0402834  0.0076816  -265.606  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -1.5562070  0.0060101  -258.932  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.5936693  0.0060162  -264.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.2308134  0.0066734  -184.435  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.2571982  0.0038941   -66.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.0457304  0.0061118  -171.101  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.2507466  0.0057444  -217.732  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -1.6149520  0.0061458  -262.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -1.5270738  0.0072589  -210.373  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.4907416  0.0044484  -110.319  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.4328876  0.0071285  -201.009  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.1435451  0.0066159  -172.849  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.6297222  0.0049102  -128.247  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.5236032  0.0032571   160.759  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.9980571  0.0067305  -148.289  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.5826701  0.0063629   -91.574  &lt; 2e-16 ***\nDESTIN_SZBSSZ01      -0.1697808  0.0037485   -45.293  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7762707  0.0043558  -178.214  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.3075821  0.0031998    96.126  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.2760882  0.0033675    81.986  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.7722114  0.0056050  -137.772  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.0059834  0.0038328     1.561  0.11850    \nDESTIN_SZBTSZ04      -1.6335853  0.0080414  -203.148  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.7492179  0.0056614  -132.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8945211  0.0050858  -175.887  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -2.0193686  0.0082480  -244.831  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.3129105  0.0069456  -189.027  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.6226949  0.0058387  -106.650  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -1.0906540  0.0075296  -144.848  &lt; 2e-16 ***\nDESTIN_SZCHSZ02      -0.0128257  0.0045923    -2.793  0.00522 ** \nDESTIN_SZCHSZ03       1.6641822  0.0032262   515.832  &lt; 2e-16 ***\nDESTIN_SZCKSZ01      -0.1486951  0.0040634   -36.594  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.4306479  0.0044366   -97.067  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.7344433  0.0032448   226.348  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.6586195  0.0051131  -128.809  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.3488802  0.0054369   -64.170  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.7880887  0.0037632   209.419  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.4778561  0.0039409   121.257  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -2.3268839  0.0112332  -207.144  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.9012108  0.0060507  -148.943  &lt; 2e-16 ***\nDESTIN_SZCLSZ04       0.1294757  0.0036022    35.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -1.2726360  0.0070980  -179.295  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1795746  0.0034057    52.728  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.6190253  0.0044971  -137.649  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.4619840  0.0048835   -94.600  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.3280972  0.0054454    60.253  &lt; 2e-16 ***\nDESTIN_SZDTSZ01      -0.8845669  0.0045026  -196.458  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -0.8568300  0.0043877  -195.279  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -1.0874333  0.0052439  -207.372  &lt; 2e-16 ***\nDESTIN_SZDTSZ04      -1.1494437  0.0112537  -102.140  &lt; 2e-16 ***\nDESTIN_SZDTSZ05      -1.0362291  0.0087132  -118.927  &lt; 2e-16 ***\nDESTIN_SZDTSZ06      -1.1614611  0.0058684  -197.917  &lt; 2e-16 ***\nDESTIN_SZDTSZ07      -1.8984868  0.0179356  -105.850  &lt; 2e-16 ***\nDESTIN_SZDTSZ08      -0.7077496  0.0042454  -166.711  &lt; 2e-16 ***\nDESTIN_SZDTSZ09      -1.5752269  0.0096965  -162.453  &lt; 2e-16 ***\nDESTIN_SZDTSZ10      -1.3537512  0.0075965  -178.207  &lt; 2e-16 ***\nDESTIN_SZDTSZ11      -0.8090332  0.0045013  -179.731  &lt; 2e-16 ***\nDESTIN_SZDTSZ12      -2.4347627  0.0148595  -163.853  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -2.0504803  0.0094558  -216.850  &lt; 2e-16 ***\nDESTIN_SZGLSZ01       0.0598692  0.0041609    14.388  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.3192364  0.0038784   -82.312  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.4035376  0.0032534   124.037  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.3500292  0.0031921   109.653  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.2092624  0.0032941    63.527  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.4285880  0.0032318   132.617  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.5794121  0.0044398  -130.505  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0762078  0.0053359  -201.692  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2662674  0.0037779   -70.481  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.1466547  0.0037801   -38.796  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.6782939  0.0044485  -152.479  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.2513178  0.0034156    73.580  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.2891581  0.0040130   -72.055  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.3032494  0.0041747    72.640  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3530740  0.0292581  -114.603  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.1716230  0.0042420   -40.458  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.4806391  0.0043000  -111.776  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.6281332  0.0047290  -132.826  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.1385887  0.0051022   -27.162  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -0.8062739  0.0075357  -106.994  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.4153823  0.0034451   120.572  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -0.8640741  0.0062388  -138.499  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.5818943  0.0064926   -89.625  &lt; 2e-16 ***\nDESTIN_SZJESZ09      -0.4955426  0.0047394  -104.559  &lt; 2e-16 ***\nDESTIN_SZJESZ10       0.7060401  0.0062127   113.645  &lt; 2e-16 ***\nDESTIN_SZJESZ11       1.0253229  0.0055311   185.375  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.3670256  0.0053684   -68.368  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.3526519  0.0045263   -77.912  &lt; 2e-16 ***\nDESTIN_SZJWSZ03       0.6441760  0.0033769   190.758  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       1.0326753  0.0031443   328.427  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.1502422  0.0050433   -29.790  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3959462  0.0046070    85.944  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.7665967  0.0191890   -39.950  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.3818886  0.0039317    97.130  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.4839379  0.0028767   515.856  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6023948  0.0040944  -147.128  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7999697  0.0046892  -170.598  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.2547986  0.0051793  -242.274  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7610618  0.0067522  -260.815  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -1.1618041  0.0068174  -170.417  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -0.9580560  0.0045104  -212.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.0710104  0.0050836  -210.680  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.1243401  0.0036596   -33.976  &lt; 2e-16 ***\nDESTIN_SZKLSZ09      -1.8312633  0.0066208  -276.592  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -1.6497161  0.0190096   -86.783  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -1.3105988  0.0158618   -82.626  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -1.0992364  0.0093242  -117.890  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.8656212  0.0210282  -136.275  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -1.3100389  0.0066619  -196.645  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.8719388  0.0048810  -178.641  &lt; 2e-16 ***\nDESTIN_SZMPSZ03      -0.2223471  0.0039632   -56.103  &lt; 2e-16 ***\nDESTIN_SZMSSZ01      -3.8589249  0.0737669   -52.312  &lt; 2e-16 ***\nDESTIN_SZMUSZ01      -1.1915341  0.0049498  -240.724  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -1.4516013  0.0071123  -204.096  &lt; 2e-16 ***\nDESTIN_SZMUSZ03      -1.2439342  0.0049899  -249.292  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -2.6749916  0.0221410  -120.816  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -2.0703748  0.0090174  -229.597  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.2352944  0.0061847  -199.734  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -1.7770413  0.0165151  -107.601  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -2.9854061  0.0275374  -108.413  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.2807211  0.0035950   -78.087  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4938925  0.0041125  -120.095  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.5998929  0.0043582  -137.646  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -2.1388131  0.0087051  -245.698  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.8866286  0.0075631  -249.452  &lt; 2e-16 ***\nDESTIN_SZORSZ01      -1.9908872  0.0173765  -114.573  &lt; 2e-16 ***\nDESTIN_SZORSZ02      -0.1725616  0.0037208   -46.378  &lt; 2e-16 ***\nDESTIN_SZORSZ03      -0.9527747  0.0048150  -197.874  &lt; 2e-16 ***\nDESTIN_SZOTSZ01      -1.5938496  0.0061762  -258.062  &lt; 2e-16 ***\nDESTIN_SZOTSZ02      -0.8247973  0.0053824  -153.241  &lt; 2e-16 ***\nDESTIN_SZOTSZ03      -1.4953393  0.0057915  -258.196  &lt; 2e-16 ***\nDESTIN_SZOTSZ04      -1.5827262  0.0083269  -190.074  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -2.1519057  0.0143339  -150.127  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.7694243  0.0053698  -143.288  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.5762599  0.0032828   175.538  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1405343  0.0036966    38.017  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.9141066  0.0061275  -149.182  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.1188682  0.0057893   -20.532  &lt; 2e-16 ***\nDESTIN_SZPLSZ02      -1.3085587  0.0105564  -123.959  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1078859  0.0083997   -12.844  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -0.0097287  0.0080244    -1.212  0.22536    \nDESTIN_SZPLSZ05      -0.6868459  0.0098218   -69.931  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       1.1092381  0.0042567   260.585  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       1.6409198  0.0055758   294.291  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       0.9437528  0.0063421   148.809  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       1.7505749  0.0063198   276.998  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       0.9235380  0.0091335   101.116  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6866781  0.0062158  -110.474  &lt; 2e-16 ***\nDESTIN_SZPRSZ02      -0.1412976  0.0041929   -33.699  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.7883502  0.0031559   249.801  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.7862784  0.0071030  -110.696  &lt; 2e-16 ***\nDESTIN_SZPRSZ05      -0.0580155  0.0039437   -14.711  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.4698562  0.0041687   112.712  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.4826676  0.0099226  -149.424  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.8120437  0.0055879  -145.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.6130987  0.0084135  -191.727  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.4973414  0.0060894  -245.895  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -0.8872366  0.0053600  -165.529  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1556653  0.0055741  -207.328  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -0.9777188  0.0049348  -198.127  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.2069541  0.0052575  -229.566  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.7714823  0.0089330  -198.308  &lt; 2e-16 ***\nDESTIN_SZQTSZ08       0.0692739  0.0038135    18.165  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.3608995  0.0045591   -79.161  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.6856482  0.0047309  -144.930  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.1083675  0.0044482   -24.362  &lt; 2e-16 ***\nDESTIN_SZQTSZ12      -0.3829882  0.0053038   -72.209  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.0493821  0.0040402    12.223  &lt; 2e-16 ***\nDESTIN_SZQTSZ14      -0.1559213  0.0044786   -34.815  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.0229944  0.0054617     4.210 2.55e-05 ***\nDESTIN_SZRCSZ01      -1.0723876  0.0052719  -203.415  &lt; 2e-16 ***\nDESTIN_SZRCSZ02      -2.3479621  0.0146221  -160.577  &lt; 2e-16 ***\nDESTIN_SZRCSZ03      -1.1278286  0.0070968  -158.922  &lt; 2e-16 ***\nDESTIN_SZRCSZ04      -2.4707507  0.0103338  -239.093  &lt; 2e-16 ***\nDESTIN_SZRCSZ05      -2.3692312  0.0097386  -243.283  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -2.1999028  0.0126499  -173.907  &lt; 2e-16 ***\nDESTIN_SZRCSZ08      -2.1638375  0.0106204  -203.744  &lt; 2e-16 ***\nDESTIN_SZRCSZ09      -1.6944317  0.0100154  -169.182  &lt; 2e-16 ***\nDESTIN_SZRCSZ10      -1.1881633  0.0051502  -230.703  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.1807893  0.0088319  -246.921  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.3688550  0.0118593  -199.747  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.4412943  0.0101240  -241.140  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -1.9470769  0.0126953  -153.370  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -2.0894753  0.0115159  -181.443  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -0.0373022  0.0047058    -7.927 2.25e-15 ***\nDESTIN_SZSBSZ02      -0.9827428  0.0062625  -156.925  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.7163226  0.0034531   207.446  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.1235750  0.0044279    27.908  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -0.7382915  0.0057162  -129.158  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -2.5927009  0.0213720  -121.313  &lt; 2e-16 ***\nDESTIN_SZSBSZ07      -0.7182676  0.0152514   -47.095  &lt; 2e-16 ***\nDESTIN_SZSBSZ08       1.5018362  0.0042113   356.623  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.8844992  0.0041582   212.713  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1318437  0.0038825   -33.959  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.6859754  0.0030859   222.293  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.5494408  0.0044621  -123.136  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.1377203  0.0038190   -36.062  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.5091891  0.0047354  -107.528  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.8997136  0.0196781  -147.358  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.4409464  0.0048826   -90.309  &lt; 2e-16 ***\nDESTIN_SZSGSZ02       0.0247217  0.0043341     5.704 1.17e-08 ***\nDESTIN_SZSGSZ03      -0.3655516  0.0040393   -90.500  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.3761233  0.0040275   -93.388  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.2288402  0.0082919  -268.799  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4483146  0.0031507   142.291  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.4451934  0.0041120  -108.267  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.0137317  0.0138601   -73.140  &lt; 2e-16 ***\nDESTIN_SZSKSZ01      -0.1076271  0.0059259   -18.162  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       0.6887225  0.0042226   163.103  &lt; 2e-16 ***\nDESTIN_SZSKSZ03      -0.0129496  0.0050096    -2.585  0.00974 ** \nDESTIN_SZSKSZ04      -0.6781705  0.0128267   -52.872  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.0433668  0.0095630     4.535 5.77e-06 ***\nDESTIN_SZSLSZ01      -0.3657900  0.0065940   -55.473  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.4759952  0.0053388   -89.158  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -1.6889598  0.0064558  -261.619  &lt; 2e-16 ***\nDESTIN_SZSRSZ02      -1.6488407  0.0076359  -215.932  &lt; 2e-16 ***\nDESTIN_SZSRSZ03      -1.6281126  0.0069575  -234.008  &lt; 2e-16 ***\nDESTIN_SZSVSZ01      -2.1556160  0.0283356   -76.074  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -2.9255328  0.0338052   -86.541  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.9163698  0.0175137  -109.421  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.1355042  0.0175317  -121.808  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.5210235  0.0118415  -128.449  &lt; 2e-16 ***\nDESTIN_SZTMSZ01      -0.0005737  0.0043358    -0.132  0.89473    \nDESTIN_SZTMSZ02       1.7103810  0.0027607   619.542  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       0.7838316  0.0031108   251.974  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       0.8054132  0.0032377   248.758  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       0.5909874  0.0040592   145.591  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.7528564  0.0045661  -164.880  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -1.5227198  0.0059542  -255.739  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -1.5568524  0.0073448  -211.966  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -1.1567363  0.0056275  -205.550  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.5816183  0.0045480  -127.883  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.1851227  0.0031499    58.771  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.5136588  0.0045773  -112.218  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.5613506  0.0062201  -251.019  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -0.9004356  0.0048203  -186.800  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.2972237  0.0054240   -54.798  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -1.7714502  0.0089233  -198.520  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.3378522  0.0065895  -203.029  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.6317225  0.0049380  -127.931  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -0.6875757  0.0060740  -113.199  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3770786  0.0040938   -92.110  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8361943  0.0051187  -163.362  &lt; 2e-16 ***\nDESTIN_SZTSSZ01      -0.5639514  0.0187948   -30.006  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0132592  0.0074397   136.196  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.5035121  0.0055094   272.901  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.6312507  0.0055972   291.440  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       1.8458811  0.0059379   310.864  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       0.9211767  0.0095065    96.900  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       1.2914958  0.0040273   320.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02       0.1942770  0.0078781    24.660  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.3867410  0.0247189   -56.100  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.6801486  0.0029093   577.519  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2711460  0.0047331   -57.287  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       1.3042810  0.0030644   425.620  &lt; 2e-16 ***\nDESTIN_SZWDSZ04       0.1532090  0.0044491    34.436  &lt; 2e-16 ***\nDESTIN_SZWDSZ05       0.2225277  0.0042637    52.191  &lt; 2e-16 ***\nDESTIN_SZWDSZ06       0.5839541  0.0034028   171.609  &lt; 2e-16 ***\nDESTIN_SZWDSZ07       1.0576879  0.0045226   233.866  &lt; 2e-16 ***\nDESTIN_SZWDSZ08       0.7419707  0.0051173   144.994  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       0.7615138  0.0036993   205.854  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       1.2905530  0.0031461   410.210  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2413510  0.0041445    58.234  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0572067  0.0043515   -13.147  &lt; 2e-16 ***\nDESTIN_SZYSSZ04       0.0286800  0.0041318     6.941 3.88e-12 ***\nDESTIN_SZYSSZ05      -1.5645361  0.0086049  -181.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.2542840  0.0065130  -192.582  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7731698  0.0077014  -100.394  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.7327456  0.0032481   225.595  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3957525  0.0033560   117.923  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.2264127  0.0001051  2154.705  &lt; 2e-16 ***\nlog(dist)            -0.7145351  0.0001033 -6918.842  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 102725286  on 20848  degrees of freedom\nResidual deviance:  43341354  on 20537  degrees of freedom\nAIC: 43473559\n\nNumber of Fisher Scoring iterations: 7\n\n\nLet’s check the R-square values of destination constrained SIM model this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.4928496"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#doubly-constrained-spatial-interaction-model",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09b.html#doubly-constrained-spatial-interaction-model",
    "title": "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R",
    "section": "7.6 Doubly Constrained Spatial Interaction Model",
    "text": "7.6 Doubly Constrained Spatial Interaction Model\nIn this section, we will calibrate a doubly constrained SIM. For doubly constrained SIM, both the attractiveness at the destinations and the propulsiveness at the origins are considered. The model is typically expressed in the form of a distance function between the origin and destination.\n\ndbcSIM &lt;- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     12.8286466  0.0037011  3466.136  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  1.0080358  0.0038100   264.576  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.5715510  0.0038787   147.356  &lt; 2e-16 ***\nORIGIN_SZAMSZ04  0.1374926  0.0043172    31.847  &lt; 2e-16 ***\nORIGIN_SZAMSZ05  0.0142679  0.0049202     2.900  0.00373 ** \nORIGIN_SZAMSZ06  0.4955344  0.0045099   109.876  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.8472976  0.0075058  -112.886  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.6618457  0.0070454   -93.940  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.4153695  0.0046580    89.173  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.3732637  0.0041066    90.893  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.5503320  0.0093025  -166.658  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7090680  0.0092239  -185.288  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.7695777  0.0037988   202.583  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.4022140  0.0043709    92.021  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.7807270  0.0038631   202.099  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4078084  0.0033953   414.636  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.5084625  0.0038593   131.750  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.8299127  0.0039217   211.623  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -0.8665200  0.0072092  -120.196  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.6900134  0.0068115  -101.301  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.1824104  0.0055044   -33.139  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5411432  0.0044973   120.326  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.9599842  0.0041657   230.451  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.1069206  0.0051199   -20.883  &lt; 2e-16 ***\nORIGIN_SZBKSZ05  0.0733120  0.0048543    15.103  &lt; 2e-16 ***\nORIGIN_SZBKSZ06  0.2512732  0.0050615    49.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7846140  0.0038612   203.203  &lt; 2e-16 ***\nORIGIN_SZBKSZ08  0.2624991  0.0045044    58.276  &lt; 2e-16 ***\nORIGIN_SZBKSZ09  0.0705537  0.0047531    14.844  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -1.7588408  0.0107643  -163.396  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.9437818  0.0161582  -182.185  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -5.1413715  0.0346478  -148.390  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.3630948  0.0170632  -138.490  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.2236721  0.0041224    54.258  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.0115464  0.0058265  -173.611  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.0972568  0.0046902   -20.736  &lt; 2e-16 ***\nORIGIN_SZBMSZ04  0.3084163  0.0041625    74.094  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -1.0599524  0.0062863  -168.613  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -1.3267571  0.0099021  -133.988  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.3268714  0.0046780   -69.874  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.1929591  0.0046241   -41.729  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -0.7386238  0.0059190  -124.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -0.8340636  0.0063085  -132.212  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -0.5115401  0.0054974   -93.051  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -0.8496475  0.0074682  -113.768  &lt; 2e-16 ***\nORIGIN_SZBMSZ13  0.0000855  0.0046329     0.018  0.98528    \nORIGIN_SZBMSZ14 -0.2930598  0.0055118   -53.169  &lt; 2e-16 ***\nORIGIN_SZBMSZ15  0.0564604  0.0049621    11.378  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -0.9920353  0.0062767  -158.051  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.4210546  0.0096204  -147.712  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5103191  0.0046953   108.687  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.7412988  0.0052841   140.289  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.9746610  0.0049525   196.802  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.7126562  0.0042822   166.425  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.5441855  0.0039826   136.639  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.7842357  0.0068811  -113.970  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.7499548  0.0069139  -108.471  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.0731246  0.0044884    16.292  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.5352792  0.0040103   133.476  &lt; 2e-16 ***\nORIGIN_SZBSSZ03  0.2261247  0.0039791    56.829  &lt; 2e-16 ***\nORIGIN_SZBTSZ01 -0.0477017  0.0044633   -10.687  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.7958437  0.0062268  -127.809  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.1054728  0.0047370   -22.266  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -0.4790439  0.0082831   -57.834  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -1.4056079  0.0088385  -159.032  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -0.5347751  0.0058567   -91.309  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -1.6335294  0.0092343  -176.898  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -0.9386709  0.0072661  -129.185  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -1.6704687  0.0114550  -145.829  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -1.1822296  0.0095951  -123.212  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.9169778  0.0069920  -131.148  &lt; 2e-16 ***\nORIGIN_SZCHSZ03 -0.4786555  0.0049759   -96.195  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.4725580  0.0042831   110.330  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  1.1845462  0.0043794   270.482  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  0.8569898  0.0039849   215.060  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.8643409  0.0041375   450.597  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  1.5314798  0.0051465   297.577  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  1.1678178  0.0054526   214.174  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.6635639  0.0060139  -110.338  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.2339220  0.0107523  -114.759  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -0.2975066  0.0055782   -53.334  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.8892746  0.0037698   235.891  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -1.5469666  0.0107228  -144.268  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.8472355  0.0036524   231.965  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.1036529  0.0046093   -22.488  &lt; 2e-16 ***\nORIGIN_SZCLSZ08  0.2787814  0.0052161    53.446  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -2.2763627  0.0143377  -158.767  &lt; 2e-16 ***\nORIGIN_SZDTSZ01 -1.3542815  0.0070310  -192.617  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -1.2946921  0.0065791  -196.790  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -2.4887167  0.0130587  -190.579  &lt; 2e-16 ***\nORIGIN_SZDTSZ04 -3.9155534  0.1187448   -32.975  &lt; 2e-16 ***\nORIGIN_SZDTSZ05 -2.8513019  0.0222503  -128.147  &lt; 2e-16 ***\nORIGIN_SZDTSZ06 -2.7709355  0.0172199  -160.915  &lt; 2e-16 ***\nORIGIN_SZDTSZ07 -1.5728569  0.0199524   -78.831  &lt; 2e-16 ***\nORIGIN_SZDTSZ08 -2.1236255  0.0099750  -212.894  &lt; 2e-16 ***\nORIGIN_SZDTSZ09 -2.6310751  0.0206638  -127.328  &lt; 2e-16 ***\nORIGIN_SZDTSZ10 -1.8811873  0.0108120  -173.991  &lt; 2e-16 ***\nORIGIN_SZDTSZ11 -2.0080252  0.0109002  -184.219  &lt; 2e-16 ***\nORIGIN_SZDTSZ12 -3.0383727  0.0237245  -128.069  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -2.0325313  0.0125101  -162.471  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.4410978  0.0073489  -196.098  &lt; 2e-16 ***\nORIGIN_SZGLSZ02  0.2299975  0.0041793    55.032  &lt; 2e-16 ***\nORIGIN_SZGLSZ03  0.0413994  0.0041648     9.940  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.9505227  0.0035341   268.960  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5792325  0.0037121   156.041  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.1587759  0.0041046    38.682  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.6983976  0.0039539   176.637  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.4526194  0.0043124   104.959  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.9544562  0.0036843   259.059  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2893079  0.0036401   354.192  &lt; 2e-16 ***\nORIGIN_SZHGSZ06  0.1989697  0.0043796    45.431  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.6315046  0.0038285   164.948  &lt; 2e-16 ***\nORIGIN_SZHGSZ08  0.1231067  0.0044066    27.937  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -0.7501850  0.0060031  -124.965  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.1265291  0.0391147   -79.932  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4288625  0.0043546    98.485  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.3474167  0.0043021    80.756  &lt; 2e-16 ***\nORIGIN_SZJESZ03  0.3648711  0.0045394    80.378  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.2601204  0.0079938  -157.638  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -1.9448605  0.0121589  -159.954  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2098534  0.0042352    49.550  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.7159895  0.0095137  -180.371  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -0.7169182  0.0087853   -81.605  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4193497  0.0044663    93.893  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -2.8678926  0.0176560  -162.431  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -3.2358276  0.0175961  -183.894  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.5101264  0.0058424    87.315  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.9610102  0.0040039   240.019  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.1521401  0.0037948   303.610  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.9109277  0.0039031   233.386  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -1.6940137  0.0108284  -156.442  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.3507828  0.0090717  -148.900  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.4328195  0.0236166  -103.013  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  2.0095909  0.0038202   526.038  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.3978884  0.0035538   393.348  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.3121000  0.0040190    77.657  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.3029470  0.0050001   -60.588  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.2983065  0.0049845   -59.846  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -1.3230496  0.0071793  -184.287  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -0.5929324  0.0068531   -86.520  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -0.3022173  0.0046926   -64.404  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -0.6579762  0.0061338  -107.271  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -0.7332902  0.0053679  -136.607  &lt; 2e-16 ***\nORIGIN_SZKLSZ09 -1.2143607  0.0067143  -180.863  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.4850760  0.0318602   -77.999  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -1.5811172  0.0232731   -67.938  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -1.0951370  0.0100671  -108.784  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -1.3536856  0.0136002   -99.535  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.8673314  0.0067115  -129.230  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -0.4562093  0.0054836   -83.195  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0916973  0.0043973    20.853  &lt; 2e-16 ***\nORIGIN_SZMSSZ01 -7.9746474  0.5801853   -13.745  &lt; 2e-16 ***\nORIGIN_SZMUSZ01 -0.9378756  0.0059225  -158.358  &lt; 2e-16 ***\nORIGIN_SZMUSZ02 -2.7559471  0.0151242  -182.221  &lt; 2e-16 ***\nORIGIN_SZMUSZ03 -1.5194920  0.0069417  -218.894  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -2.2763222  0.0254083   -89.590  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -2.2479701  0.0143513  -156.639  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.4887519  0.0060138   -81.272  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -2.6582077  0.0368387   -72.158  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.0437598  0.0412123   -73.856  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.8054664  0.0036721   219.346  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.3042935  0.0050050   -60.798  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0012104  0.0061807  -161.989  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -1.0785055  0.0072052  -149.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.3436312  0.0133544  -175.495  &lt; 2e-16 ***\nORIGIN_SZORSZ01 -2.5128809  0.0270712   -92.825  &lt; 2e-16 ***\nORIGIN_SZORSZ02 -1.0481000  0.0059300  -176.744  &lt; 2e-16 ***\nORIGIN_SZORSZ03 -1.3795670  0.0070565  -195.503  &lt; 2e-16 ***\nORIGIN_SZOTSZ01 -1.3155959  0.0073440  -179.138  &lt; 2e-16 ***\nORIGIN_SZOTSZ02 -1.4783711  0.0082265  -179.708  &lt; 2e-16 ***\nORIGIN_SZOTSZ03 -0.4297072  0.0053938   -79.666  &lt; 2e-16 ***\nORIGIN_SZOTSZ04 -0.5129011  0.0083879   -61.147  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.6623215  0.0108073    61.285  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.2388834  0.0058034   -41.163  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  1.0047350  0.0037882   265.226  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.1945429  0.0037758   316.368  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.6371460  0.0047143   135.151  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.5935397  0.0082098   -72.297  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.1081991  0.0115462   -95.979  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -3.2681291  0.0321596  -101.622  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.8842133  0.0371538   -77.629  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2182972  0.0175021  -126.745  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  1.0210921  0.0047269   216.018  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -1.7788939  0.0113206  -157.138  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.6923480  0.0177421  -151.749  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -4.6135977  0.0256462  -179.894  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -3.1475469  0.0200624  -156.888  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6516517  0.0098332   -66.270  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.9968282  0.0039774   250.620  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4647176  0.0039697   117.067  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.4244243  0.0064856   -65.441  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  1.1207043  0.0037897   295.726  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -0.9757300  0.0070733  -137.946  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -2.6051739  0.0172091  -151.383  &lt; 2e-16 ***\nORIGIN_SZPRSZ08  0.0319438  0.0051812     6.165 7.03e-10 ***\nORIGIN_SZQTSZ01  0.0177811  0.0055780     3.188  0.00143 ** \nORIGIN_SZQTSZ02 -0.4111178  0.0051582   -79.702  &lt; 2e-16 ***\nORIGIN_SZQTSZ03  0.1146756  0.0047544    24.120  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.0392568  0.0064735  -160.539  &lt; 2e-16 ***\nORIGIN_SZQTSZ05  0.0815554  0.0047666    17.110  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.2795372  0.0054275   -51.504  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.2937812  0.0080004  -161.715  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.3396025  0.0050344   -67.457  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.4809761  0.0055455   -86.733  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.3470876  0.0055552   -62.479  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -1.4293687  0.0080162  -178.309  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -0.7675547  0.0069079  -111.112  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.2201302  0.0050975   -43.184  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.3580373  0.0073862  -183.861  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -1.0918424  0.0089246  -122.341  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -0.3868138  0.0054130   -71.461  &lt; 2e-16 ***\nORIGIN_SZRCSZ02 -1.9458168  0.0152168  -127.873  &lt; 2e-16 ***\nORIGIN_SZRCSZ03 -0.9424591  0.0076035  -123.951  &lt; 2e-16 ***\nORIGIN_SZRCSZ04 -2.0113838  0.0114492  -175.678  &lt; 2e-16 ***\nORIGIN_SZRCSZ05 -2.3747795  0.0139802  -169.867  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.1848037  0.0070599   -26.177  &lt; 2e-16 ***\nORIGIN_SZRCSZ08 -2.4004375  0.0170293  -140.959  &lt; 2e-16 ***\nORIGIN_SZRCSZ09 -1.6632104  0.0122261  -136.037  &lt; 2e-16 ***\nORIGIN_SZRCSZ10 -1.4594717  0.0070136  -208.092  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.5350492  0.0138487  -183.053  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -0.7017935  0.0069268  -101.316  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -1.3619629  0.0103197  -131.977  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -1.5363160  0.0144993  -105.958  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -1.7329389  0.0132236  -131.049  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.8699884  0.0049782   174.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.6640952  0.0066767   -99.465  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.5219493  0.0041925   124.497  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4026841  0.0048325    83.327  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.0942157  0.0057793   -16.302  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -1.0296651  0.0143389   -71.809  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.1720061  0.0100076   -17.188  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -2.0697634  0.0100444  -206.061  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -1.1670954  0.0074298  -157.083  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1934115  0.0037168   321.087  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.1018771  0.0035787   307.902  &lt; 2e-16 ***\nORIGIN_SZSESZ04  1.1550026  0.0041073   281.209  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.1715327  0.0049537   -34.627  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.1579692  0.0038919   297.534  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -1.9221669  0.0140370  -136.936  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.8655946  0.0070989  -121.933  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2008708  0.0083503  -143.811  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.3270329  0.0044015    74.300  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.4073009  0.0040513   100.537  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -1.5450851  0.0086361  -178.910  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.3411563  0.0038657    88.253  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.4503131  0.0050675   -88.863  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.2306384  0.0069419   -33.224  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  0.0951760  0.0052541    18.115  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.4150873  0.0064099   -64.758  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -2.0984590  0.0235127   -89.248  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -1.1052254  0.0146423   -75.482  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.9910706  0.0260625  -114.765  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.3299003  0.0059429   -55.511  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -1.1501834  0.0074256  -154.894  &lt; 2e-16 ***\nORIGIN_SZSRSZ02 -1.4204906  0.0073588  -193.032  &lt; 2e-16 ***\nORIGIN_SZSRSZ03 -2.3720718  0.0158444  -149.710  &lt; 2e-16 ***\nORIGIN_SZSVSZ01 -2.2152636  0.0418137   -52.979  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -3.3790533  0.0529657   -63.797  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8874917  0.0127598   -69.554  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.0903014  0.0252899   -82.654  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.3866058  0.0116481  -119.042  &lt; 2e-16 ***\nORIGIN_SZTMSZ01  0.7630424  0.0043488   175.460  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.5946931  0.0033379   477.751  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.1501736  0.0035485   324.130  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.4101586  0.0041431    98.999  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -0.8927171  0.0065734  -135.807  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -0.9507277  0.0063118  -150.627  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -0.7253285  0.0059708  -121.480  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -1.2663473  0.0079725  -158.840  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3659710  0.0057831   -63.283  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.4339873  0.0052290   -82.995  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5099532  0.0037079   137.533  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.4838407  0.0052883   -91.493  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.0873479  0.0049189   -17.758  &lt; 2e-16 ***\nORIGIN_SZTPSZ05  0.0550444  0.0051471    10.694  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.5842031  0.0057890   100.916  &lt; 2e-16 ***\nORIGIN_SZTPSZ07  0.0566139  0.0051614    10.969  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -0.4241616  0.0067731   -62.624  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.4978890  0.0054959   -90.593  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -0.1701460  0.0055506   -30.654  &lt; 2e-16 ***\nORIGIN_SZTPSZ11  0.3031065  0.0043540    69.615  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.4717124  0.0054169   -87.082  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -3.3300478  0.0404286   -82.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.2307557  0.0078216    29.502  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.0754197  0.0076139     9.906  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.4032132  0.0082678   -48.769  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -2.6194676  0.0132954  -197.021  &lt; 2e-16 ***\nORIGIN_SZTSSZ06 -3.1081134  0.0189244  -164.238  &lt; 2e-16 ***\nORIGIN_SZWCSZ01 -0.6246864  0.0068479   -91.223  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9493271  0.0281276  -104.855  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -4.8725330  0.1400733   -34.786  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  0.8601421  0.0036482   235.770  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.9493368  0.0041702   227.646  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.6444988  0.0037658   436.695  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.1133839  0.0045495   244.728  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.4227436  0.0044126    95.803  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.9470220  0.0041164   230.060  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -0.4126556  0.0062927   -65.576  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8643052  0.0069038  -125.193  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.5889438  0.0039038   407.025  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.5072205  0.0048488  -104.607  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.9660373  0.0045272   213.383  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  2.2755249  0.0037466   607.360  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.9319198  0.0038859   239.823  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4672048  0.0047129    99.133  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.5368483  0.0075816   -70.809  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.4486462  0.0077892   -57.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ08 -0.4125001  0.0053438   -77.192  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1701985  0.0037680   310.565  &lt; 2e-16 ***\nDESTIN_SZAMSZ02 -0.0319791  0.0036566    -8.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.1016514  0.0035758    28.428  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -0.9147795  0.0052425  -174.492  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -0.8526911  0.0049581  -171.981  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.6910791  0.0049061  -140.861  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.6280332  0.0086015  -189.272  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.8158992  0.0055327  -147.469  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0414618  0.0053076  -196.221  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.0835468  0.0036462    22.913  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.0249127  0.0063331    -3.934 8.36e-05 ***\nDESTIN_SZAMSZ12  0.0550569  0.0045492    12.103  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  0.3940684  0.0033449   117.813  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.3124403  0.0042357   -73.764  &lt; 2e-16 ***\nDESTIN_SZBDSZ03 -0.1153709  0.0037433   -30.820  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  0.6957570  0.0030808   225.837  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.4175773  0.0033945   123.017  &lt; 2e-16 ***\nDESTIN_SZBDSZ06 -0.0382765  0.0038547    -9.930  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.6175696  0.0077178   -80.019  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.4147210  0.0076463  -185.020  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.2162782  0.0055018  -221.070  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.3822412  0.0046338   -82.489  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.8325920  0.0047788  -174.228  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.0661815  0.0042274   -15.655  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.6456351  0.0047870  -134.873  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.0680079  0.0054193  -197.076  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0951491  0.0035956    26.463  &lt; 2e-16 ***\nDESTIN_SZBKSZ08 -1.0880412  0.0059037  -184.299  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1975852  0.0042692   -46.282  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.6962720  0.0059797  -116.440  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.4264182  0.0058655    72.700  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.7024805  0.0063957   266.193  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.3596634  0.0113939   -31.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ01 -0.0495675  0.0038547   -12.859  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.2008501  0.0040124   -50.057  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.5693816  0.0049240  -115.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.2923587  0.0042404   -68.946  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.3968469  0.0050687   -78.294  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1050662  0.0086155  -128.265  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.1429083  0.0037470    38.139  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.7470911  0.0049200  -151.848  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -1.5595446  0.0077563  -201.069  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.0747502  0.0060958  -176.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2214197  0.0060970  -200.332  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.7485205  0.0068683  -108.981  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.0065838  0.0040488     1.626  0.10393    \nDESTIN_SZBMSZ14 -0.6236215  0.0063521   -98.176  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.9548592  0.0058947  -161.986  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.2784708  0.0062068  -205.979  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.3618668  0.0073263  -185.886  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -0.7964555  0.0046774  -170.276  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -1.6684606  0.0074592  -223.680  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.5247773  0.0070197  -217.213  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.8658276  0.0051348  -168.620  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2883371  0.0034728    83.027  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -0.9232838  0.0069064  -133.685  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.5162287  0.0066217   -77.960  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.0294154  0.0038429     7.655 1.94e-14 ***\nDESTIN_SZBSSZ02 -0.7819237  0.0044253  -176.693  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3757079  0.0032714   114.848  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.3352039  0.0035069    95.583  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.6894708  0.0057279  -120.370  &lt; 2e-16 ***\nDESTIN_SZBTSZ03  0.1822522  0.0039813    45.777  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -1.2274421  0.0083292  -147.366  &lt; 2e-16 ***\nDESTIN_SZBTSZ05 -0.3918730  0.0058027   -67.532  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.6453936  0.0051819  -124.548  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.6158463  0.0083014  -194.648  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7876561  0.0071096  -110.788  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.5225479  0.0059473   -87.863  &lt; 2e-16 ***\nDESTIN_SZCHSZ01 -1.1640940  0.0076489  -152.190  &lt; 2e-16 ***\nDESTIN_SZCHSZ02 -0.0413568  0.0047475    -8.711  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  1.2674388  0.0034117   371.493  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4162431  0.0043038   -96.715  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9357724  0.0047503  -196.992  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.2640587  0.0035530    74.320  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -1.5691123  0.0055248  -284.010  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.2783168  0.0063768  -200.463  &lt; 2e-16 ***\nDESTIN_SZCKSZ06  0.1064760  0.0050942    20.901  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2288951  0.0041424    55.256  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.1703685  0.0113247  -191.649  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.7991076  0.0062298  -128.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0559249  0.0037892   -14.759  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -0.9646551  0.0072269  -133.481  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.0650755  0.0035542    18.309  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4914307  0.0046185  -106.405  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.4277559  0.0052051   -82.180  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.3590441  0.0056904    63.097  &lt; 2e-16 ***\nDESTIN_SZDTSZ01 -0.5937033  0.0045634  -130.101  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -0.8038994  0.0044412  -181.011  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -1.0521104  0.0052893  -198.912  &lt; 2e-16 ***\nDESTIN_SZDTSZ04 -0.5710812  0.0113649   -50.249  &lt; 2e-16 ***\nDESTIN_SZDTSZ05 -0.6460195  0.0087850   -73.537  &lt; 2e-16 ***\nDESTIN_SZDTSZ06 -1.1079338  0.0059052  -187.620  &lt; 2e-16 ***\nDESTIN_SZDTSZ07 -1.9259046  0.0179834  -107.093  &lt; 2e-16 ***\nDESTIN_SZDTSZ08 -0.5847820  0.0043016  -135.944  &lt; 2e-16 ***\nDESTIN_SZDTSZ09 -1.7043172  0.0097281  -175.194  &lt; 2e-16 ***\nDESTIN_SZDTSZ10 -1.1931992  0.0076743  -155.480  &lt; 2e-16 ***\nDESTIN_SZDTSZ11 -0.6995185  0.0045569  -153.508  &lt; 2e-16 ***\nDESTIN_SZDTSZ12 -2.3706613  0.0148907  -159.204  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.7773676  0.0095016  -187.061  &lt; 2e-16 ***\nDESTIN_SZGLSZ01  0.1024918  0.0042575    24.073  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.2417847  0.0039771   -60.794  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.3842995  0.0033403   115.051  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.3044211  0.0033045    92.123  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.1933056  0.0033871    57.071  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.2764496  0.0033162    83.364  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.7709951  0.0045450  -169.637  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.2473364  0.0054264  -229.865  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5027846  0.0038772  -129.679  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5550290  0.0039144  -141.792  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.7505517  0.0045232  -165.934  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.1050218  0.0035192    29.843  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.3181972  0.0041026   -77.560  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0295870  0.0042751    -6.921 4.49e-12 ***\nDESTIN_SZHGSZ10 -3.4766582  0.0292962  -118.673  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3714994  0.0044685   -83.137  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.6269424  0.0044625  -140.490  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.7949010  0.0049051  -162.056  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -0.2192921  0.0053043   -41.343  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -0.9005872  0.0076649  -117.495  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.1989816  0.0036183    54.993  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -0.9521763  0.0063393  -150.202  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.9160649  0.0067272  -136.174  &lt; 2e-16 ***\nDESTIN_SZJESZ09 -0.5341769  0.0049586  -107.727  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.6130739  0.0065635    93.406  &lt; 2e-16 ***\nDESTIN_SZJESZ11  1.0791907  0.0059048   182.765  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.8762600  0.0058197  -150.567  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8067463  0.0047679  -169.204  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.2259927  0.0036892    61.257  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.7349551  0.0034603   212.398  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -0.4431286  0.0051966   -85.274  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.2577411  0.0048291   -53.373  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -1.5867481  0.0197637   -80.286  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.7365217  0.0044349  -166.074  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9154590  0.0031699   288.796  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.4509526  0.0041850  -107.755  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.6645796  0.0047718  -139.273  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -1.0829651  0.0052448  -206.484  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.5785854  0.0067942  -232.343  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.9395983  0.0069813  -134.588  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -0.6884537  0.0045843  -150.177  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.8218312  0.0051648  -159.123  &lt; 2e-16 ***\nDESTIN_SZKLSZ08  0.0160975  0.0037377     4.307 1.66e-05 ***\nDESTIN_SZKLSZ09 -1.4894050  0.0066663  -223.422  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -2.0028692  0.0193335  -103.596  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5414873  0.0170599   -90.357  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -1.2259043  0.0095505  -128.360  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -2.2796718  0.0213844  -106.604  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.9703954  0.0067630  -143.486  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.7245757  0.0049650  -145.935  &lt; 2e-16 ***\nDESTIN_SZMPSZ03 -0.1246202  0.0040772   -30.565  &lt; 2e-16 ***\nDESTIN_SZMSSZ01 -1.3125115  0.0744552   -17.628  &lt; 2e-16 ***\nDESTIN_SZMUSZ01 -1.0455081  0.0050085  -208.748  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.0149063  0.0071783  -141.386  &lt; 2e-16 ***\nDESTIN_SZMUSZ03 -1.1182935  0.0050393  -221.916  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.4064130  0.0221736  -108.526  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.7009221  0.0090669  -187.597  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -1.0877002  0.0062883  -172.972  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.7151117  0.0165765  -103.466  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.0200774  0.0275709  -109.538  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.2454668  0.0036909   -66.506  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.2903825  0.0042079   -69.009  &lt; 2e-16 ***\nDESTIN_SZNVSZ03 -0.3395519  0.0044344   -76.573  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.8639054  0.0087534  -212.936  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.5570749  0.0076006  -204.862  &lt; 2e-16 ***\nDESTIN_SZORSZ01 -1.3851704  0.0174520   -79.370  &lt; 2e-16 ***\nDESTIN_SZORSZ02  0.0387143  0.0038109    10.159  &lt; 2e-16 ***\nDESTIN_SZORSZ03 -0.7512487  0.0048856  -153.769  &lt; 2e-16 ***\nDESTIN_SZOTSZ01 -1.1063264  0.0062492  -177.035  &lt; 2e-16 ***\nDESTIN_SZOTSZ02 -0.4423678  0.0054952   -80.500  &lt; 2e-16 ***\nDESTIN_SZOTSZ03 -1.2143759  0.0058722  -206.799  &lt; 2e-16 ***\nDESTIN_SZOTSZ04 -1.4630078  0.0083582  -175.038  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -2.4794604  0.0166041  -149.328  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -0.8478807  0.0055376  -153.114  &lt; 2e-16 ***\nDESTIN_SZPGSZ03  0.2296091  0.0034558    66.442  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.2862819  0.0038761   -73.859  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.1176630  0.0064187  -174.125  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.6107283  0.0060482  -100.977  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7030140  0.0107340  -158.656  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.1742585  0.0086479   -20.150  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -0.0891321  0.0082045   -10.864  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.8206606  0.0100449   -81.699  &lt; 2e-16 ***\nDESTIN_SZPNSZ01 -0.3076205  0.0049172   -62.560  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.9275884  0.0066573   139.334  &lt; 2e-16 ***\nDESTIN_SZPNSZ03  0.0950709  0.0067179    14.152  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.7869438  0.0073358   243.593  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9944933  0.0106714    93.193  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0883324  0.0063979  -170.109  &lt; 2e-16 ***\nDESTIN_SZPRSZ02 -0.4975984  0.0044093  -112.853  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6272557  0.0033042   189.835  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.6356411  0.0074834   -84.940  &lt; 2e-16 ***\nDESTIN_SZPRSZ05 -0.3763500  0.0041476   -90.740  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.1841643  0.0043211    42.620  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.0653637  0.0100317  -106.200  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.8634218  0.0057522  -150.102  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -1.5137864  0.0086259  -175.493  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -1.2508941  0.0061698  -202.743  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.6998385  0.0055441  -126.232  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7328309  0.0056708  -129.228  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.6554222  0.0050774  -129.087  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.8980212  0.0053673  -167.315  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -1.5404086  0.0090090  -170.986  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.2336931  0.0039637    58.958  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3835458  0.0046844   -81.877  &lt; 2e-16 ***\nDESTIN_SZQTSZ10 -0.4984970  0.0048580  -102.614  &lt; 2e-16 ***\nDESTIN_SZQTSZ11 -0.0144119  0.0045726    -3.152  0.00162 ** \nDESTIN_SZQTSZ12 -0.2262282  0.0055135   -41.032  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.1474976  0.0042318    34.855  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.1112488  0.0046067    24.149  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  0.0964562  0.0058069    16.611  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.8259567  0.0053674  -153.885  &lt; 2e-16 ***\nDESTIN_SZRCSZ02 -2.2641402  0.0146502  -154.547  &lt; 2e-16 ***\nDESTIN_SZRCSZ03 -1.0174766  0.0072116  -141.089  &lt; 2e-16 ***\nDESTIN_SZRCSZ04 -2.1520712  0.0103677  -207.574  &lt; 2e-16 ***\nDESTIN_SZRCSZ05 -2.1798021  0.0097692  -223.130  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.8927620  0.0126836  -149.229  &lt; 2e-16 ***\nDESTIN_SZRCSZ08 -1.5944519  0.0107021  -148.985  &lt; 2e-16 ***\nDESTIN_SZRCSZ09 -1.3664499  0.0100596  -135.835  &lt; 2e-16 ***\nDESTIN_SZRCSZ10 -0.8106750  0.0052088  -155.635  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.6488292  0.0088804  -185.671  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.2122648  0.0119376  -185.319  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.9433384  0.0101965  -190.588  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.5638031  0.0127438  -122.711  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -1.3421459  0.0117115  -114.601  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -0.3826176  0.0054100   -70.725  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -0.9281934  0.0064270  -144.421  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.6003815  0.0038044   157.811  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.0383456  0.0049441     7.756 8.78e-15 ***\nDESTIN_SZSBSZ05 -0.7642864  0.0059839  -127.725  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -2.1547719  0.0223953   -96.215  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -2.0184111  0.0163921  -123.133  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  1.0585725  0.0045531   232.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.5416971  0.0044614   121.420  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.5331643  0.0040259  -132.434  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.3651744  0.0032038   113.983  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -0.8717163  0.0046738  -186.511  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.2586572  0.0039102   -66.150  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.8930919  0.0049280  -181.227  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.2801732  0.0197048  -166.466  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.2307557  0.0049986   -46.164  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2503996  0.0044074   -56.814  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4642544  0.0041304  -112.398  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.3866295  0.0041114   -94.038  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0698393  0.0083196  -248.790  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.3958431  0.0032265   122.683  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4343179  0.0041796  -103.914  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5844619  0.0139428   -41.919  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.6708219  0.0062908  -106.635  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.2019226  0.0046474    43.449  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.5039124  0.0052688   -95.640  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -0.9159282  0.0137135   -66.790  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.4787141  0.0115189   -41.559  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7672697  0.0066932  -114.635  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9177537  0.0054430  -168.611  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1818764  0.0065352  -180.849  &lt; 2e-16 ***\nDESTIN_SZSRSZ02 -1.3030182  0.0077031  -169.155  &lt; 2e-16 ***\nDESTIN_SZSRSZ03 -1.4193324  0.0070032  -202.668  &lt; 2e-16 ***\nDESTIN_SZSVSZ01 -1.0638836  0.0421548   -25.238  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -3.7186433  0.0338624  -109.816  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4807672  0.0178452  -139.016  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -2.4477557  0.0177022  -138.274  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -1.9277088  0.0119892  -160.788  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.3957891  0.0046099   -85.856  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.2843697  0.0029280   438.650  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.5255595  0.0032808   160.192  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  0.7492490  0.0034407   217.759  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.5931173  0.0042822   138.507  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.4535588  0.0046495   -97.549  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0934837  0.0060338  -181.225  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.1159434  0.0074351  -150.092  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.9995060  0.0057250  -174.588  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.3696675  0.0046378   -79.707  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.2525639  0.0032305    78.181  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.2528258  0.0047075   -53.707  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5279995  0.0062841  -243.154  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -0.9404446  0.0049204  -191.131  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4598113  0.0063548   -72.357  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -1.7673404  0.0090777  -194.690  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2383224  0.0067084  -184.593  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.3746430  0.0050668   -73.941  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -0.9533305  0.0062146  -153.401  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.3056595  0.0042168   -72.487  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6867893  0.0052094  -131.836  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -0.8762131  0.0198461   -44.150  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.6843938  0.0094213   -72.643  &lt; 2e-16 ***\nDESTIN_SZTSSZ03 -0.0904515  0.0070799   -12.776  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.3743395  0.0075914    49.311  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3853172  0.0075725   182.941  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  1.5296750  0.0134882   113.409  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  0.9091963  0.0047097   193.047  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -0.6439147  0.0081845   -78.675  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -2.1459650  0.0247981   -86.538  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  0.9549661  0.0031046   307.594  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -0.7933981  0.0050239  -157.924  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.5997619  0.0035370   169.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.4695093  0.0050382   -93.190  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.1335226  0.0045530   -29.327  &lt; 2e-16 ***\nDESTIN_SZWDSZ06  0.1507121  0.0036921    40.820  &lt; 2e-16 ***\nDESTIN_SZWDSZ07  0.0983013  0.0049505    19.857  &lt; 2e-16 ***\nDESTIN_SZWDSZ08  0.0429259  0.0054738     7.842 4.43e-15 ***\nDESTIN_SZWDSZ09 -0.2510980  0.0041672   -60.256  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.9397554  0.0033699   278.866  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3479625  0.0045725   -76.100  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -1.2752017  0.0047773  -266.929  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4025264  0.0043523   -92.486  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.9068813  0.0087608  -217.660  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.3395696  0.0066157  -202.482  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.6224806  0.0083748   -74.328  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6438403  0.0033832   190.307  &lt; 2e-16 ***\nDESTIN_SZYSSZ09 -0.0171702  0.0035489    -4.838 1.31e-06 ***\nlog(dist)       -0.6926466  0.0001089 -6358.780  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 102725286  on 20848  degrees of freedom\nResidual deviance:  34895044  on 20230  degrees of freedom\nAIC: 35027862\n\nNumber of Fisher Scoring iterations: 7\n\n\nAgain, let’s check the R-square values of doubly constrained SIM model this time.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.5676511\n\n\nNotice that there is a relatively larger improvement in the R-squared value than destination constrained SIM."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#deriving-new-variables-from-accidents-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#deriving-new-variables-from-accidents-data",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.1 Deriving new variables from Accidents data",
    "text": "3.1 Deriving new variables from Accidents data\nUsing the incident_datetime column, we can also derive additional columns such as seasons, month, day of the week, time of the day (e.g. morning or evening peak periods). The morning rush hour is said to last from 6am to 9am and evening rush hour is reported to be from 4pm to 7pm (The Nation).\nI also think it would be interesting to derive a column that indicates accidents that happened during the Songkran festival holiday. Notoriously dubbed as the Seven Deadly Days of Songkran, road accidents in Bangkok is said to surge due increased traffic from people traveling to celebrate with family.\n\naccidents_bmr_extra &lt;- accidents_bmr %&gt;% \n  # Derive month, days, hour columns as well as a Songkran indicator\n  mutate(\n    month = month(incident_datetime,\n                  label = TRUE),\n    day = wday(incident_datetime,\n                    label = TRUE),\n    hour = hour(incident_datetime),\n    songkran = ifelse(\n      as_date(incident_datetime) &gt;= as_date(paste0(year(incident_datetime), \"-04-09\")) &\n        as_date(incident_datetime) &lt;= as_date(paste0(year(incident_datetime), \"-04-16\")) &\n        year(incident_datetime) %in% c(2019, 2020, 2021, 2022),\n      1,\n      0)) %&gt;%\n\n  # Derive season column and peak period indicator\n  mutate(\n    weektype = ifelse(\n      day %in% c(\"Sat\", \"Sun\"),\n      \"weekend\",\n      \"weekday\"\n    ),\n    season = ifelse(\n      month %in% c(\"Feb\", \"Mar\", \"Apr\", \"May\"),\n      \"Summer\",\n      ifelse(\n        month %in% c(\"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"),\n        \"Rainy\",\n        \"Winter\"\n        )\n      ),\n    peakperiod = ifelse(\n      hour &gt; 6 & hour &lt; 9,\n      \"morningpeak\",\n      ifelse(\n        hour &gt; 16 & hour &lt; 19,\n        \"eveningpeak\",\n        \"non-peak\"\n      )\n    )\n    ) %&gt;% \n\n  # Drop columns not required anymore\n  select(-c(\"acc_code\", \n            \"incident_datetime\", \n            \"agency\",\n            \"month\", \"day\", \"hour\"))\n\nThe code chunk above performs the following function:\n\nThe lubridate package within tidyverse is utilised to extract temporal components (month, day of the week, and hour) from the incident_datetime column using the month(), wday(), and hour() functions, respectively.\nThe songkran indicator is created using ifelse(), along with as_date() and year(), to generate a binary variable (1 for “Yes”, 0 for “No”) indicating whether the accident occurred during the Songkran festival (April 9 to April 16) in the years 2019, 2020, 2021, or 2022.\nTwo additional indicators are derived using ifelse():\n\nseason variable: classifies accidents into seasons (“Summer”, “Rainy”, or “Winter”) based on the month.\npeakperiod variable: identifies whether the accident occurred during morning peak hours (7-9 AM), evening peak hours (5-7 PM), or non-peak times.\n\nFinally, select() from dplyr is used to keep only the necessary variables for the study."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sf-format-into-spatstats-ppp-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-sf-format-into-spatstats-ppp-format",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.2 Converting sf format into spatstat’s ppp format",
    "text": "3.2 Converting sf format into spatstat’s ppp format\nIn order to use the capabilities of spatstat package, a spatial dataset should be converted into an object of class planar point pattern (ppp). A ppp object contains the spatial coordinates of the points, the marks attached to the points (if any), the window in which the points were observed, and the name of the unit of length for the spatial coordinates. Thus, a single object of class ppp contains all the information required to perform spatial point pattern analysis.\nIn previous section, we have created sf objects of accident points. Now, we will convert them into ppp objects using as.ppp() function from spatstat package.\nThe code chunk below converts the accidents_bmr_lean object to a point pattern object of class ppp. st_coordinates() function is used to extract the coordinates of the accidents_bmr_lean object and st_bbox() function is used to extract the bounding box of the accidents_bmr_lean object. The resulting object accidents_ppp is a point pattern object of class ppp.\n\naccidents_ppp &lt;- as.ppp(st_coordinates(accidents_bmr_extra),\n                        st_bbox(accidents_bmr_extra))\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot(accidents_ppp)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#duplicates-check",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#duplicates-check",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.3 Duplicates check",
    "text": "3.3 Duplicates check\nWe will use summary() function to get summary information of accidents_ppp object.\n\nsummary(accidents_ppp)\n\nPlanar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n\n\n\nObservations\nNote that the message above suggests that the pattern contains duplicated points.\nWhen analysing spatial point processes, it is important to avoid duplication of points. This is because statistical methodology for spatial point processes is based largely on the assumption that processes are simple, i.e., that points of the process can never be coincident. When the data have coincident points, some statistical procedures designed for simple point processes will be severely affected."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#jittering",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#jittering",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.4 Jittering",
    "text": "3.4 Jittering\nTo resolve the issue of duplicated points, we apply jittering with the rjitter() function. This adds a small variation to the points, preventing them from occupying the exact same location.\n\nset.seed(1234)\naccidents_ppp_jit &lt;- rjitter(accidents_ppp, \n                             retry=TRUE, \n                             nsim=99, \n                             drop=TRUE)\n\nThe code below checks the jittered points in the chosen simulation (i.e. Simulation 99) to ensure that no duplicates remain after applying jittering.\n\nany(duplicated(accidents_ppp_jit[[\"Simulation 99\"]]))\n\n[1] FALSE\n\n\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\naccidents_ppp_jit &lt;- accidents_ppp_jit[[\"Simulation 99\"]]\n\nplot(accidents_ppp_jit)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-observation-windows",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#creating-observation-windows",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.5 Creating Observation Windows",
    "text": "3.5 Creating Observation Windows\nMany data types in spatstat require us to specify the region of space inside which the data were observed. This is the observation window and it is represented by an object of class owin. In this analysis, our study area is BMR, hence we will use BMR boundary as the observation window for spatial point pattern analysis.\nTo convert our adminboundary_bmr sf object to owin object, we will use as.owin() function from spatstat package.\n\nadminboundary_bmr_owin &lt;- as.owin(adminboundary_bmr)\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot.owin(adminboundary_bmr_owin)\n\n\n\n\n\nsummary(adminboundary_bmr_owin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combing-ppp-and-owin-objects",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combing-ppp-and-owin-objects",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "3.6 Combing ppp and owin objects",
    "text": "3.6 Combing ppp and owin objects\nIn section 3.4, we have created our ppp object (accidents_ppp_jit) which represents the spatial points of accident locations. In section 3.5, we have created a owin object called (adminboundary_bmr_owin), which represent the observation window of our analysis.\nThe observation window adminboundary_bmr_owin and the point pattern accidents_ppp_jit can be combined, so that the custom window replaces the default rectangular extent (as seen in section 3.2).\n\nacc_bmr_ppp = accidents_ppp_jit[adminboundary_bmr_owin]\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\nplot(acc_bmr_ppp)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#measuring-central-tendency",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#measuring-central-tendency",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "4.1 Measuring Central Tendency",
    "text": "4.1 Measuring Central Tendency\n\n4.1.1 Mean Center\nMean center is the arithmetic average of the (x, y) coordinates of all point in the study area. Similar to mean in statistical analysis, mean center is influenced to a greater degree by the outliers.\n\naccidents_xy &lt;- st_coordinates(accidents_bmr_extra)\naccidents_mc &lt;- apply(accidents_xy, 2, mean)\n\naccidents_mc\n\n        X         Y \n 668399.5 1523495.8 \n\n\nThe results show that the mean centre is at (668399.5, 1523495.9).\n\n\n4.1.2 Median Center\nMedian center is the location that minimises the sum of distances required to travel to all points within an observation window. The procedure begins at a predetermined point, such as the median center, as the initial point. Then, the algorithm updates the median center’s new coordinates (x’, y’) continually until the optimal value is reached. The median center, as opposed to the mean center, offers a more reliable indicator of central tendency as it is unaffected by outliers.\n\naccidents_medc &lt;- apply(accidents_xy, 2, median)\naccidents_medc\n\n        X         Y \n 673446.1 1520755.0 \n\n\nBased on the results, the median centre of accidents is (673446.1, 1520755.0).\nThe mean centers and median centers are similar. This may imply that the distribution of the data is relatively balanced and there is not a significant difference in the spatial patterns between the accident points. Additionally, this indicates that both the mean center and median center are effective measures for analyzing the central tendency of the data in this context.\n\npar(bg = '#E4D5C9', mar = c(0,0,1,0))\n\nplot(st_geometry(adminboundary_bmr), \n     col='#eeeae2')\n\n\n\nplot(accidents_xy, \n     add = T, cex=0.7, pch = 21,\n     main=\"Mean and Median Centers of Accidents in BMR\")\npoints(cbind(accidents_mc[1], accidents_mc[2]), pch='*', col='#f5347f', cex=3)\npoints(cbind(accidents_medc[1], accidents_medc[2]), pch='*', col='#bb8bdc', cex=3)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#measuring-dispersion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#measuring-dispersion",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "4.2 Measuring Dispersion",
    "text": "4.2 Measuring Dispersion\n\n4.2.1 Standard Distance\nStandard distances are defined similarly to standard deviations. This indicator measures how dispersed a group of points is around its mean center.\n\naccidents_sd &lt;- sqrt(sum((accidents_xy[,1] - accidents_mc[1])^2 +\n                           (accidents_xy[,2] - accidents_mc[2])^2) \n                     / nrow(accidents_xy))\n\naccidents_sd\n\n[1] 27235.14\n\n\n\n\n4.2.2 Plotting Standard Distance\nIn this section, we will create bearing circle of accident points using the standard distance value we have calculated earlier. This can provide visual representation of the dispersion.\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot(st_geometry(adminboundary_bmr), col='#eeeae2', main=\"Standard Distance of Accidents in BMR\")\n\n\n\nplot(accidents_xy, cex=.5)\npoints(cbind(accidents_mc[1], accidents_mc[2]), pch='*', col='#f5347f', cex=3)\n\nbearing &lt;- 1:360 * pi/180\ncx &lt;- accidents_mc[1] + accidents_sd * cos(bearing)\ncy &lt;- accidents_mc[2] + accidents_sd * sin(bearing)\ncircle &lt;- cbind(cx, cy)\nlines(circle, col='#f5347f', lwd=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatial-randomness-test",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatial-randomness-test",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "4.3 Spatial Randomness Test",
    "text": "4.3 Spatial Randomness Test\nClark and Evans (1954) give a very simple test of spatial randomness called Clark and Evans aggregation index (R). It is the ratio of the observed mean nearest neighbour distance in the pattern to that expected for a Poisson point process of the same intensity. R-value &gt;1 suggests ordering, while R-value &lt;1 suggests clustering.\nWe will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\n\\(H_0\\) = The distribution of accident points are randomly distributed.\n\\(H_1\\) = The distribution of accidents points are not randomly distributed.\nThe 95% confidence interval will be used.\n\nset.seed(1234)\nclarkevans.test(acc_bmr_ppp,\n                correction=\"none\",\n                clipregion=\"adminboundary_bmr_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  acc_bmr_ppp\nR = 0.22579, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe Clark-Evans test for the accident points shows an R-value of 0.22579, which is less than 1. This indicates a clustered distribution. The p-value is less than 2.2e-16, which is extremely small and less than the significance level of 0.05. This means that we will reject the null hypothesis (\\(H_0\\)) and accept the alternative hypothesis (\\(H_1\\)).\nTherefore, the statistical inference from this test is that the accident points are not randomly distributed but are clustered. This suggests that there may be underlying factors influencing the spatial distribution of these points."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#rescaling-acc_bmr_ppp",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#rescaling-acc_bmr_ppp",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.1 Rescaling acc_bmr_ppp",
    "text": "5.1 Rescaling acc_bmr_ppp\nThe EPSG: 32647 Coordinate References System uses meters as the standard unit. Thus, acc_bmr_ppp prepared earlier is also in metres. However, we will need to convert the measuring unit from metre to kilometeres when calculating the kernel density estimators for entirety of BMR because kilometers provide a more appropriate scale for analysing large areas.\n\nacc_bmr_ppp.km &lt;- rescale(acc_bmr_ppp, 1000, \"km\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-default-kernel-density-estimation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#computing-default-kernel-density-estimation",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.2 Computing Default Kernel Density Estimation",
    "text": "5.2 Computing Default Kernel Density Estimation\nKernel Destiny Estimation (KDE) generates a surface (raster) representing the estimated distribution of point events over the observation window. Each cell in the KDE layer carries a value representing the estimated density of that location.\nKDE allows us to identify traffic accident hot spots, which is an essential step for the appropriate allocation of resources for safety improvements. To do that, we use density.ppp() from the spatstat package.\n\n\nShow the code\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nkde_default &lt;- density(acc_bmr_ppp.km)\nplot(kde_default, main = \"Default Density KDE\")\ncontour(kde_default, add=TRUE)\n\n\n\n\n\nThe key argument to pass to the density() function for point pattern objects is sigma, which determines the smoothing bandwidth of the kernel. A smaller bandwidth reveals more details, creating peaks and valleys, while a larger bandwidth smooths the distribution but with less precision. If the bandwidth is too small, the result can look overly noisy, and if it’s too large, important details may be lost due to over-smoothing.\nBy default, when the sigma value isn’t provided, a bandwidth is determined by a simple rule of thumb that depends only on the size of the window. This default setting might not always give the desired result. In the KDE plot we generated, there’s evidence of over-smoothing, where only one large spatial cluster is visible, potentially hiding smaller clusters or important details.\nTo address this, we can manually set the bandwidth using the sigma argument or choose a different kernel function through the kernel argument. This will help create more intuitive and detailed KDE maps that better capture the structure of the data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-layers-with-fixed-bandwidth",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-layers-with-fixed-bandwidth",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.3 KDE Layers with Fixed Bandwidth",
    "text": "5.3 KDE Layers with Fixed Bandwidth\n\n5.3.1 Computing Fixed Bandwidths Using Different Bandwidth Selection Methods\n4 automatic bandwidth calculation methods are available:\n\nbw.diggle(): In the Cross Validated Bandwidth Selection, the bandwidth is chosen to minimise the mean-square error criterion. The mean-square error is a measure of the average of the squares of the errors - that is, the average squared difference between the estimated values and the actual value.\nbw.CvL(): In the Cronie and van Lieshout’s Criterion for Bandwidth Selection, the bandwidth is chosen to minimise the discrepancy between the area of the observation window and the sum of reciprocal estimated intensity values at the points of the point process. This method aims to choose a bandwidth that best represents the underlying point process, taking into account both the observed points and the area they occupy.\nbw.scott(): In the Scott’s Rule for Bandwidth Selection, the bandwidth is computed by the rule of thumb where the bandwidth is proportional to \\(n^{-1/(d+4)}\\), where n is the number of points and d is the number of spatial dimensions. This method is useful for estimating gradual trend.\nbw.ppl(): In the Likelihood Cross Validation Bandwidth Selection, the bandwidth is chosen to maximise the point process likelihood.\n\n\nbw.diggle()bw.CvL()bw.scott()bw.ppl()\n\n\n\nbw_diggle &lt;- bw.diggle(acc_bmr_ppp.km)\nbw_diggle\n\n     sigma \n0.04025879 \n\n\n\n\n\nbw_CvL &lt;- bw.CvL(acc_bmr_ppp.km)\nbw_CvL\n\n   sigma \n11.55349 \n\n\n\n\n\nbw_scott &lt;- bw.scott(acc_bmr_ppp.km)\nbw_scott\n\n sigma.x  sigma.y \n4.527996 3.318169 \n\n\n\n\n\nbw_ppl &lt;- bw.ppl(acc_bmr_ppp.km)\nbw_ppl\n\n    sigma \n0.3493275 \n\n\n\n\n\n\nObservations\nNote that bw_diggle, bw_CvL and bw_ppl functions produce a numeric sigma value, while bw_scott provides a separate bandwidth for the x and y coordinates respectively. The sigma.x and sigma.y values represent the amount of smoothing applied in each direction when estimating the kernel density.\nWe can specify isotropic=TRUE argument when calculating bw_scott() method to produce a single value bandwidth, or use the bw.scott.iso() function instead.\n\n\nbw_scott_iso &lt;- bw.scott.iso(acc_bmr_ppp.km)\nbw_scott_iso \n\n   sigma \n3.876165 \n\n\n\npar(bg = '#E4D5C9',\n    #mar = c(0,0,1,0),\n    mfrow = c(1,2))\n\nplot(bw_diggle, xlim=c(0.0,0.06), ylim=c(-160,100))\nplot(bw_CvL)\n\n\n\n\n\npar(bg = '#E4D5C9',\n    #mar = c(0,0,1,0),\n    mfrow = c(1,2))\n\nplot(bw_scott, main=\"bw_scott\")\n\nplot(bw_ppl,\n     xlim=c(-1,5), \n     ylim=c(00,30000))\n\n\n\n\n\n\n5.3.2 Choosing Fixed-Bandwidth KDE\n\nkde_diggle &lt;- density(acc_bmr_ppp.km, bw_diggle)\nkde_CvL &lt;- density(acc_bmr_ppp.km, bw_CvL)\nkde_scott &lt;- density(acc_bmr_ppp.km, bw_scott)\nkde_ppl &lt;- density(acc_bmr_ppp.km, bw_ppl)\n\npar(bg = '#E4D5C9',\n    mar = c(1,1,1,1.5),\n    mfrow = c(2,2))\n\nplot(kde_diggle,main = \"kde_diggle\")\nplot(kde_CvL,main = \"kde_CvL\")\nplot(kde_scott,main = \"kde_scott\")\nplot(kde_ppl,main = \"kde_ppl\")\n\n\n\n\nNext, we will try to plot histograms to compare the distribution of KDE values obtained from density() function using different bandwidth selection methods.\n\npar(bg = '#E4D5C9',\n    mar = c(2,2,2,2),\n    mfrow = c(2,2))\n\nhist(kde_diggle,main = \"kde_diggle\")\nhist(kde_CvL,main = \"kde_CvL\")\nhist(kde_scott,main = \"kde_scott\")\nhist(kde_ppl,main = \"kde_ppl\")\n\n\n\n\n\nObservations\n\nkde_diggle and **kde_ppl*: The sharp spike at the beginning indicates a high concentration of points within the first bin, while the remaining bins show little to no density. This pattern suggests that a specific area within our observation window experiences significant spatial clustering, with other areas showing much less activity.\nkde_CvL: This method results in a more evenly spread distribution, indicating that spatial point concentrations are more dispersed across the area. However, the smaller bin size in this method may smooth out the data too much, potentially masking smaller, more localised clusters or important spatial patterns.\nkde_scott: Compared to the other methods, kde_scott shows a wider range of values and a less pronounced initial spike, suggesting it captures both highly concentrated and moderately concentrated areas more effectively. This method balances the spatial distribution better by not overly smoothing or skewing the data.\n\nBased on these observations, we will proceed with the scott method for further analysis. The scott method strikes a good balance between bias and variance. If the bandwidth is too small, the estimate can become overly variable and noisy (high variance), as seen in the histograms for bw_diggle and bw_ppl. Conversely, if the bandwidth is too large, the data becomes oversmoothed, losing important spatial details (high bias), which is evident in the kde_CvL histogram. By balancing these two extremes, bw_scott provides a more comprehensive and detailed representation of spatial clustering without losing important nuances.\n\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nkde_fixed_scott &lt;- density(acc_bmr_ppp.km, bw_scott)\nplot(kde_fixed_scott,\n     main = \"Fixed-Bandwidth KDE for Accident Points (Using bw_scott)\")\ncontour(kde_fixed_scott, add=TRUE)\n\n\n\n\nVisual inspection reveals that the bandwidth suggested by the bw_scott method causes noticeable over-smoothing. Although automatic bandwidth selection offers a solid initial estimate, fine-tuning is often required to achieve more accurate results.\nTo counteract the over-smoothing, we will apply a simple adjustment by reducing the bandwidth by half. This reduction should help capture more detailed patterns in the data and avoid the loss of important spatial information.\n\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nkde_fixed_scott &lt;- density(acc_bmr_ppp.km, bw_scott/2)\nplot(kde_fixed_scott,\n     main = \"Fixed-Bandwidth KDE for Accident Points (Using bw_scott)\")\ncontour(kde_fixed_scott, add=TRUE)\n\n\n\n\nFrom the plot above, it seems that reducing the bandwidth (which shrinks the point cluster buffers) has lessened the over-smoothing effect while still clearly illuminating the accident hotspot areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-methods",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-methods",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.3.3 Kernel Methods",
    "text": "5.3.3 Kernel Methods\nThere are 4 types of kernels in density.ppp(), namely: Gaussian, Epanechnikov, Quartic and Dics. A Gaussian kernel is set automatically.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\nkde_fixed_scott.gaussian &lt;- density(acc_bmr_ppp.km, \n                          sigma=bw_scott, \n                          edge=TRUE, \n                          kernel=\"gaussian\")\n\n\nkde_fixed_scott.epanechnikov &lt;- density(acc_bmr_ppp.km, \n                          sigma=bw_scott, \n                          edge=TRUE, \n                          kernel=\"epanechnikov\")\n   \nkde_fixed_scott.quartic &lt;- density(acc_bmr_ppp.km, \n                          sigma=bw_scott, \n                          edge=TRUE, \n                          kernel=\"quartic\")\n       \n   \nkde_fixed_scott.disc &lt;- density(acc_bmr_ppp.km, \n                          sigma=bw_scott, \n                          edge=TRUE, \n                          kernel=\"disc\")\n         \npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0),\n    mfrow = c(2,2))\n\nplot(kde_fixed_scott.gaussian, main=\"Gaussian\")\nplot(kde_fixed_scott.epanechnikov, main=\"Epanechnikov\")\nplot(kde_fixed_scott.quartic, main=\"Quartic\")\nplot(kde_fixed_scott.disc, main=\"Disc\")\n\n\n\n\n\nObservations\nAlthough there are minor differences in smoothness and spread, all four plots display similar density estimation patterns. This indicates that the choice of kernel function does not significantly affect the KDE results. As a result, we will not emphasise this factor in our analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-layers-with-spatially-adaptive-bandwidth",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde-layers-with-spatially-adaptive-bandwidth",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.4 KDE Layers with Spatially Adaptive Bandwidth",
    "text": "5.4 KDE Layers with Spatially Adaptive Bandwidth\nThe bandwidth of a kernel estimator can be either fixed across the entire mapping area or adaptive to suit in local situations. The fixed bandwidth method explored in our earlier analysis is said to be sensitive to highly skewed distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn the section below, we compare the fixed with adaptive bandwidth-based KDE, and how they were able to detect accident hot spots.\nadaptive.density() of Spatstat offers 3 estimation methods:\n\nmethod = “voronoi”: which estimates the intensity using the Voronoi-Dirichlet tessellation\nmethod = “kernel”: which estimates the intensity using a variable-bandwidth kernel estimator\n`method = “nearest”: which computes an estimate of the intensity function of a point pattern dataset using the distance from each spatial location to the kth nearest points\n\n\nVoronoi-Dirichlet Adaptive Density EstimateVariable-bandwidth Kernel EstimatorNearest-Neighbour Adaptive Density Estimate\n\n\n\nkde_adaptive_vd &lt;- adaptive.density(acc_bmr_ppp.km, \n                                    method = \"voronoi\")\n\n\n\nShow the code\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot(kde_adaptive_vd,\n     main = \"Voronoi-Dirichlet Adaptive Density Estimate\")\n\n\n\n\n\n\n\n\nkde_adaptive_kernel &lt;- adaptive.density(acc_bmr_ppp.km, \n                                        method = \"kernel\")\n\n\n\nShow the code\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot(kde_adaptive_kernel,\n     main = \"Adaptive Kernel Density Estimate\")\n\n\n\n\n\n\n\n\nkde_adaptive_knn &lt;- adaptive.density(acc_bmr_ppp.km,\n                                     method = \"nearest\",\n                                     k = 100)\n\n\n\nShow the code\npar(bg = '#E4D5C9',\n    mar = c(0,0,1,0))\n\nplot(kde_adaptive_knn,\n     main = \"Nearest-Neighbour Adaptive Density Estimate\")\n\n\n\n\n\n\n\n\n\n5.4.1 Choosing Adaptive KDE Method\nJust as we did with the fixed bandwidth, we can create histograms to compare the distribution of KDE values obtained from the density() function using different adaptive bandwidth selection methods.\n\npar(bg = '#E4D5C9', \n    mar = c(2,2,2,2),\n    mfrow = c(2,2))\n\nhist(kde_adaptive_vd, main = \"Voronoi-Dirichlet Adaptive\")\nhist(kde_adaptive_kernel, main = \"Adaptive Kernel\")\nhist(kde_adaptive_knn, main = \"Nearest-Neighbour Adaptive\")\n\n\n\n\n\nObservations\nAnalysis of the outputs shows no significant differences in the KDE value distributions across the various methods. Each method reveals a high concentration of points in the same area. Given this consistency, we will opt for the Adaptive Kernel method because it provides a greater number of bins. This increased number of bins allows for a more granular and detailed view of the density distribution, which can enhance our analysis by offering finer insights into spatial patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-interactive-kde-maps",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-interactive-kde-maps",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.5 Plotting Interactive KDE Maps",
    "text": "5.5 Plotting Interactive KDE Maps\n\nraster_kde_fixed_scott &lt;- raster(kde_fixed_scott)\nraster_kde_adaptive_nn &lt;- raster(kde_adaptive_knn)\nraster_kde_adaptive_kernel &lt;- raster(kde_adaptive_kernel)\n\nprojection(raster_kde_fixed_scott) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_kde_adaptive_nn) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\nprojection(raster_kde_adaptive_kernel) &lt;- CRS(\"+init=EPSG:32647 +units=km\")\n\n\n\nShow the code\ntmap_mode('view')\nkde_fixed_scott &lt;- tm_basemap(server = \"OpenStreetMap\") +\n  tm_shape(raster_kde_fixed_scott) +\n  tm_raster(\"layer\",\n            n = 10,\n            title = \"KDE_Fixed_scott\",\n            alpha = 0.6,\n            palette = c(\"#f9edd1\",\"#feb7c9\",\"#f775a9\", \"#bb8bdc\",\"#021c9e\")) +\n  tm_shape(adminboundary_bmr)+\n  tm_polygons(alpha=0.1,id=\"ADM1_EN\")+\n  tmap_options(check.and.fix = TRUE)\n\nkde_adaptive_nn &lt;- tm_basemap(server = \"OpenStreetMap\") +\n  tm_shape(raster_kde_adaptive_nn) +\n  tm_raster(\"layer\",\n            n = 7,\n            title = \"KDE_Adaptive_nn\",\n            style = \"pretty\",\n            alpha = 0.6,\n            palette = c(\"#f9edd1\",\"#feb7c9\",\"#f775a9\", \"#bb8bdc\",\"#021c9e\")) +\n  tm_shape(adminboundary_bmr)+\n  tm_polygons(alpha=0.1,id=\"ADM1_EN\")+\n  tmap_options(check.and.fix = TRUE)\n\nkde_adaptive_kernel &lt;- tm_basemap(server = \"OpenStreetMap\") +\n  tm_shape(raster_kde_adaptive_kernel) +\n  tm_raster(\"layer\",\n            n = 7,\n            title = \"KDE_Adaptive_Kernel\",\n            style = \"pretty\",\n            alpha = 0.6,\n            palette = c(\"#f9edd1\",\"#feb7c9\",\"#f775a9\", \"#bb8bdc\",\"#021c9e\")) +\n  tm_shape(adminboundary_bmr)+\n  tm_polygons(alpha=0.1,id=\"ADM1_EN\")+\n  tmap_options(check.and.fix = TRUE)\n\ntmap_arrange(kde_fixed_scott, \n             kde_adaptive_nn, \n             kde_adaptive_kernel,\n             ncol=1,\n             nrow=3,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\n\nObservations\nThe analysis reveals that the highest concentration of accidents is found in Bangkok, particularly in the vicinity of the Bangkok−Ban Chang Motorway and the Bangkok Outer Ring Road. These roads are part of Motorway Route 7 and Route 9, respectively, where accident concentrations can reach up to 30 incidents. Additionally, Borommaratchachonnani Road, which is part of Highway 338 and runs along the western edge of Bangkok near the Chao Phraya River, also exhibits high accident rates. Other areas with notable accident density include major highways within the BMR.\nDifferent maps suggests different stories. The Adaptive Nearest Neighbour and Adaptive Kernel KDE methods both identify a significant concentration of accidents in the Khlong Chang Tai area along Highway 3701 in Samut Prakan, with a reported high concentration of 600 incidents. This area stands out due to its substantial accident rates, suggesting that it might be a focal point for further investigation and intervention. This was not identified in the Fixed Bandwidth KDE.\nOverall, the findings indicate that accident hotspots are predominantly located around major roadways and highways, with specific regions exhibiting particularly high accident densities. This pattern highlights the need for targeted road safety measures and further analysis in these critical areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#province-level-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#province-level-kde",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.6 Province-Level KDE",
    "text": "5.6 Province-Level KDE\nFor a more detailed look, we will create province-area level KDE maps for 2 provinces identified. In order to create such maps, we will carry out additional data wrangling as required.\nFirstly, we will filter out different planning areas as separate sf objects from adminboundary_bmr.\n\nbkk = adminboundary_bmr %&gt;% filter(ADM1_EN == \"Bangkok\")\nspk = adminboundary_bmr %&gt;% filter(ADM1_EN == \"Samut Prakan\")\n\npar(bg = '#E4D5C9',\n    mar = c(1,1,1,0),\n    mfrow=c(1,2))\nplot(st_geometry(bkk), main = \"Bangkok\")\nplot(st_geometry(spk), main = \"Samut Prakan\")\n\n\n\n\nNext, we will create owin objects to represent the observation windows for respective planning area. Once owin objects are created, we will also filter accident locations in each observation window from the original acc_bmr_ppp ppp object.\n\nbkk_owin = as.owin(bkk)\nspk_owin = as.owin(spk)\n\nacc_bkk_ppp = acc_bmr_ppp[bkk_owin]\nacc_spk_ppp = acc_bmr_ppp[spk_owin]\n\nNow that we have prepared both owin and ppp objects for each planning area, we are ready to plot KDE maps. Similar to what we have done in previous section, we will try both fixed-bandwidth and adaptive bandwidth KDE maps."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#province-level-fixed-bandwidth-kde-maps",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#province-level-fixed-bandwidth-kde-maps",
    "title": "Take-home Exercise 1: Understanding and Analysing Thailand Road Accident Data",
    "section": "5.6.1 Province-level Fixed Bandwidth KDE Maps",
    "text": "5.6.1 Province-level Fixed Bandwidth KDE Maps\n\nbkk_kde_scott &lt;- density(acc_bkk_ppp, sigma=bw.scott, main=\"Bangkok\")\nspk_kde_scott &lt;- density(acc_spk_ppp, sigma=bw.scott, main=\"Samut Prakan\")\n\npar(bg = '#E4D5C9', \n    mar = c(1,1,1,1.5),\n    mfrow = c(1,2))\n\nplot(bkk_kde_scott,\n     main = \"Fixed KDE - Bangkok\")\ncontour(bkk_kde_scott, \n        add=TRUE)\n\nplot(spk_kde_scott,\n     main = \"Fixed KDE - Samut Prakan\")\ncontour(spk_kde_scott, \n        add=TRUE)\n\n\n\n\n\n5.6.2 Province-level Adaptive-Bandwidth KDE Maps\n\nbkk_kde_adaptive_kernel &lt;- adaptive.density(acc_bkk_ppp, method = \"kernel\")\nspk_kde_adaptive_kernel &lt;- adaptive.density(acc_spk_ppp, method = \"kernel\")\n\n\npar(bg = '#E4D5C9', mar = c(1,1,1,1.5),mfrow = c(1,2))\n\nplot(bkk_kde_adaptive_kernel,\n     main = \"Adaptive KDE - Bangkok\")\ncontour(bkk_kde_adaptive_kernel, \n        add=TRUE)\n\nplot(spk_kde_adaptive_kernel,\n     main = \"Adaptive KDE - Samut Prakan\")\ncontour(spk_kde_adaptive_kernel, \n        add=TRUE)\n\n\n\n\n\nObservations\nThe planning area-level KDE maps highlight some limitations when applied to smaller regions like provinces, despite their strength in visualising spatial data.\nOne issue is that fixed KDE maps tend to over-smooth the data, making it hard to identify key details, while adaptive KDE maps sometimes under-smooth, leading to too much noise. This makes it challenging to extract meaningful insights from the data.\nAdditionally, because KDE calculates values using grid pixels and Euclidean distance, the resulting grid blocks limit our ability to see detailed differences within smaller areas such as the example below. This restricts our ability to identify finer patterns within each region, reducing the effectiveness of the analysis at a more localised level."
  }
]