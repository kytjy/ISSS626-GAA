---
title: "Hands-on Exercise 1.1: Geospatial Data Wrangling with R"
title-block-banner: true
date: "##"
date-modified: "last-modified"
toc: true
editor: visual
execute: 
  freeze: auto
  warning: false
  #echo: false
  #message: false
  html:
    code-fold: True
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: true
---

# 1 Overview

In this hands-on exercise, we learn how to import and wrangle geospatial data using appropriate R packages.

# 2 Getting Started

The code chunk below installs and loads sf and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

# 3 Importing Geospatial Data

::: panel-tabset
## Import polygon feature data in shapefile format

-   *st_read()* function of sf package:

    -   read simple features form file/database, or retrieve layer names and their geometry types(s)

    -   imports `MP14_SUBZONE_WEB_PL` shapefile into R as [polygon]{.underline} feature data frame

    -   `dsn` = defines data path; `layer` = provide the shapefile name

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

-   Interpretation:

    -   Geospatial objects = multipolygon features

    -   323 multipolygon features and 15 fields in `mpsz` simple feature data frame

    -   `mpsz` in svy21 projected coordinates systems

    -   Bounding box provides x extend and y extend of the data

## Import polyline feature data in shapefile form

-   Imports CyclingPath shapefile into R as line feature data frame

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

-   Interpretation:

    -   1625 features and 2 fields in `cyclingpath` [linestring]{.underline} feature data

    -   **svy21** projected coordinates system

## Import GIS data in kml format

-   PreSchoolsLocation is in kml format

-   Below code chunk used to important kml into R

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

-   Interpretation:

    -   preschool = [point]{.underline} feature data frame
:::

# 4 Checking the Content of a Simple Feature Data Frame

::: panel-tabset
## st_geometry()

-   Column in sf data.frame that contains geometries is a list, of class `sfc`

-   Can be retrieved by mpsz\$geom or mpsz\[\[1\]\], else *st_geometry()* can also be used

```{r}
st_geometry(mpsz)
```

-   Prints out basic info of feature class, eg type of geometry, geographic extent of feature and coordinate system of the data

## glimpse()

-   *glimpse()* report shows data types of each field

-   `FMEL-UPD_D` field = date; `X_ADDR`, `Y_ADDR`, `SHAPE_L`, `SHAPE_AREA` = double-precision values

```{r}
glimpse(mpsz)
```

## head()

-   *head()* used to display complete information of a feature object

-   *n = 5* shows the selected number of records to display

```{r}
head(mpsz, n=5)
```
:::

# 5 Plotting the Geospatial Data

-   plot() visualises geospatial features

-   Default plot is a multi-plot of all attributes

```{r}
plot(mpsz)
```

-   Can choose to plot only the geometry

```{r}
plot(st_geometry(mpsz))
```

-   Alternatively can also choose to plot the sf object by using specific attribute

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 6 Working with Projection

-   To perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system

-   **Projection Transformation** refers to projecting a simple feature data from one coordinate system to another coordinate system

## Assigning EPSG code to a simple feature data frame

-   A common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process

-   Below example shows the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package

```{r}
st_crs(mpsz)
```

-   Interpretation:

    -   Although mpsz data frame is projected in svy21 but EPSG is indicated as 9001. Correct EPSG code should be 3414.

-   To assign correct EPS code to mpsz data frame, *st_set_crs()* of **sf** package can be used

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

-   Check CSR again. Notice that EPSG code is now 3414.

```{r}
st_crs(mpsz3414)
```

## Transforming the projection of preschool from wgs84 to svy21

-   In geospatial analytics, it is common to transform original data from geographic coordinate system to projected coordinate system, as geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurement

-   Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

-   This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathematically

-   Perform the projection transformation by using the code chunk below

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

> Note: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.

```{r}
head(preschool3414, n=5)
```

-   Interpretation:

    -   Notice that it is in svy21 projected coordinate system now

    -   In *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

# 7 Importing and Converting an Aspatial Data

-   Data such as `listing` of Inside Airbnb is called aspatial data, because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

-   We will learn how to import an aspatial data into R environment \> save it as a tibble data frame \> convert it into a simple feature data frame

## Importing aspatial data

-   Since `listings` data set is in csv file format, we will use read_csv() of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a tibble data frame

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

-   After importing the data file, we should examine if data file has been imported correctly

-   We can use list() instead of glimpse()

```{r}
list(listings)
```

-   Interpretation:

    -   `listing` tibble data frame consists of 3,483 rows and 18 columns

    -   Includes `latitude` and `longitude`, note that these are in decimal degree format

    -   As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System

## Creating a simple feature data frame from an aspatial data frame

-   Code chunk below converts `listing` data frame into a simple feature data frame by using *st_as_sf()* of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

-   Arguments:

    -   *coords*: requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

    -   *crs*: requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

    -   *%\>%*: nests *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

-   Interpretation:

    -   Displays content of `listing_sf`

    -   `geometry`: new column added

    -   `longitude` and `latitude` columns dropped from data frame

# 8 Geoprocessing with sf package

-   **sf** package offers a wide range of geoprocessing (also known as GIS analysis) functions, other than providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data

-   In this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

## Buffering

> **Scenario:**
>
> The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**Solution:**

1.  st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths
    1.  nQuadSegs = number of line segments used to approximate a quarter circle

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

2.  Calculate the area of the buffers

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

3.  sum() of Base R will be used to drive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

## Point-in-polygon count

> **Scenario:**
>
> A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**Solution:**

1.  The code chunk below performs two operations at one go.
    1.  Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html).
    2.  Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

2.  Check summary statistics of the newly derived *PreSch Count* field by using *summary()*.

```{r}
summary(mpsz3414$`PreSch Count`)
```

3.  To list the planning subzone with the most number of pre-school, the *top_n()* of **dplyr** package is used.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

> **Scenario:**
>
> Calculate the density of pre-school by planning subzone.

1.  Use *st_area()* of **sf** package to derive the area of each planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>% 
  st_area()
```

2.  *mutate()* of **dplyr** package is used to compute the density

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

print(mpsz3414)
```

## 9 Exploratory Data Analysis (EDA)

-   Many geospatial analytics start with Exploratory Data Analysis.

-   In this section, we learn how to use ggplot2 functions to create functional and truthful statistical graphs for EDA purposes.

1.  Plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used.

```{r}
hist(mpsz3414$`PreSch Density`)
```

-   Although syntax is easy, the output is far from meeting publication quality. Function also has limited room for further customization.

```{r}
ggplot(data=mpsz3414,
       aes(x=as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  labs(title= "Are pre-schools evenly distributed in Singapore?",
       subtitle = "There are may planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools.",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

-   Using ggplot2 method, we can also plot a scatterplot showing the relationship between pre-school density and pre-school count.

```{r}
ggplot(data=mpsz3414,
       aes(y = `PreSch Count`,
           x=as.numeric(`PreSch Density`)))+
  geom_point(color="black",
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title= "",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count")
```
