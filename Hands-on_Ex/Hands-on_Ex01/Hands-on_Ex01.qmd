---
title: "Hands-on Exercise 1a: Geospatial Data Wrangling"
title-block-banner: true
date: "03-Aug-24"
date-modified: "last-modified"
toc: true
toc-depth: 4
editor: visual
execute: 
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

![](images/placeholder_1a.PNG){fig-align="center"}

# 1 Overview

In this hands-on exercise, we learn how to import, wrangle, integrate, and process geographically referenced data sets using appropriate R packages.

# 2 Data Acquisition

+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| Type       | Details                                                                                                                                                                  | Screenshot                                       |
+============+==========================================================================================================================================================================+==================================================+
| Geospatial | [Master Plan 2014 Subzone Boundary Web](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9) | ![](images/MPSZ_SHP.PNG){width="600"}            |
|            |                                                                                                                                                                          |                                                  |
|            | *Source: data.gov.sg\                                                                                                                                                    |                                                  |
|            | Format: SHP*                                                                                                                                                             |                                                  |
+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| Geospatial | [Pre-Schools Location](https://beta.data.gov.sg/datasets?query=Pre-Schools+Location&resultId=d_a72bcd23e208d995f3bd4eececeaca43)                                         | ![](images/Pre-Schools_Loc_KML.PNG){width="600"} |
|            |                                                                                                                                                                          |                                                  |
|            | *Source: data.gov.sg\                                                                                                                                                    |                                                  |
|            | Format: KML*                                                                                                                                                             |                                                  |
+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| Geospatial | [Cycling Path](https://datamall.lta.gov.sg/content/datamall/en/static-data.html)                                                                                         | ![](images/CyclingPath.PNG){width="600"}         |
|            |                                                                                                                                                                          |                                                  |
|            | *Source: LTA Data Mall\                                                                                                                                                  |                                                  |
|            | Format: SHP*                                                                                                                                                             |                                                  |
+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| Aspatial   | [Singapore AirBnB Listing](https://insideairbnb.com/get-the-data/)                                                                                                       | ![](images/AirBnB.PNG){width="600"}              |
|            |                                                                                                                                                                          |                                                  |
|            | Source: Inside AirBnB\                                                                                                                                                   |                                                  |
|            | Format: CSV                                                                                                                                                              |                                                  |
+------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------+

: Data Sources {tbl-colwidths="\[10,20,70\]"}

# 3 Loading Packages

+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Package                                 | Description                                                                                                                                                                                                                              |
+=========================================+==========================================================================================================================================================================================================================================+
| [tidyverse](https://www.tidyverse.org/) | A collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                                              |
|                                         |                                                                                                                                                                                                                                          |
|                                         | Within **tidyverse**, we will explore the use of **readr** for importing csv files, **readxl** for importing Excel worksheets, **tidyr** for manipulating data, **dplyr** for data transformation, and **ggplot2** for visualising data. |
+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [sf](https://r-spatial.github.io/sf/)   | For importing, managing, and processing geospatial data.                                                                                                                                                                                 |
+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: {tbl-colwidths="\[10,90\]"}

Unzip these downloads and save them into *geospatial* and *aspatial* sub-folders of the *data* folder.

The code chunk below installs and loads **sf** and **tidyverse** packages into R environment using `p_load` from the **pacman** package.

```{r}
pacman::p_load(sf, tidyverse)
```

# 4 Importing Geospatial Data

## 4.1 Import polygon feature data in shapefile format

The code chunk below uses `st_read()` function of sf package:

-   read simple features form file/database, or retrieve layer names and their geometry types(s)
-   imports `MP14_SUBZONE_WEB_PL` shapefile into R as [polygon]{.underline} feature data frame
-   `dsn` = defines data path; `layer` = provide the shapefile name

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

::: {.lightbox .light data-latex="light"}
**Interpretation**

-   Geometry type = [**multipolygon**]{.underline} features
-   323 multipolygon features and 15 fields in *mpsz* simple feature data frame
-   Projected CRS = ***svy21*** projected coordinates systems
-   Bounding box provides x extend and y extend of the data
:::

## 4.2 Import polyline feature data in shapefile form

The code chunk below imports *CyclingPath* shapefile into R as [**line**]{.underline} feature data frame

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

::: {.lightbox .light data-latex="light"}
**Interpretation** 

-   3138 features and 2 fields in *cyclingpath* [linestring]{.underline} feature data 
-   Projected CRS = ***svy21*** projected coordinates system

:::

## 4.3 Import GIS data in kml format

*PreSchoolsLocation* is in kml format. Below code chunk used to import kml into R.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

::: {.lightbox .light data-latex="light"}
**Interpretation** 

-   **preschool** = [point]{.underline} feature data frame 
-   2290 features and 2 fields
-   Geodetic CRS = ***WGS84*** coordinates system

:::

# 5 Checking the Content of a Simple Feature Data Frame

In this sub-section, we will learn different ways to retrieve information related to the content of a simple feature data frame.

::: panel-tabset
## st_geometry()

-   Column in sf data.frame that contains geometries is a list, of class **sfc**
-   Can be retrieved by `mpsz$geom` or `mpsz\[[1]]`, else `st_geometry()` can also be used

```{r}
st_geometry(mpsz)
```

The code above prints out basic information of the feature class, eg type of geometry, geographic extent of feature and coordinate system of the data.

## glimpse()

-   `glimpse()` report shows data types of each field
-   *FMEL-UPD_D* field = date; *X_ADDR*, *Y_ADDR*, *SHAPE_L*, *SHAPE_AREA* = double-precision values

```{r}
glimpse(mpsz)
```

## head()

-   `head()` used to display complete information of a feature object
-   `n = 5` shows the selected number of records to display

```{r}
head(mpsz, n=5)
```
:::

# 6 Plotting the Geospatial Data

-   `plot()` visualises geospatial features but meant for taking a quick look. For high cartographic quality plots, packages such as **tmap** should be used.
-   Default plot is a multi-plot of all attributes

```{r}
par(bg = '#E4D5C9')

plot(mpsz)
```

To plot only the geometry:

```{r}
par(bg = '#E4D5C9')

plot(st_geometry(mpsz))
```

To plot the sf object by using specific attribute:

```{r}
par(bg = '#E4D5C9')

plot(mpsz["PLN_AREA_N"])
```

# 7 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

**Projection Transformation** refers to projection of a simple feature data from one coordinate system to another coordinate system.

::: {.notebox .note data-latex="note"}
**Singapore's SVY21**

Coordinate systems allow for common locations to be integrated into geographic datasets. The most commonly used coordinate system today is the latitude, longitude and height system in which the Equator(which lies halfway between the poles) and the Prime Meridian(a line through Greenwich) are reference lines used to measure latitude and longitude.

Projected coordinate systems and geodetic data are needed due to the Earth's imperfect ellipsoid. Localised datums (such as SVY21 in Singapore's case) can provide a more accurate representation of the area of than the global WGS 84 datum.

The coordinate systems map the Earth's spherical surface onto a two-dimensional Cartesian coordinate plane. Thus, projected coordinate systems are referred to as map projections.

![](Images/SG_CRS.PNG){fig-align="center"}
[*EPSG*](https://epsg.io/3414)

:::

## 7.1 Assigning EPSG code to a simple feature data frame

A common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

Below example shows the coordinate system of *mpsz* simple feature data frame by using `st_crs()` of **sf** package.

```{r}
st_crs(mpsz)
```
::: {.lightbox .light data-latex="light"}
**Interpretation:**

Although *mpsz* data frame is projected in svy21 but EPSG is indicated as 9001. Correct EPSG code should be 3414. To assign correct EPS code to mpsz data frame, `st_set_crs()` of **sf** package can be used.
:::

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Check CSR again using the code chunk below. Notice that EPSG code is now 3414.

```{r}
st_crs(mpsz3414)
```

## 7.2 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is common to transform original data from geographic coordinate system to projected coordinate system, as geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurement

Let us take *preschool* simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

In this scenario, *st_set_crs()* is not appropriate and *st_transform()* of **sf** package should be used. This is because we need to reproject *preschool* from one coordinate system to another coordinate system mathematically. 

The code chunk below performs the projection transformation:

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```


```{r}
head(preschool3414, n=5)
```
::: {.lightbox .light data-latex="light"}
**Interpretation:**

Notice that dataframe is in svy21 projected coordinate system now. In *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.
:::

# 8 Importing and Converting an Aspatial Data

Datasets such as *listing* of Inside AirBnB is called aspatial data, because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points. In this section, we will learn how to import an aspatial data into R environment, save it as a tibble data frame, and convert it into a simple feature data frame.

## 8.1 Importing aspatial data

Since *listings* data set is in csv file format, we will use `read_csv()` of **readr** package to import listing.csv as shown the code chunk below. The output R object is called *listings* and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file, we should examine if data file has been imported correctly. We can use `list()` instead of `glimpse()`.

```{r}
list(listings)
```

::: {.lightbox .light data-latex="light"}
**Interpretation:**

-   *listing* tibble data frame consists of 3,540 rows and 18 columns
-   Includes latitude and longitude, note that these are in decimal degree format
-   As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System

:::

## 8.2 Creating a simple feature data frame from an aspatial data frame

Code chunk below converts *listing* data frame into a simple feature data frame by using `st_as_sf()` of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Arguments:

-   `coords`: requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   `crs`: requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

    -   `%\>%`: nests *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

::: {.lightbox .light data-latex="light"}
**Interpretation:**

-   Displays content of *listing_sf*
-   `geometry`: new column added
-   `longitude` and `latitude` columns dropped from data frame
::: 

# 9 Geoprocessing with sf package

**sf** package offers a wide range of geoprocessing (also known as GIS analysis) functions, other than providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data.

In this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

## 9.1 Buffering

:::panel-tabset
## Scenario

The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

## Solution

1.  st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths. `nQuadSegs` = number of line segments used to approximate a quarter circle.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

2.  Calculate the area of the buffers

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

3.  `sum()` of Base R will be used to drive the total land involved

```{r}
sum(buffer_cycling$AREA)
```
:::


### 9.1.1 Line Segments

:::panel-tabset

## nQuadSegs = 10

```{r}
buffer_cycling10 <- st_buffer(cyclingpath, dist=5, nQuadSegs=10)
buffer_cycling10$AREA <- st_area(buffer_cycling10)
sum(buffer_cycling10$AREA)
```

## nQuadSegs = 20

```{r}
buffer_cycling20 <- st_buffer(cyclingpath, dist=5, nQuadSegs=20)
buffer_cycling20$AREA <- st_area(buffer_cycling20)
sum(buffer_cycling20$AREA)
```


## nQuadSegs = 30

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```
## nQuadSegs = 50

```{r}
buffer_cycling50 <- st_buffer(cyclingpath, dist=5, nQuadSegs=50)
buffer_cycling50$AREA <- st_area(buffer_cycling50)
sum(buffer_cycling50$AREA)
```

## nQuadSegs = 500

```{r}
buffer_cycling500 <- st_buffer(cyclingpath, dist=5, nQuadSegs=500)
buffer_cycling500$AREA <- st_area(buffer_cycling500)
sum(buffer_cycling500$AREA)
```
:::

### 9.1.2 Distance

:::panel-tabset

## Dist = 5

```{r}
buffer_cycling_d1 <- st_buffer(cyclingpath, dist=1, nQuadSegs=30)
buffer_cycling_d1$AREA <- st_area(buffer_cycling_d1)
sum(buffer_cycling_d1$AREA)
```

## Dist = 5

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

## Dist = 50

```{r}
buffer_cycling_d50 <- st_buffer(cyclingpath, dist=50, nQuadSegs=30)
buffer_cycling_d50$AREA <- st_area(buffer_cycling_d50)
sum(buffer_cycling_d50$AREA)
```

:::


## 9.2 Point-in-polygon count

:::panel-tabset

## Scenario

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

## Solution

1.  The code chunk below performs two operations at one go.
    1.  Firstly, identify pre-schools located inside each Planning Subzone by using [`st_intersects()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html).
    2.  Next, [`length()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

2.  Check summary statistics of the newly derived *PreSch Count* field by using `summary()`.

```{r}
summary(mpsz3414$`PreSch Count`)
```

3.  To list the planning subzone with the most number of pre-school, the `top_n()` of **dplyr** package is used.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```
:::

## 9.3 Density

:::panel-tabset
## Scenario

Calculate the density of pre-school by planning subzone.

## Solution

1.  Use `st_area()` of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>% 
  st_area()
```

2.  `mutate()` of**dplyr** package is used to compute the density

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

print(mpsz3414)
```
:::

# 10 Exploratory Data Analysis (EDA)

Many geospatial analytics start with Exploratory Data Analysis. In this section, we learn how to use **ggplot2** functions to create functional and truthful statistical graphs for EDA purposes.

1.  Plot a histogram to reveal the distribution of *PreSch Density*. Conventionally, `hist()` of R Graphics will be used.

```{r}
par(bg = '#E4D5C9')

hist(mpsz3414$`PreSch Density`)
```

Although syntax is easy, the output is far from meeting publication quality. Function also has limited room for further customization.

```{r}
ggplot(data=mpsz3414,
       aes(x=as.numeric(`PreSch Density`)))+
  
  geom_histogram(bins=20,
                 color="grey60",
                 fill="#f5f5f5") +
  
  labs(title= "Are pre-schools evenly distributed in Singapore?",
       subtitle = "There are may planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools.",
       x = "Pre-school density (per km sq)",
       y = "Frequency") +
  
  geom_vline(aes(xintercept=median(as.numeric(mpsz3414$`PreSch Density`), na.rm=T)),
               color="#815b41", linewidth=1, linetype="dashed") + 
  annotate(
      "text", 
      x = 1, 
      y = 120,
      label = paste("Median =", round(median(as.numeric(mpsz3414$`PreSch Density`), na.rm=T), 3)),
      color = "#815b41",
      size = 3.5
    ) +
  
    geom_vline(aes(xintercept=mean(as.numeric(mpsz3414$`PreSch Density`), na.rm=T)),
               colour="#A70D04", linewidth=1, linetype="dashed") + 
    annotate(
      "text", 
      x = 10, 
      y = 120,
      label = paste("Mean =", round(mean(as.numeric(mpsz3414$`PreSch Density`), na.rm=T), 3)),
      color = "#A70D04",
      size = 3.5
    ) +
  
  theme_minimal() +
  theme(plot.background=element_rect(fill="#E4D5C9",colour="#E4D5C9"))

```

Using **ggplot2** method, we can also plot a scatterplot showing the relationship between pre-school density and pre-school count.

```{r}
ggplot(data=mpsz3414,
       aes(y = `PreSch Count`,
           x=as.numeric(`PreSch Density`)))+
  geom_point(color="grey60",
             fill='#f5f5f5',
             alpha = 0.5, 
             size = 2) +
  xlim(0, 40) +
  ylim(0, 40) +
  
  geom_vline(aes(xintercept = 20),
             col = '#A70D04',
             size = 0.8,
             linetype = "dashed") + 
  geom_hline(aes(yintercept = 20),
             col = '#A70D04',
             size = 0.8,
             linetype = "dashed") + 
  
  labs(title= "",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count") +
  
  theme_minimal() +
  theme(plot.background=element_rect(fill="#E4D5C9",colour="#E4D5C9"))
```
