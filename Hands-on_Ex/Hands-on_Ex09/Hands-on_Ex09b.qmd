---
title: "Hands-on Exercise 9b: Calibrating Spatial Interaction Models with R"
title-block-banner: true
date: "08 September 2024"
date-modified: "last-modified"
toc: true
toc-depth: 4
editor: visual
execute: 
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

![](images/placeholder_9b.PNG){fig-align="center"}

# 1 Overview

Spatial interaction modelling (or gravity models) is one of the most widely used analytical tools in studying interactions between social and economic agents observed in geographical space.

Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015). Spatial interaction models, in general terms, describe and explain flow or movement between places, based on (1) their spatial separation; (2) their complementarity; and (3) other intervening opportunities or spatial structural elements serve to augment or diminish the expected flow.

There are four main types of traditional SIMs:

-   Unconstrained
-   Production-constrained
-   Attraction-constrained
-   Doubly-constrained

Ordinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this exercise, we will explore how to calibrate SIM by using the four regression methods in R environment.

# 2 The Packages

::: panel-tabset
## Packages

| Package                                                                                                                                   | Usage                                                                   |
|-------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------|
| [**sf**](https://cran.r-project.org/web/packages/sf/index.html)                                                                           | For importing, integrating, processing and transforming geospatial data |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/)                                                                                 | Choropleth mapping; thematic maps                                       |
| [**sp**](https://cran.r-project.org/web/packages/sp/index.html)                                                                           | For handling spatial objects                                            |
| [**performance**](https://easystats.github.io/performance/)                                                                               | For model performance measurement                                       |
| [**ggpubr**](https://rpkgs.datanovia.com/ggpubr/)                                                                                         | For visualisation                                                       |
| [**tidyverse**](https://www.tidyverse.org/), [**reshape2**](https://cran.r-project.org/web/packages/reshape2/index.html)                  | For importing, integrating, wrangling and visualising data              |
| [**DT**](https://rstudio.github.io/DT/), [**knitr**](https://yihui.org/knitr/), [**kableExtra**](https://haozhu233.github.io/kableExtra/) | For building tables                                                     |

: {tbl-colwidths="\[20,80\]"}

## Code

```{r}
pacman::p_load(tmap, sf, sp,
               performance,
               ggpubr, 
               tidyverse, reshape2,
               DT, knitr, kableExtra)
```
:::

# 3 The Data

This exercise is a continuation ofÂ **Hands-on Exercise 9a: Processing and Visualising Flow Data** and the following data will be used:

| Name          | Details                                                                                    |
|---------------|--------------------------------------------------------------------------------------------|
| *od_data.rds* | Weekday morning peak passenger flows at planning subzone level.                            |
| *mpsz.rds*    | URA Master Plan 2019 Planning Subzome boundary in simple feature tibble data frame format. |

: {tbl-colwidths="\[20,80\]"}

```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz
```

```{r}
od <- read_rds("data/rds/od_data.rds")
od
```

# 4 Computing Distance Matrix

In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. In this section, we will conduct additional data preparation necessary to compute distance matrix to run spatial interaction modelling.

## 4.1 Converting from sf data.table to SpatialPolygonsDataFrame

There are at least two ways to compute the required distance matrix. One is based on **sf** and the other is based on **sp**.

Past experience shown that computing distance matrix by using **sf** function took relatively longer time that **sp** method especially the data set is large. In view of this, **sp** method is used in the code chunks below.

First [`as.Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) will be used to convert *mpsz* from sf tibble data frame to **SpatialPolygonsDataFrame** of sp object as shown in the code chunk below.

```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp
```

## 4.2 Computing Distance Matrix

Next, [`spDists()`](https://www.rdocumentation.org/packages/sp/versions/2.1-1/topics/spDistsN1) of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.

```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
```

```{r}
head(dist, n=c(10, 10))
```

Notice that the output *dist* is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes. We need to carry out additional data preparation steps to tidy this data up.

## 4.3 Labelling Column and Row Headers of Distance Matrix

First, we will create a list sorted according to the the distance matrix by planning sub-zone code.

```{r}
sz_names <- mpsz$SUBZONE_C
```

Next we will attach *SUBZONE_C* to row and column for distance matrix matching ahead

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

## 4.4 Pivoting Distance Value by SUBZONE_C

Next, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)

head(distPair, 10)
```

Notice that the within zone distance is 0.

## 4.5 Updating Intra-zonal Distances

In this section, we are going to append a constant value to replace the intra-zonal distance of 0. First, we will select and find out the minimum value of the distance by using `summary()`.

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

Next, a constant distance value of 50m is added into intra-zones distance.

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)

distPair %>%
  summary()
```

The code chunk below is used to rename the origin and destination fields.

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

Lastly, the code chunk below is used to save the dataframe into rds file format

```{r}
#| eval: true

write_rds(distPair, "data/rds/distPair.rds") 
```

# 5 Preparing the Flow Data

Firstly, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is called *flow_data*.

```{r}
flow_data <- od %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 
```

Let's look at some of the data rows.

```{r}
head(flow_data, 10)
```

## 5.1 Separating intra-flow from passenger volume df

Code chunk below is used to add two new fields in *flow_data* dataframe namely *FlowNoIntra* and *offset*.

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, 
  flow_data$TRIPS)

flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 
  1)
```

## 5.2 Combining passenger volume data with distance value

Before we can join *flow_data* and *distPair*, we need to convert data value type of *ORIGIN_SZ* and *DESTIN_SZ* fields of *flow_data* dataframe into factor data type.

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```

Now, `left_join()` of **dplyr** will be used to `flow_data` dataframe and `distPair` dataframe. The output is called `flow_data1`.

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

# 6 Preparing **Origin and Destination Attributes**

## 6.1 Importing population data

Firstly, we will import the population data.

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

Next, we will do a `left_join` to *pop* data frame with *mpsz.* The output will be a sf object where each polygon in *mpsz* will be assigned a population value.

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

Next, we will need to do another `left_join()` with *flow_data1* that we have prepared earlier to prepare both origin and destination attributes.

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>% #<< ORIGIN_SZ
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>% #<< DESTIN_SZ
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

We will called the output data file *SIM_data*. it is in rds data file format.

```{r}
#| eval: true

write_rds(flow_data1, "data/rds/flow_data_6-9.rds")
SIM_data <- read_rds("data/rds/flow_data_6-9.rds")
```

# 7 Calibrating Spatial Interaction Models

In this section, we explore how to calibrate Spatial Interaction Models by using Poisson Regression method.

## 7.1 Visualising the Dependent Variables

Firstly, let us plot the distribution of the dependent variable (i.e.Â TRIPS) by using histogram method by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram() +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )

```

Notice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.

Next, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm) +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )

```

Notice that their relationship hardly resemble linear relationship.

On the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm) +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )
```

## 7.2 Log Transformation

Since Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.

In the code chunk below, `summary()` of Base R is used to compute the summary statistics of all variables in *SIM_data* data frame.

```{r}
summary(SIM_data)
```

The print report above reveals that variables *ORIGIN_AGE7_12*, *ORIGIN_AGE13_24*, *ORIGIN_AGE25_64*, *DESTIN_AGE7_12*, *DESTIN_AGE13_24*, *DESTIN_AGE25_64* consist of 0 values.

In view of this, code chunk below will be used to replace zero values to 0.99.

```{r}
SIM_data$DESTIN_AGE7_12 <- ifelse(
  SIM_data$DESTIN_AGE7_12 == 0,
  0.99, 
  SIM_data$DESTIN_AGE7_12)

SIM_data$DESTIN_AGE13_24 <- ifelse(
  SIM_data$DESTIN_AGE13_24 == 0,
  0.99, 
  SIM_data$DESTIN_AGE13_24)

SIM_data$DESTIN_AGE25_64 <- ifelse(
  SIM_data$DESTIN_AGE25_64 == 0,
  0.99, 
  SIM_data$DESTIN_AGE25_64)

SIM_data$ORIGIN_AGE7_12 <- ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0,
  0.99, 
  SIM_data$ORIGIN_AGE7_12)

SIM_data$ORIGIN_AGE13_24 <- ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0,
  0.99, 
  SIM_data$ORIGIN_AGE13_24)

SIM_data$ORIGIN_AGE25_64 <- ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0,
  0.99, 
  SIM_data$ORIGIN_AGE25_64)
```

Let's summarise the new data:

```{r}
summary(SIM_data)
```

Notice that all the 0 values have been replaced by 0.99.

## 7.3 Unconstrained Spatial Interaction Model

In this section, we will calibrate an unconstrained spatial interaction model by using `glm()` function. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. *ORIGIN_AGE25_64*) and distance between origin and destination in km (i.e. *dist*).

```{r}
uncSIM <- glm(formula = TRIPS ~ 
                log(ORIGIN_AGE25_64) + 
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

uncSIM
```

### 7.3.1 R-squared function

In order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

Next, we will compute the R-squared of the unconstrained SIM by using the code chunk below.

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```

```{r}
r2_mcfadden(uncSIM)
```

## 7.4 Origin Constrained Spatial Interaction Model

In this section, we will calibrate an origin constrained SIM. For origin constrained SIM, only explanatory variables representing the **attractiveness** at the **destinations** will be used. This is because such models emphasize the limitations or capacities of the origins rather than the demand or attractiveness of the destinations. The capacity or limitation at the origin sites determines the potential for generating interactions or flows.

```{r}
orcSIM <- glm(formula = TRIPS ~ 
                 ORIGIN_SZ +
                 log(DESTIN_AGE25_64) +
                 log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(orcSIM)
```

Let's check the R-square values of origin constrained SIM model this time.

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

Notably, R-squared improves from the unconstrained SIM model.

## 7.5 Destination Constrained Spatial Interaction Model

In this section, we will calibrate an destination constrained SIM. For destination constrained SIM, only explanatory variables which represent how **propulsive** the **origins** are will be used. This is because such models emphasize the demand or attractiveness of the destinations rather than the limitations or capacities of the origins. The demand or attractiveness of the destination sites determines the potential for generating interactions or flows.

```{r}
decSIM <- glm(formula = TRIPS ~ 
                DESTIN_SZ + 
                log(ORIGIN_AGE25_64) + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(decSIM)
```

Let's check the R-square values of destination constrained SIM model this time.

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

## 7.6 Doubly Constrained Spatial Interaction Model

In this section, we will calibrate a doubly constrained SIM. For doubly constrained SIM, both the attractiveness at the destinations and the propulsiveness at the origins are considered. The model is typically expressed in the form of a distance function between the origin and destination.

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_SZ + 
                DESTIN_SZ + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

Again, let's check the R-square values of doubly constrained SIM model this time.

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```

Notice that there is a relatively larger improvement in the R-squared value than destination constrained SIM.

# 8 Model Comparison

Another useful model performance measure for continuous dependent variable is [**Root Mean Squared Error**](https://towardsdatascience.com/what-does-rmse-really-mean-806b65f2e48e). In this sub-section, you will learn how to use [`compare_performance()`](https://easystats.github.io/performance/reference/compare_performance.html) of [**performance**](https://easystats.github.io/performance/) package.

First of all, let us create a list called *model_list* by using the code chunk below.

```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

Next, we will compute the RMSE of all the models in *model_list* file by using the code chunk below.

```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

The print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 4114.493

# 9 Visualising fitted values

Firstly we will extract the fitted values from each model by using the code chunk below.

```{r}
df_unc <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

Next, we will join the values to *SIM_data* data frame.

```{r}
SIM_data <- SIM_data %>%
  cbind(df_unc) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

We repeat the same step by for Origin Constrained SIM (i.e. *orcSIM*)

```{r}
df_orc <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df_orc) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")
```

We repeat the same step by for Destination Constrained SIM (i.e. *decSIM*)

```{r}
df_dec <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df_dec) %>%
  rename(decTRIPS = "decSIM$fitted.values")
```

We repeat the same step by for Doubly Constrained SIM (i.e. *dbcSIM*)

```{r}
df_dbc <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
```

```{r}
SIM_data <- SIM_data %>%
  cbind(df_dbc) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

Next, we will create plots for each model.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm) +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )


orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm) +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )


dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm) +
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )


dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm) +    
  theme(
    plot.title = element_text(face= 'bold', size = 10),
    panel.grid.major = element_line(colour = "#ede5de", linetype = 1, linewidth = 0.5),
    panel.grid.minor = element_line(colour = "#ede5de", linetype = 1, linewidth= 0.5),
    plot.background = element_rect(fill="#E4D5C9",colour="#E4D5C9"),
    panel.border = element_blank(),
    panel.background = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_text(hjust=1, angle=0, size = 8),
    axis.title.x = element_text(size = 8),
    strip.text = element_text(face= 'bold'),
    strip.background = element_rect(color="#E4D5C9", fill="#E4D5C9")
  )

```

Now, we will put all the graphs into a single visual for better comparison by using the code chunk below.

```{r}
ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

# 10 Reference

T. S., Kam. (2023). Calibrating Spatial Interaction Models with R. *R4GDSA.* <https://r4gdsa.netlify.app/chap16>
