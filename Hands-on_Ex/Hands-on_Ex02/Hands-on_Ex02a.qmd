---
title: "Hands-on Exercise 2a: 1st Order Spatial Point Patterns Analysis Methods"
title-block-banner: true
date: "09-Aug-24"
date-modified: "last-modified"
toc: true
toc-depth: 4
editor: visual
execute: 
  freeze: true #never re-render during project render
  echo: true #if false, displays charts without codes
  eval: true #if false, displays codes without charts
  warning: false #dont display if there are any warnings
format: 
  html:
    code-fold: false
    code-overflow: scroll
    code-summary: "Show the code"
    code-line-numbers: false
---

![](images/placeholder_2a.PNG){fig-align="center"}

# 1 Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or

-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [**spatstat**](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follow:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# 2 The Packages

::: panel-tabset
## Packages

In this hands-on exercise, five R packages will be used, they are:

| Package                                                           | Description                                                                                                                                                                                      |
|-------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [**sf**](https://r-spatial.github.io/sf/)                         | To import, manage and process vector-based geospatial data in R                                                                                                                                  |
| [**spatstat**](https://spatstat.org/)                             | For point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.           |
| [**raster**](https://cran.r-project.org/web/packages/raster/)     | To read, write, manipulate, analyse and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format. |
| [**maptools**](https://cran.r-project.org/web/packages/maptools/) | Provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.                            |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/)         | For thematic mapping; provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API                         |

: {tbl-colwidths="\[15,85\]"}

## Code

Next, pacman loads the R packages that we require:

```{r}
#| eval: false
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

```{r}
pacman::p_load(sf, tmap, spatstat, maptools, raster)
```
:::

# 3 The Data

::: panel-tabset
## Data Sources

The following public datasets are used:

+------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+---+---+
| Type       | Details                                                                                                                                                                      | Screenshot                             |   |   |
+============+==============================================================================================================================================================================+========================================+===+===+
| Geospatial | [**Child Care Services Web**](https://beta.data.gov.sg/datasets?query=child+care&resultId=d_5d668e3f544335f8028f546827b773b4)                                                | ![](images/childcare.PNG){width="600"} |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | ***Point feature*** data providing both location and attribute information of childcare centres.                                                                             |                                        |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | *Source: data.gov.sg\                                                                                                                                                        |                                        |   |   |
|            | Format: GEOJSON*                                                                                                                                                             |                                        |   |   |
+------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+---+---+
| Geospatial | [**Master Plan 2014 Subzone Boundary Web**](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9) | ![](images/MPSZ_SHP.PNG){width="600"}  |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | Consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.                                                 |                                        |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | *Source: data.gov.sg\                                                                                                                                                        |                                        |   |   |
|            | Format: SHP (ESRI Shapefile)*                                                                                                                                                |                                        |   |   |
+------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+---+---+
| Geospatial | **Coastal Outline**                                                                                                                                                          |                                        |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | ***Polygon feature*** data showing the national boundary of Singapore.                                                                                                       |                                        |   |   |
|            |                                                                                                                                                                              |                                        |   |   |
|            | *Source: SLA\                                                                                                                                                                |                                        |   |   |
|            | Format: SHP (ESRI Shapefile)*                                                                                                                                                |                                        |   |   |
+------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------+---+---+

## Importing Spatial Data

We will use `st_read()` of **sf** package to import the three geospatial datasets.

```{r}
childcare_sf <- st_read("data/childcareservices.geojson")
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```
:::

# 4 Spatial Data Wrangling

## 4.1 Inspect and Reproject Coordinate System

::: panel-tabset
## Childcare Dataset

First, we inspect the crs of the data.

```{r}
st_crs(childcare_sf)
```

The ID provided is `EPSG:4326` which matches the intended WGS84 Coordinate reference. We will now convert the CRS from WGS84 Geographic Coordinate System to SVY21 Projected Coordinate System for further analysis.

```{r}
childcare_sf <- st_transform(childcare_sf , crs = 3414)
```

Now, let us check if the CRS ID has been set correctly:

```{r}
st_crs(childcare_sf)
```

## Coastal Outline Dataset

First, we inspect the crs of the data.

```{r}
st_crs(sg_sf)
```

The ID provided is `EPSG:9001` which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
```

Now, let us check if the CRS ID has been set correctly:

```{r}
st_crs(sg_sf)
```

## Master Plan Subzone Dataset

First, we inspect the crs of the data.

```{r}
st_crs(mpsz_sf)
```

The ID provided is `EPSG:9001` which does not match the intended Projected CRS input of SVY21. Now, we correct the CRS ID using the code below.

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
```

Now, let us check if the CRS ID has been set correctly:

```{r}
st_crs(mpsz_sf)
```
:::

## 4.2 Mapping the Geospatial Datasets

After checking the CRS of each geospatial data frame, we can plot a map to see their spatial patterns.

### Static Map

First, we will create a static map to get a general feel of the dataset.

```{r}
tm_shape(sg_sf)+
  tm_polygons(col = "#a87b6f") +
tm_shape(mpsz_sf) +
  tm_polygons(col = "#f5f5f5") +
tm_shape(childcare_sf) +
  tm_dots(col="#800200") +
tm_layout(bg.color = "#E4D5C9",
            frame = F)
```

```{r}
tm_shape(mpsz_sf) +
  tm_polygons(col = "#f5f5f5") +
tm_shape(sg_sf)+
  tm_polygons(col = "#a87b6f") +
tm_shape(childcare_sf) +
  tm_dots(col="#800200") +
tm_layout(bg.color = "#E4D5C9",
            frame = F)
```

Here, we do not see any anomalies, all the geospatial points are within the map's context, which means that the reference system and coordinate values are referred to the similar spatial context.

We can also prepare a pin map (interactive) by using the code below:

```{r}
tmap_mode('view')

tm_basemap("OpenStreetMap") +
tm_shape(childcare_sf) +
  tm_dots(alpha = 0.5)
```

From the interactive map above, we can see that **tmap** is ustilising the leaflet for R API, which allows us to interact, navigate, zoom and query each simple feature. Changing the background of the map is also possible.

After setting the `tmap_mode()` to *view* we need to remember to switch it back to *plot*.

```{r}
#| echo: true

tmap_mode('plot')
```

# 5 Geospatial Data Wrangling

## 5.1 Converting sf Dataframes to **sp**'s Spatial\* Class

While simple feature data frame is gaining in popularity, many geospatial analysis packages still require the input geospatial data in sp's Spatial\* classes.

::: panel-tabset
## Conversion

The code below uses [`as_Spatial()`](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

Now, let's view the information of the Spatial\* classes below:

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

Now, they have been correctly converted into sp's Spatial\* classes.

## Comparison

```{r}
head(childcare_sf)
```

```{r}
head(childcare)
```

```{r}
plot(childcare_sf)
```

```{r}
plot(childcare)
```

```{r}
head(mpsz_sf)
```

```{r}
head(mpsz)
```

```{r}
plot(mpsz_sf)
```

```{r}
plot(mpsz)
```

```{r}
head(sg)
```

```{r}
plot(sg_sf)
```

```{r}
plot(sg)
```
:::

## 5.2 Converting the Spatial\* Class into Generic sp Format

**spstat** requires the analytical data to be in ***ppp*** object form. As there is no direct method to convert Spatial\* classes to ***ppp*** object, we need to convert the Spatial\* classes into an intermediate *Spatial* object first.

The code below converts Spatial\* Classes into generic sp objects:

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Next, we can display the ***sp*** object properties.

```{r}
childcare_sp
```

```{r}
sg_sp
```

::: {.lightbox .light data-latex="light"}
**Differences between Spatial\* classes and generic sp object**

-   The previous SpatialPolygonsDataFrame class has now changed to the respective Spatial objects (points/polygons).

-   The points in a SpatialPoints object may be associated with a row of attributes to create a SpatialPointsDataFrame object.
:::

## 5.3 Converting the Generic sp Format into spatstat's ppp Format

we will use `as.ppp()` function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Let's examine the difference by plotting *chidlcare_ppp*:

```{r}
plot(childcare_ppp)
```

We now look at the summary statistics of the newly created ppp object.

```{r}
summary(childcare_ppp)
```

::: {.lightbox .light data-latex="light"}
**Key Point**

Pay attention to the warning message regarding duplicates. In spatial point patterns analysis, a notable concern is the existence of duplicates. The statistical methods applied to spatial point patterns are predominantly built on the assumption that processes are straightforward, meaning that points cannot overlap.
:::

## 5.4 Handling duplicated points

In order to check duplication in a ppp object:

```{r}
any(duplicated(childcare_ppp))
```

`multiplicity()` function is used to count the number of co-indicence point.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

To view the locations of these duplicate point events, we will plot childcare data:

```{r}
tmap_mode('view')

tm_basemap("OpenStreetMap") +
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

```{r}
#| echo: true
tmap_mode('plot')
```

### 5.4.1 Jittering

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

## 5.5 Creating *owin* object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

How to covert sg SpatialPolygon object into owin object of **spatstat**:

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed by using `plot()` function:

```{r}
plot(sg_owin)
```

And using `summary()` function of Base R:

```{r}
summary(sg_owin)
```

## 5.6 Combining point events object and owin object

For the last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

# 6 First-order Spatial Point Patterns Analysis

In this section, we will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

## 6.1 Kernel Density Estimation

In this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.

### 6.1.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: "epanechnikov", "quartic" or "disc".

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

The plot() function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in ***meter***. As a result, the density values computed is in *number of points per square meter*.

Before we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer:

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

### 6.1.2 Rescalling KDE values

`rescale()` is used to covert the unit of measurement from meter to kilometer:

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can re-run `density()` using the resale data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Now we notice the output image looks identical to the earlier version, the only changes in the data values (refer to the legend).

## 6.2 Working with different automatic badwidth methods

Beside `bw.diggle()`, there are 3 other **spatstat** functions can be used to determine the bandwidth, they are: `bw.CvL()`, `bw.scott()`, and `bw.ppl()`.

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods by using:

::: panel-tabset
## bw.CvL()

```{r}
 bw.CvL(childcareSG_ppp.km)
```

## bw.scott()

```{r}
bw.scott(childcareSG_ppp.km)
```

## bw.ppl()

```{r}
bw.ppl(childcareSG_ppp.km)
```

## bw.diggle()

```{r}
bw.diggle(childcareSG_ppp.km)
```
:::

Baddeley et. (2016) suggested the use of the `bw.ppl()` algorithm as it tends to produce the more appropriate values when the pattern consists *predominantly of tight clusters*. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the `bw.diggle()` method seems to work best.

This will be used to compare the output of using `bw.diggle()` and `bw.ppl()` methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))

plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

## 6.3 Working with different kernel methods

By default, the kernel method used in `density.ppp()` is gaussian. But there are three other options, namely: *Epanechnikov*, *Quartic* and *Dics*. Let's take a look at what they're like:

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

# 7 Fixed and Adaptive KDE

## 7.1 Computing KDE by using fixed bandwidth

Next, we will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

## 7.2 Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.

In this section, we will learn how to derive adaptive kernel density estimation by using [`density.adaptive()`](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using:

```{r}
par(mfrow=c(1,2))

plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

## 7.3 Converting KDE output into grid object

The result is the same, we just convert it so that it is suitable for mapping purposes:

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

### 7.3.1 Converting gridded output into raster

Next, we will convert the gridded kernal density objects into RasterLayer object by using `raster()` of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
```

Let us take a look at the properties of *kde_childcareSG_bw_raster* RasterLayer.

```{r}
kde_childcareSG_bw_raster
```

Notice that the crs property is NA.

### 7.3.2 Assigning projection systems

Below we will be used to include the CRS information on *kde_childcareSG_bw_raster* RasterLayer.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

Note: crs property is completed.

## 7.4 Visualising the output in tmap

Finally, we will display the raster in cartographic quality map using **tmap** package.

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster(palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), 
            frame = FALSE,
            bg.color = "#E4D5C9")
```

Notice: The raster values are encoded explicitly onto the raster pixel using the values in "v" field.

## 7.5 Comparing Spatial Point Patterns using KDE

In this section, we will learn how to compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

### 7.5.1 Extracting Study Area

To extract the target planning areas:

```{r}
pg = mpsz[mpsz@data$PLN_AREA_N == "PUNGGOL",]
tm = mpsz[mpsz@data$PLN_AREA_N == "TAMPINES",]
ck = mpsz[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
jw = mpsz[mpsz@data$PLN_AREA_N == "JURONG WEST",]
```

Plotting target planning areas:

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

### 7.5.2 Creating owin object

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

### 7.5.3 Combining childcare points and the study area

To extract childcare that is within the specific region to do our analysis later on:

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, `rescale()` function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

To plot these four study areas and the locations of the childcare centres.

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

### 7.5.4 Computing KDE

To compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

### 7.5.5 Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

# 8 Nearest Neighbour Analysis

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [`clarkevans.test()`](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

$H_o$ = The distribution of childcare services are randomly distributed.

$H_1$ = The distribution of childcare services are not randomly distributed.

The 95% confidence interval will be used.

## 8.1 Testing spatial point patterns using Clark and Evans Test

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

::: {.lightbox .light data-latex="light"}
**Interpretation**

As P is \< 0.05, we reject the null hypothesis that the childcare services are randomly distributed. We can infer from the R value (Nearest Neighbour Index) that since R = 0.51429 \< 1, the pattern exhibits clustering in Singapore.
:::

### 4.5.2 Clark and Evans Test: Choa Chu Kang planning area

In the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

::: {.lightbox .light data-latex="light"}
**Interpretation**

As P is 0.0661 \> 0.05, we cannot reject the null hypothesis that the childcare services are randomly distributed in Choa Chu Kang.
:::

### 4.5.3 Clark and Evans Test: Tampines planning area

The similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

::: {.lightbox .light data-latex="light"}
**Interpretation**

As P is \< 0.05, we reject the null hypothesis that the childcare services are randomly distributed. We can infer from the R value (Nearest Neighbour Index) that since R = 0.68631 \< 1, the pattern exhibits clustering in Tampines.
:::

# 9 Reference

Kam, T. S.1st Order Spatial Point Patterns Analysis Methods. *R for Geospatial Data Science and Analytics*. <https://r4gdsa.netlify.app/chap04.html>
